
STM32_IIC_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a020  0800a020  0000b020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a49c  0800a49c  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a49c  0800a49c  0000b49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a4  0800a4a4  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a4  0800a4a4  0000b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4a8  0800a4a8  0000b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a4ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  0800a688  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800a688  0000c3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0b5  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d6  00000000  00000000  000172ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00019390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000825  00000000  00000000  00019e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185cd  00000000  00000000  0001a645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e54b  00000000  00000000  00032c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086658  00000000  00000000  0004115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c77b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f84  00000000  00000000  000c77f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cb77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a004 	.word	0x0800a004

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a004 	.word	0x0800a004

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Init>:
 */
//状态机
enum AHT20_State AHT20_STATE=FREE;

void AHT20_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
    AHT20_STATE=INIT;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <AHT20_Init+0x60>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  uint8_t readBuffer;
  HAL_Delay(40);
 800109c:	2028      	movs	r0, #40	@ 0x28
 800109e:	f000 fc59 	bl	8001954 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2170      	movs	r1, #112	@ 0x70
 80010ae:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <AHT20_Init+0x64>)
 80010b0:	f001 f9fa 	bl	80024a8 <HAL_I2C_Master_Receive>
  if ((readBuffer & 0x08) == 0x00)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d110      	bne.n	80010e0 <AHT20_Init+0x50>
  {
    uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};
 80010be:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <AHT20_Init+0x68>)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	8019      	strh	r1, [r3, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	0c12      	lsrs	r2, r2, #16
 80010cc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2303      	movs	r3, #3
 80010d8:	2170      	movs	r1, #112	@ 0x70
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <AHT20_Init+0x64>)
 80010dc:	f001 f8e6 	bl	80022ac <HAL_I2C_Master_Transmit>
  }
    AHT20_STATE=FREE;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <AHT20_Init+0x60>)
 80010e2:	2206      	movs	r2, #6
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000200 	.word	0x20000200
 80010f8:	0800a020 	.word	0x0800a020

080010fc <AHT20_Measure>:
 * @param  Temperature: 存储获取到的温度
 * @param  Humidity: 存储获取到的湿度
 */

void AHT20_Measure()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    AHT20_STATE=MEASURING;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <AHT20_Measure+0x20>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
    static uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};
    //中断发送函数不会等待，有可能还没发送完成sendBuffer就已经被释放了，需要让它变成静态的避免发送错误数据
    HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDRESS, sendBuffer, 3);
 8001106:	2303      	movs	r3, #3
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <AHT20_Measure+0x24>)
 800110a:	2170      	movs	r1, #112	@ 0x70
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <AHT20_Measure+0x28>)
 800110e:	f001 fc37 	bl	8002980 <HAL_I2C_Master_Transmit_IT>
    HAL_Delay(75);
 8001112:	204b      	movs	r0, #75	@ 0x4b
 8001114:	f000 fc1e 	bl	8001954 <HAL_Delay>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000004 	.word	0x20000004
 8001124:	20000200 	.word	0x20000200

08001128 <ATH20_Get>:

void ATH20_Get(float *Temperature, float *Humidity)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    static uint8_t readBuffer[6] = {0};
    if(AHT20_STATE==MEASURE_DONE){
 8001132:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <ATH20_Get+0xd0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d108      	bne.n	800114c <ATH20_Get+0x24>
        AHT20_STATE=GETTING;
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <ATH20_Get+0xd0>)
 800113c:	2203      	movs	r2, #3
 800113e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_IT(&hi2c1, AHT20_ADDRESS, readBuffer, 6);
 8001140:	2306      	movs	r3, #6
 8001142:	4a2e      	ldr	r2, [pc, #184]	@ (80011fc <ATH20_Get+0xd4>)
 8001144:	2170      	movs	r1, #112	@ 0x70
 8001146:	482e      	ldr	r0, [pc, #184]	@ (8001200 <ATH20_Get+0xd8>)
 8001148:	f001 fcba 	bl	8002ac0 <HAL_I2C_Master_Receive_IT>
    }

    if (AHT20_STATE==GET_DONE) {
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <ATH20_Get+0xd0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d14d      	bne.n	80011f0 <ATH20_Get+0xc8>

        if ((readBuffer[0] & 0x80) == 0x00) {
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <ATH20_Get+0xd4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	db45      	blt.n	80011ea <ATH20_Get+0xc2>
            uint32_t data = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
            data = ((uint32_t) readBuffer[3] >> 4) + ((uint32_t) readBuffer[2] << 4) + ((uint32_t) readBuffer[1] << 12);
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <ATH20_Get+0xd4>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <ATH20_Get+0xd4>)
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	441a      	add	r2, r3
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <ATH20_Get+0xd4>)
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
            *Humidity = data * 100.0f / (1 << 20);
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff fda8 	bl	8000cd4 <__aeabi_ui2f>
 8001184:	4603      	mov	r3, r0
 8001186:	491f      	ldr	r1, [pc, #124]	@ (8001204 <ATH20_Get+0xdc>)
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fdfb 	bl	8000d84 <__aeabi_fmul>
 800118e:	4603      	mov	r3, r0
 8001190:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fea9 	bl	8000eec <__aeabi_fdiv>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	601a      	str	r2, [r3, #0]

            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <ATH20_Get+0xd4>)
 80011a4:	78db      	ldrb	r3, [r3, #3]
 80011a6:	041b      	lsls	r3, r3, #16
 80011a8:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <ATH20_Get+0xd4>)
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	4413      	add	r3, r2
                   (uint32_t) readBuffer[5];
 80011b4:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <ATH20_Get+0xd4>)
 80011b6:	7952      	ldrb	r2, [r2, #5]
            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 80011b8:	4413      	add	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
            *Temperature = data * 200.0f / (1 << 20) - 50;
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fd89 	bl	8000cd4 <__aeabi_ui2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4910      	ldr	r1, [pc, #64]	@ (8001208 <ATH20_Get+0xe0>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fddc 	bl	8000d84 <__aeabi_fmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe8a 	bl	8000eec <__aeabi_fdiv>
 80011d8:	4603      	mov	r3, r0
 80011da:	490c      	ldr	r1, [pc, #48]	@ (800120c <ATH20_Get+0xe4>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fcc7 	bl	8000b70 <__aeabi_fsub>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
        }
        AHT20_STATE=READY;
 80011ea:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <ATH20_Get+0xd0>)
 80011ec:	2205      	movs	r2, #5
 80011ee:	701a      	strb	r2, [r3, #0]
    }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200001f8 	.word	0x200001f8
 8001200:	20000200 	.word	0x20000200
 8001204:	42c80000 	.word	0x42c80000
 8001208:	43480000 	.word	0x43480000
 800120c:	42480000 	.word	0x42480000

08001210 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d102      	bne.n	8001226 <HAL_I2C_MasterTxCpltCallback+0x16>
        AHT20_STATE=MEASURE_DONE;
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
    }

}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000200 	.word	0x20000200
 8001234:	20000000 	.word	0x20000000

08001238 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d102      	bne.n	800124e <HAL_I2C_MasterRxCpltCallback+0x16>
        AHT20_STATE=GET_DONE;
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <HAL_I2C_MasterRxCpltCallback+0x24>)
 800124a:	2204      	movs	r2, #4
 800124c:	701a      	strb	r2, [r3, #0]
    }

 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000200 	.word	0x20000200
 800125c:	20000000 	.word	0x20000000

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_GPIO_Init+0x74>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <MX_GPIO_Init+0x74>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_GPIO_Init+0x74>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_GPIO_Init+0x74>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <MX_GPIO_Init+0x74>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_GPIO_Init+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_GPIO_Init+0x78>)
 80012aa:	f000 fe8f 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ae:	2302      	movs	r3, #2
 80012b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2302      	movs	r3, #2
 80012bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_GPIO_Init+0x78>)
 80012c6:	f000 fcfd 	bl	8001cc4 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_I2C1_Init+0x50>)
 80012e2:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <MX_I2C1_Init+0x54>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_I2C1_Init+0x50>)
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x58>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_I2C1_Init+0x50>)
 80012fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_I2C1_Init+0x50>)
 800131a:	f000 fe6f 	bl	8001ffc <HAL_I2C_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001324:	f000 f8d9 	bl	80014da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000200 	.word	0x20000200
 8001330:	40005400 	.word	0x40005400
 8001334:	000186a0 	.word	0x000186a0

08001338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_I2C_MspInit+0x90>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d133      	bne.n	80013c0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001370:	23c0      	movs	r3, #192	@ 0xc0
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4813      	ldr	r0, [pc, #76]	@ (80013d0 <HAL_I2C_MspInit+0x98>)
 8001384:	f000 fc9e 	bl	8001cc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 800138e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_I2C_MspInit+0x94>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	201f      	movs	r0, #31
 80013a6:	f000 fbd0 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013aa:	201f      	movs	r0, #31
 80013ac:	f000 fbe9 	bl	8001b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2020      	movs	r0, #32
 80013b6:	f000 fbc8 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013ba:	2020      	movs	r0, #32
 80013bc:	f000 fbe1 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b092      	sub	sp, #72	@ 0x48
 80013d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fa59 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f841 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f7ff ff3d 	bl	8001260 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013e6:	f7ff ff79 	bl	80012dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 f9b7 	bl	800175c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init();                // 初始化 AHT20
 80013ee:	f7ff fe4f 	bl	8001090 <AHT20_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    // 读取温湿度
    AHT20_Measure();
 80013f2:	f7ff fe83 	bl	80010fc <AHT20_Measure>
    ATH20_Get(&temperature,&humidity);
 80013f6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80013fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe91 	bl	8001128 <ATH20_Get>
    // 打印温湿度
    sprintf(message, "温度: %.1f ℃, 湿度: %.1f %%\r\n", temperature, humidity);
 8001406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f80d 	bl	8000428 <__aeabi_f2d>
 800140e:	4604      	mov	r4, r0
 8001410:	460d      	mov	r5, r1
 8001412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f807 	bl	8000428 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	1d38      	adds	r0, r7, #4
 8001420:	e9cd 2300 	strd	r2, r3, [sp]
 8001424:	4622      	mov	r2, r4
 8001426:	462b      	mov	r3, r5
 8001428:	490b      	ldr	r1, [pc, #44]	@ (8001458 <main+0x84>)
 800142a:	f005 f9b9 	bl	80067a0 <siprintf>
    // 串口发送
      if (AHT20_STATE==READY)
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <main+0x88>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d1dd      	bne.n	80013f2 <main+0x1e>
      {
          HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fe89 	bl	8000150 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	1d39      	adds	r1, r7, #4
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <main+0x8c>)
 800144a:	f004 f8af 	bl	80055ac <HAL_UART_Transmit>
          // 延时 1 秒
          HAL_Delay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f000 fa7f 	bl	8001954 <HAL_Delay>
    AHT20_Measure();
 8001456:	e7cc      	b.n	80013f2 <main+0x1e>
 8001458:	0800a024 	.word	0x0800a024
 800145c:	20000000 	.word	0x20000000
 8001460:	20000258 	.word	0x20000258

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b090      	sub	sp, #64	@ 0x40
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2228      	movs	r2, #40	@ 0x28
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f005 f9f9 	bl	800686a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148a:	2301      	movs	r3, #1
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148e:	2310      	movs	r3, #16
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fc26 	bl	8004cec <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014a6:	f000 f818 	bl	80014da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fe94 	bl	80051f0 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ce:	f000 f804 	bl	80014da <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3740      	adds	r7, #64	@ 0x40
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e2:	bf00      	nop
 80014e4:	e7fd      	b.n	80014e2 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f9be 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <I2C1_EV_IRQHandler+0x10>)
 80015aa:	f001 fb31 	bl	8002c10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000200 	.word	0x20000200

080015b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <I2C1_ER_IRQHandler+0x10>)
 80015be:	f001 fc98 	bl	8002ef2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000200 	.word	0x20000200

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <_kill>:

int _kill(int pid, int sig)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e4:	f005 f994 	bl	8006910 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2216      	movs	r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_exit>:

void _exit (int status)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001602:	f04f 31ff 	mov.w	r1, #4294967295
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffe7 	bl	80015da <_kill>
  while (1) {}    /* Make sure we hang here */
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a8:	605a      	str	r2, [r3, #4]
  return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f005 f8fc 	bl	8006910 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20005000 	.word	0x20005000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000254 	.word	0x20000254
 800174c:	200003f0 	.word	0x200003f0

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <MX_USART2_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001794:	f003 feba 	bl	800550c <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f7ff fe9c 	bl	80014da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000258 	.word	0x20000258
 80017ac:	40004400 	.word	0x40004400

080017b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_UART_MspInit+0x88>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d12f      	bne.n	8001830 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a13      	ldr	r2, [pc, #76]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_MspInit+0x8c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001800:	2304      	movs	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <HAL_UART_MspInit+0x90>)
 8001814:	f000 fa56 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001818:	2308      	movs	r3, #8
 800181a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <HAL_UART_MspInit+0x90>)
 800182c:	f000 fa4a 	bl	8001cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40004400 	.word	0x40004400
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001844:	f7ff ff84 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480b      	ldr	r0, [pc, #44]	@ (8001878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800184a:	490c      	ldr	r1, [pc, #48]	@ (800187c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800184c:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001860:	4c09      	ldr	r4, [pc, #36]	@ (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f005 f855 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff fdaf 	bl	80013d4 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001880:	0800a4ac 	.word	0x0800a4ac
  ldr r2, =_sbss
 8001884:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001888:	200003f0 	.word	0x200003f0

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f947 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fe1c 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f95f 	bl	8001b9e <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f927 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000008 	.word	0x20000008
 8001914:	20000010 	.word	0x20000010
 8001918:	2000000c 	.word	0x2000000c

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	@ (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000010 	.word	0x20000010
 800193c:	200002a0 	.word	0x200002a0

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	@ (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200002a0 	.word	0x200002a0

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff0 	bl	8001940 <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffe0 	bl	8001940 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000010 	.word	0x20000010

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d005      	beq.n	8001bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e051      	b.n	8001c80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a22      	ldr	r2, [pc, #136]	@ (8001c8c <HAL_DMA_Abort_IT+0xd4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d029      	beq.n	8001c5a <HAL_DMA_Abort_IT+0xa2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a21      	ldr	r2, [pc, #132]	@ (8001c90 <HAL_DMA_Abort_IT+0xd8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x9e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1f      	ldr	r2, [pc, #124]	@ (8001c94 <HAL_DMA_Abort_IT+0xdc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01a      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x98>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <HAL_DMA_Abort_IT+0xe0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d012      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x92>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <HAL_DMA_Abort_IT+0xe4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00a      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x8c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca0 <HAL_DMA_Abort_IT+0xe8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d102      	bne.n	8001c3e <HAL_DMA_Abort_IT+0x86>
 8001c38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c3c:	e00e      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c42:	e00b      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c48:	e008      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	e005      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c54:	e002      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c56:	2310      	movs	r3, #16
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_Abort_IT+0xa4>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_DMA_Abort_IT+0xec>)
 8001c5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
    } 
  }
  return status;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40020008 	.word	0x40020008
 8001c90:	4002001c 	.word	0x4002001c
 8001c94:	40020030 	.word	0x40020030
 8001c98:	40020044 	.word	0x40020044
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	4002006c 	.word	0x4002006c
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	@ 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e169      	b.n	8001fac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 8158 	bne.w	8001fa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a9a      	ldr	r2, [pc, #616]	@ (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d05e      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d00:	4a98      	ldr	r2, [pc, #608]	@ (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d875      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d06:	4a98      	ldr	r2, [pc, #608]	@ (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d058      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d0c:	4a96      	ldr	r2, [pc, #600]	@ (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d86f      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d12:	4a96      	ldr	r2, [pc, #600]	@ (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d052      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d18:	4a94      	ldr	r2, [pc, #592]	@ (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d869      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a94      	ldr	r2, [pc, #592]	@ (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04c      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d24:	4a92      	ldr	r2, [pc, #584]	@ (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d863      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a92      	ldr	r2, [pc, #584]	@ (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d046      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d30:	4a90      	ldr	r2, [pc, #576]	@ (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d85d      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d82a      	bhi.n	8001d90 <HAL_GPIO_Init+0xcc>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d859      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <HAL_GPIO_Init+0x80>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001d99 	.word	0x08001d99
 8001d4c:	08001dab 	.word	0x08001dab
 8001d50:	08001ded 	.word	0x08001ded
 8001d54:	08001df3 	.word	0x08001df3
 8001d58:	08001df3 	.word	0x08001df3
 8001d5c:	08001df3 	.word	0x08001df3
 8001d60:	08001df3 	.word	0x08001df3
 8001d64:	08001df3 	.word	0x08001df3
 8001d68:	08001df3 	.word	0x08001df3
 8001d6c:	08001df3 	.word	0x08001df3
 8001d70:	08001df3 	.word	0x08001df3
 8001d74:	08001df3 	.word	0x08001df3
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001df3 	.word	0x08001df3
 8001d80:	08001df3 	.word	0x08001df3
 8001d84:	08001df3 	.word	0x08001df3
 8001d88:	08001da1 	.word	0x08001da1
 8001d8c:	08001db5 	.word	0x08001db5
 8001d90:	4a79      	ldr	r2, [pc, #484]	@ (8001f78 <HAL_GPIO_Init+0x2b4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d96:	e02c      	b.n	8001df2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e029      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e024      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	3308      	adds	r3, #8
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e01f      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	330c      	adds	r3, #12
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e01a      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e013      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	611a      	str	r2, [r3, #16]
          break;
 8001dde:	e009      	b.n	8001df4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de0:	2308      	movs	r3, #8
 8001de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	615a      	str	r2, [r3, #20]
          break;
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          break;
 8001df2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	@ 0xff
 8001df8:	d801      	bhi.n	8001dfe <HAL_GPIO_Init+0x13a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_Init+0x13e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2bff      	cmp	r3, #255	@ 0xff
 8001e08:	d802      	bhi.n	8001e10 <HAL_GPIO_Init+0x14c>
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x152>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	3b08      	subs	r3, #8
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80b1 	beq.w	8001fa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e44:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b4a      	ldr	r3, [pc, #296]	@ (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e5c:	4a48      	ldr	r2, [pc, #288]	@ (8001f80 <HAL_GPIO_Init+0x2bc>)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a40      	ldr	r2, [pc, #256]	@ (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_GPIO_Init+0x1ec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f88 <HAL_GPIO_Init+0x2c4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_GPIO_Init+0x1e8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3e      	ldr	r2, [pc, #248]	@ (8001f8c <HAL_GPIO_Init+0x2c8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f90 <HAL_GPIO_Init+0x2cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_GPIO_Init+0x1e0>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ec2:	492f      	ldr	r1, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x2bc>)
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4928      	ldr	r1, [pc, #160]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4922      	ldr	r1, [pc, #136]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	491e      	ldr	r1, [pc, #120]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4918      	ldr	r1, [pc, #96]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4914      	ldr	r1, [pc, #80]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d021      	beq.n	8001f98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	490e      	ldr	r1, [pc, #56]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e021      	b.n	8001fa6 <HAL_GPIO_Init+0x2e2>
 8001f62:	bf00      	nop
 8001f64:	10320000 	.word	0x10320000
 8001f68:	10310000 	.word	0x10310000
 8001f6c:	10220000 	.word	0x10220000
 8001f70:	10210000 	.word	0x10210000
 8001f74:	10120000 	.word	0x10120000
 8001f78:	10110000 	.word	0x10110000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40010800 	.word	0x40010800
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40011400 	.word	0x40011400
 8001f94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	4909      	ldr	r1, [pc, #36]	@ (8001fc8 <HAL_GPIO_Init+0x304>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	3301      	adds	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f47f ae8e 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	372c      	adds	r7, #44	@ 0x2c
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40010400 	.word	0x40010400

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12b      	b.n	8002266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff f988 	bl	8001338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	@ 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f003 fa0e 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a81      	ldr	r2, [pc, #516]	@ (8002270 <HAL_I2C_Init+0x274>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a80      	ldr	r2, [pc, #512]	@ (8002274 <HAL_I2C_Init+0x278>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a7d      	ldr	r2, [pc, #500]	@ (8002278 <HAL_I2C_Init+0x27c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0e7      	b.n	8002266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a78      	ldr	r2, [pc, #480]	@ (800227c <HAL_I2C_Init+0x280>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002270 <HAL_I2C_Init+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_I2C_Init+0x284>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	495c      	ldr	r1, [pc, #368]	@ (8002270 <HAL_I2C_Init+0x274>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d819      	bhi.n	8002138 <HAL_I2C_Init+0x13c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_I2C_Init+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb1 f3f3 	udiv	r3, r1, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	e051      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002134:	2304      	movs	r3, #4
 8002136:	e04f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_I2C_Init+0x168>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e012      	b.n	800218a <HAL_I2C_Init+0x18e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Init+0x196>
 800218e:	2301      	movs	r3, #1
 8002190:	e022      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_I2C_Init+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e58      	subs	r0, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6809      	ldr	r1, [r1, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002206:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6911      	ldr	r1, [r2, #16]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000186a0 	.word	0x000186a0
 8002274:	001e847f 	.word	0x001e847f
 8002278:	003d08ff 	.word	0x003d08ff
 800227c:	431bde83 	.word	0x431bde83
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	2b80      	cmp	r3, #128	@ 0x80
 8002298:	d103      	bne.n	80022a2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	4613      	mov	r3, r2
 80022be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fb3e 	bl	8001940 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 80e0 	bne.w	8002494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2319      	movs	r3, #25
 80022da:	2201      	movs	r2, #1
 80022dc:	4970      	ldr	r1, [pc, #448]	@ (80024a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f002 fa82 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0d3      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x50>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0cc      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d007      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2221      	movs	r2, #33	@ 0x21
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2210      	movs	r2, #16
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	893a      	ldrh	r2, [r7, #8]
 8002352:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a50      	ldr	r2, [pc, #320]	@ (80024a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f002 f844 	bl	80043f8 <I2C_MasterRequestWrite>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e08d      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002390:	e066      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	6a39      	ldr	r1, [r7, #32]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f002 fb40 	bl	8004a1c <I2C_WaitOnTXEFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d107      	bne.n	80023ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11b      	bne.n	8002434 <HAL_I2C_Master_Transmit+0x188>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d017      	beq.n	8002434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	6a39      	ldr	r1, [r7, #32]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f002 fb37 	bl	8004aac <I2C_WaitOnBTFFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	2b04      	cmp	r3, #4
 800244a:	d107      	bne.n	800245c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01a      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d194      	bne.n	8002392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000

080024a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff fa3e 	bl	8001940 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	f040 824b 	bne.w	800296a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2319      	movs	r3, #25
 80024da:	2201      	movs	r2, #1
 80024dc:	497f      	ldr	r1, [pc, #508]	@ (80026dc <HAL_I2C_Master_Receive+0x234>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f002 f982 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	e23e      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2C_Master_Receive+0x54>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e237      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d007      	beq.n	8002522 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002530:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2222      	movs	r2, #34	@ 0x22
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2210      	movs	r2, #16
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	893a      	ldrh	r2, [r7, #8]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a5f      	ldr	r2, [pc, #380]	@ (80026e0 <HAL_I2C_Master_Receive+0x238>)
 8002562:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002564:	8979      	ldrh	r1, [r7, #10]
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 ffc6 	bl	80044fc <I2C_MasterRequestRead>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1f8      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e1cc      	b.n	8002944 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d11e      	bne.n	80025f0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025c2:	b672      	cpsid	i
}
 80025c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ec:	b662      	cpsie	i
}
 80025ee:	e035      	b.n	800265c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d11e      	bne.n	8002636 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002630:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002632:	b662      	cpsie	i
}
 8002634:	e012      	b.n	800265c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800265c:	e172      	b.n	8002944 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002662:	2b03      	cmp	r3, #3
 8002664:	f200 811f 	bhi.w	80028a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	2b01      	cmp	r3, #1
 800266e:	d123      	bne.n	80026b8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f002 fa93 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e173      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026b6:	e145      	b.n	8002944 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d152      	bne.n	8002766 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	2200      	movs	r2, #0
 80026c8:	4906      	ldr	r1, [pc, #24]	@ (80026e4 <HAL_I2C_Master_Receive+0x23c>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f002 f88c 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e148      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
 80026da:	bf00      	nop
 80026dc:	00100002 	.word	0x00100002
 80026e0:	ffff0000 	.word	0xffff0000
 80026e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800272e:	b662      	cpsie	i
}
 8002730:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002764:	e0ee      	b.n	8002944 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	2200      	movs	r2, #0
 800276e:	4981      	ldr	r1, [pc, #516]	@ (8002974 <HAL_I2C_Master_Receive+0x4cc>)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f002 f839 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0f5      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002978 <HAL_I2C_Master_Receive+0x4d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	4a6b      	ldr	r2, [pc, #428]	@ (800297c <HAL_I2C_Master_Receive+0x4d4>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0a1a      	lsrs	r2, r3, #8
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00da      	lsls	r2, r3, #3
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d118      	bne.n	800281e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800280e:	b662      	cpsie	i
}
 8002810:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0a6      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d1d9      	bne.n	80027e0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800286e:	b662      	cpsie	i
}
 8002870:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028a4:	e04e      	b.n	8002944 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f002 f978 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e058      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d124      	bne.n	8002944 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002910:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f ae88 	bne.w	800265e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	00010004 	.word	0x00010004
 8002978:	20000008 	.word	0x20000008
 800297c:	14f8b589 	.word	0x14f8b589

08002980 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
 8002990:	4613      	mov	r3, r2
 8002992:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	f040 8081 	bne.w	8002aa8 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80029a6:	4b43      	ldr	r3, [pc, #268]	@ (8002ab4 <HAL_I2C_Master_Transmit_IT+0x134>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	4a42      	ldr	r2, [pc, #264]	@ (8002ab8 <HAL_I2C_Master_Transmit_IT+0x138>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0a1a      	lsrs	r2, r3, #8
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009a      	lsls	r2, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d112      	bne.n	80029f2 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	e05b      	b.n	8002aaa <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d0df      	beq.n	80029c0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Master_Transmit_IT+0x8e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e04d      	b.n	8002aaa <HAL_I2C_Master_Transmit_IT+0x12a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2221      	movs	r2, #33	@ 0x21
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	893a      	ldrh	r2, [r7, #8]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a76:	897a      	ldrh	r2, [r7, #10]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002a92:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000008 	.word	0x20000008
 8002ab8:	14f8b589 	.word	0x14f8b589
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	f040 8089 	bne.w	8002bf8 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ae6:	4b47      	ldr	r3, [pc, #284]	@ (8002c04 <HAL_I2C_Master_Receive_IT+0x144>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	4a46      	ldr	r2, [pc, #280]	@ (8002c08 <HAL_I2C_Master_Receive_IT+0x148>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a1a      	lsrs	r2, r3, #8
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d112      	bne.n	8002b32 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e063      	b.n	8002bfa <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d0df      	beq.n	8002b00 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Master_Receive_IT+0x8e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e055      	b.n	8002bfa <HAL_I2C_Master_Receive_IT+0x13a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d007      	beq.n	8002b74 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2222      	movs	r2, #34	@ 0x22
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	893a      	ldrh	r2, [r7, #8]
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_I2C_Master_Receive_IT+0x14c>)
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002bb6:	897a      	ldrh	r2, [r7, #10]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002be2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000008 	.word	0x20000008
 8002c08:	14f8b589 	.word	0x14f8b589
 8002c0c:	ffff0000 	.word	0xffff0000

08002c10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d003      	beq.n	8002c48 <HAL_I2C_EV_IRQHandler+0x38>
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b40      	cmp	r3, #64	@ 0x40
 8002c44:	f040 80c1 	bne.w	8002dca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_I2C_EV_IRQHandler+0x6e>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c68:	d003      	beq.n	8002c72 <HAL_I2C_EV_IRQHandler+0x62>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_EV_IRQHandler+0x66>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_I2C_EV_IRQHandler+0x68>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f000 8132 	beq.w	8002ee2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x92>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f002 f80e 	bl	8004cb6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fd87 	bl	80037ae <I2C_Master_SB>
 8002ca0:	e092      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fdfc 	bl	80038b8 <I2C_Master_ADD10>
 8002cc0:	e082      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	0a5b      	lsrs	r3, r3, #9
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fe15 	bl	800390a <I2C_Master_ADDR>
 8002ce0:	e072      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d03b      	beq.n	8002d66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cfc:	f000 80f3 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	09db      	lsrs	r3, r3, #7
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00f      	beq.n	8002d2c <HAL_I2C_EV_IRQHandler+0x11c>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	0a9b      	lsrs	r3, r3, #10
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_I2C_EV_IRQHandler+0x11c>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d103      	bne.n	8002d2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f9df 	bl	80030e8 <I2C_MasterTransmit_TXE>
 8002d2a:	e04d      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80d6 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	0a5b      	lsrs	r3, r3, #9
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80cf 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d48:	7bbb      	ldrb	r3, [r7, #14]
 8002d4a:	2b21      	cmp	r3, #33	@ 0x21
 8002d4c:	d103      	bne.n	8002d56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa66 	bl	8003220 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d54:	e0c7      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	f040 80c4 	bne.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fad4 	bl	800330c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d64:	e0bf      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d74:	f000 80b7 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00f      	beq.n	8002da4 <HAL_I2C_EV_IRQHandler+0x194>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_I2C_EV_IRQHandler+0x194>
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fb4d 	bl	800343c <I2C_MasterReceive_RXNE>
 8002da2:	e011      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 809a 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	0a5b      	lsrs	r3, r3, #9
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8093 	beq.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fc03 	bl	80035cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc6:	e08e      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dc8:	e08d      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e007      	b.n	8002dec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x20e>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ffce 	bl	8003db8 <I2C_Slave_ADDR>
 8002e1c:	e066      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_I2C_EV_IRQHandler+0x22e>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	0a5b      	lsrs	r3, r3, #9
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f001 f808 	bl	8003e4c <I2C_Slave_STOPF>
 8002e3c:	e056      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	2b21      	cmp	r3, #33	@ 0x21
 8002e42:	d002      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x23a>
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	2b29      	cmp	r3, #41	@ 0x29
 8002e48:	d125      	bne.n	8002e96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	09db      	lsrs	r3, r3, #7
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00f      	beq.n	8002e76 <HAL_I2C_EV_IRQHandler+0x266>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0a9b      	lsrs	r3, r3, #10
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_I2C_EV_IRQHandler+0x266>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fee6 	bl	8003c40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e74:	e039      	b.n	8002eea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d033      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x2da>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a5b      	lsrs	r3, r3, #9
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02d      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 ff13 	bl	8003cba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e94:	e029      	b.n	8002eea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00f      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	0a9b      	lsrs	r3, r3, #10
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 ff1d 	bl	8003cfa <I2C_SlaveReceive_RXNE>
 8002ec0:	e014      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	0a5b      	lsrs	r3, r3, #9
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 ff4b 	bl	8003d76 <I2C_SlaveReceive_BTF>
 8002ee0:	e004      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08a      	sub	sp, #40	@ 0x28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_I2C_ER_IRQHandler+0x5e>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f3e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	0a5b      	lsrs	r3, r3, #9
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_I2C_ER_IRQHandler+0x88>
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002f78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	0a9b      	lsrs	r3, r3, #10
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03f      	beq.n	8003006 <HAL_I2C_ER_IRQHandler+0x114>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d039      	beq.n	8003006 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002f92:	7efb      	ldrb	r3, [r7, #27]
 8002f94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002fac:	7ebb      	ldrb	r3, [r7, #26]
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d112      	bne.n	8002fd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b21      	cmp	r3, #33	@ 0x21
 8002fbc:	d008      	beq.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b29      	cmp	r3, #41	@ 0x29
 8002fc2:	d005      	beq.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xde>
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b28      	cmp	r3, #40	@ 0x28
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b21      	cmp	r3, #33	@ 0x21
 8002fce:	d103      	bne.n	8002fd8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 f86b 	bl	80040ac <I2C_Slave_AF>
 8002fd6:	e016      	b.n	8003006 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fe0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fea:	7efb      	ldrb	r3, [r7, #27]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d002      	beq.n	8002ff6 <HAL_I2C_ER_IRQHandler+0x104>
 8002ff0:	7efb      	ldrb	r3, [r7, #27]
 8002ff2:	2b40      	cmp	r3, #64	@ 0x40
 8002ff4:	d107      	bne.n	8003006 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003004:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	0adb      	lsrs	r3, r3, #11
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <HAL_I2C_ER_IRQHandler+0x13e>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800302e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 f8a6 	bl	8004194 <I2C_ITError>
  }
}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	@ 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
 8003080:	4613      	mov	r3, r2
 8003082:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d150      	bne.n	80031b0 <I2C_MasterTransmit_TXE+0xc8>
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b21      	cmp	r3, #33	@ 0x21
 8003112:	d14d      	bne.n	80031b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d01d      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b20      	cmp	r3, #32
 800311e:	d01a      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003126:	d016      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003136:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2211      	movs	r2, #17
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe f85e 	bl	8001210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003154:	e060      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003164:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003174:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d107      	bne.n	80031a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff81 	bl	80030a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800319e:	e03b      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fe f831 	bl	8001210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ae:	e033      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b21      	cmp	r3, #33	@ 0x21
 80031b4:	d005      	beq.n	80031c2 <I2C_MasterTransmit_TXE+0xda>
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d12d      	bne.n	8003218 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b22      	cmp	r3, #34	@ 0x22
 80031c0:	d12a      	bne.n	8003218 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031dc:	e01c      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d103      	bne.n	80031f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f88e 	bl	800330c <I2C_MemoryTransmit_TXE_BTF>
}
 80031f0:	e012      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003216:	e7ff      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b21      	cmp	r3, #33	@ 0x21
 8003238:	d164      	bne.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003268:	e04c      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d01d      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b20      	cmp	r3, #32
 8003274:	d01a      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800327c:	d016      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800328c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2211      	movs	r2, #17
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fd ffb3 	bl	8001210 <HAL_I2C_MasterTxCpltCallback>
}
 80032aa:	e02b      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d107      	bne.n	80032f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fed6 	bl	80030a0 <HAL_I2C_MemTxCpltCallback>
}
 80032f4:	e006      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd ff86 	bl	8001210 <HAL_I2C_MasterTxCpltCallback>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11d      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10b      	bne.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003342:	e077      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	b29b      	uxth	r3, r3
 800334a:	121b      	asrs	r3, r3, #8
 800334c:	b2da      	uxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800335e:	e069      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10b      	bne.n	8003380 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	b2da      	uxtb	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800337e:	e059      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	2b02      	cmp	r3, #2
 8003386:	d152      	bne.n	800342e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b22      	cmp	r3, #34	@ 0x22
 800338c:	d10d      	bne.n	80033aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033a8:	e044      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b21      	cmp	r3, #33	@ 0x21
 80033b8:	d112      	bne.n	80033e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033de:	e029      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d124      	bne.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b21      	cmp	r3, #33	@ 0x21
 80033ee:	d121      	bne.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fe3a 	bl	80030a0 <HAL_I2C_MemTxCpltCallback>
}
 800342c:	e002      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe ff28 	bl	8002284 <I2C_Flush_DR>
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b22      	cmp	r3, #34	@ 0x22
 800344e:	f040 80b9 	bne.w	80035c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d921      	bls.n	80034aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b03      	cmp	r3, #3
 8003494:	f040 8096 	bne.w	80035c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80034a8:	e08c      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d07f      	beq.n	80035b2 <I2C_MasterReceive_RXNE+0x176>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <I2C_MasterReceive_RXNE+0x82>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d179      	bne.n	80035b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 fb3c 	bl	8004b3c <I2C_WaitOnSTOPRequestThroughIT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d14c      	bne.n	8003564 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d10a      	bne.n	800353a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fdbd 	bl	80030b2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003538:	e044      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d002      	beq.n	800354e <I2C_MasterReceive_RXNE+0x112>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b20      	cmp	r3, #32
 800354c:	d103      	bne.n	8003556 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
 8003554:	e002      	b.n	800355c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2212      	movs	r2, #18
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd fe6b 	bl	8001238 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003562:	e02f      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003572:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fd8a 	bl	80030c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035b0:	e008      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c0:	605a      	str	r2, [r3, #4]
}
 80035c2:	e7ff      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d11b      	bne.n	800361c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800361a:	e0c4      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b03      	cmp	r3, #3
 8003624:	d129      	bne.n	800367a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003634:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d00a      	beq.n	8003652 <I2C_MasterReceive_BTF+0x86>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d007      	beq.n	8003652 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003650:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003678:	e095      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d17d      	bne.n	8003780 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d002      	beq.n	8003690 <I2C_MasterReceive_BTF+0xc4>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d108      	bne.n	80036a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e016      	b.n	80036d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d002      	beq.n	80036ae <I2C_MasterReceive_BTF+0xe2>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d108      	bne.n	80036c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e007      	b.n	80036d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800372a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d10a      	bne.n	8003756 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fcaf 	bl	80030b2 <HAL_I2C_MemRxCpltCallback>
}
 8003754:	e027      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d002      	beq.n	800376a <I2C_MasterReceive_BTF+0x19e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b20      	cmp	r3, #32
 8003768:	d103      	bne.n	8003772 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003770:	e002      	b.n	8003778 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2212      	movs	r2, #18
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd fd5d 	bl	8001238 <HAL_I2C_MasterRxCpltCallback>
}
 800377e:	e012      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d117      	bne.n	80037f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037dc:	e067      	b.n	80038ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]
}
 80037f0:	e05d      	b.n	80038ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037fa:	d133      	bne.n	8003864 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b21      	cmp	r3, #33	@ 0x21
 8003806:	d109      	bne.n	800381c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e008      	b.n	800382e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <I2C_Master_SB+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <I2C_Master_SB+0x100>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02d      	beq.n	80038ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	605a      	str	r2, [r3, #4]
}
 8003862:	e024      	b.n	80038ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10e      	bne.n	800388a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	b29b      	uxth	r3, r3
 8003872:	11db      	asrs	r3, r3, #7
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0306 	and.w	r3, r3, #6
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f063 030f 	orn	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
}
 8003888:	e011      	b.n	80038ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10d      	bne.n	80038ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	b29b      	uxth	r3, r3
 8003898:	11db      	asrs	r3, r3, #7
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0306 	and.w	r3, r3, #6
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f063 030e 	orn	r3, r3, #14
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <I2C_Master_ADD10+0x26>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <I2C_Master_ADD10+0x48>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fe:	605a      	str	r2, [r3, #4]
  }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800390a:	b480      	push	{r7}
 800390c:	b091      	sub	sp, #68	@ 0x44
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003918:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b22      	cmp	r3, #34	@ 0x22
 8003932:	f040 8174 	bne.w	8003c1e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <I2C_Master_ADDR+0x54>
 800393e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d10b      	bne.n	800395e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	e16b      	b.n	8003c36 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11d      	bne.n	80039a2 <I2C_Master_ADDR+0x98>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800396e:	d118      	bne.n	80039a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003970:	2300      	movs	r3, #0
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003994:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	651a      	str	r2, [r3, #80]	@ 0x50
 80039a0:	e149      	b.n	8003c36 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d113      	bne.n	80039d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e120      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 808a 	bne.w	8003af4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80039e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039e6:	d137      	bne.n	8003a58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a06:	d113      	bne.n	8003a30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	e0f2      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e0de      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d02e      	beq.n	8003abc <I2C_Master_ADDR+0x1b2>
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d02b      	beq.n	8003abc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d102      	bne.n	8003a70 <I2C_Master_ADDR+0x166>
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d125      	bne.n	8003abc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00e      	beq.n	8003a94 <I2C_Master_ADDR+0x18a>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00b      	beq.n	8003a94 <I2C_Master_ADDR+0x18a>
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d008      	beq.n	8003a94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e007      	b.n	8003aa4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	e0ac      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e090      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d158      	bne.n	8003bb0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d021      	beq.n	8003b48 <I2C_Master_ADDR+0x23e>
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d01e      	beq.n	8003b48 <I2C_Master_ADDR+0x23e>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d01b      	beq.n	8003b48 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e012      	b.n	8003b6e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7c:	d14b      	bne.n	8003c16 <I2C_Master_ADDR+0x30c>
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b84:	d00b      	beq.n	8003b9e <I2C_Master_ADDR+0x294>
 8003b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d008      	beq.n	8003b9e <I2C_Master_ADDR+0x294>
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d005      	beq.n	8003b9e <I2C_Master_ADDR+0x294>
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d002      	beq.n	8003b9e <I2C_Master_ADDR+0x294>
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d13b      	bne.n	8003c16 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e032      	b.n	8003c16 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bce:	d117      	bne.n	8003c00 <I2C_Master_ADDR+0x2f6>
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bd6:	d00b      	beq.n	8003bf0 <I2C_Master_ADDR+0x2e6>
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d008      	beq.n	8003bf0 <I2C_Master_ADDR+0x2e6>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d005      	beq.n	8003bf0 <I2C_Master_ADDR+0x2e6>
 8003be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d002      	beq.n	8003bf0 <I2C_Master_ADDR+0x2e6>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d107      	bne.n	8003c00 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bfe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c1c:	e00b      	b.n	8003c36 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
}
 8003c34:	e7ff      	b.n	8003c36 <I2C_Master_ADDR+0x32c>
 8003c36:	bf00      	nop
 8003c38:	3744      	adds	r7, #68	@ 0x44
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02b      	beq.n	8003cb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d114      	bne.n	8003cb2 <I2C_SlaveTransmit_TXE+0x72>
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b29      	cmp	r3, #41	@ 0x29
 8003c8c:	d111      	bne.n	8003cb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2221      	movs	r2, #33	@ 0x21
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2228      	movs	r2, #40	@ 0x28
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff f9cf 	bl	8003050 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d011      	beq.n	8003cf0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02c      	beq.n	8003d6e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d114      	bne.n	8003d6e <I2C_SlaveReceive_RXNE+0x74>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d48:	d111      	bne.n	8003d6e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2222      	movs	r2, #34	@ 0x22
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2228      	movs	r2, #40	@ 0x28
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff f97a 	bl	8003062 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dd2:	2b28      	cmp	r3, #40	@ 0x28
 8003dd4:	d127      	bne.n	8003e26 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	09db      	lsrs	r3, r3, #7
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	81bb      	strh	r3, [r7, #12]
 8003e08:	e002      	b.n	8003e10 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e18:	89ba      	ldrh	r2, [r7, #12]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff f928 	bl	8003074 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e24:	e00e      	b.n	8003e44 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea8:	d172      	bne.n	8003f90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b22      	cmp	r3, #34	@ 0x22
 8003eae:	d002      	beq.n	8003eb6 <I2C_Slave_STOPF+0x6a>
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb4:	d135      	bne.n	8003f22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f043 0204 	orr.w	r2, r3, #4
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd feda 	bl	8001ca8 <HAL_DMA_GetState>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d049      	beq.n	8003f8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	4a69      	ldr	r2, [pc, #420]	@ (80040a4 <I2C_Slave_STOPF+0x258>)
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd fe56 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03d      	beq.n	8003f8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f20:	e035      	b.n	8003f8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fea4 	bl	8001ca8 <HAL_DMA_GetState>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d014      	beq.n	8003f90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80040a4 <I2C_Slave_STOPF+0x258>)
 8003f6c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd fe20 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4798      	blx	r3
 8003f8c:	e000      	b.n	8003f90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03e      	beq.n	8004018 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d112      	bne.n	8003fce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d112      	bne.n	8004002 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8b7 	bl	8004194 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004026:	e039      	b.n	800409c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b2a      	cmp	r3, #42	@ 0x2a
 800402c:	d109      	bne.n	8004042 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2228      	movs	r2, #40	@ 0x28
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff f810 	bl	8003062 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b28      	cmp	r3, #40	@ 0x28
 800404c:	d111      	bne.n	8004072 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	@ (80040a8 <I2C_Slave_STOPF+0x25c>)
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff f80f 	bl	800308e <HAL_I2C_ListenCpltCallback>
}
 8004070:	e014      	b.n	800409c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	2b22      	cmp	r3, #34	@ 0x22
 8004078:	d002      	beq.n	8004080 <I2C_Slave_STOPF+0x234>
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b22      	cmp	r3, #34	@ 0x22
 800407e:	d10d      	bne.n	800409c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe ffe3 	bl	8003062 <HAL_I2C_SlaveRxCpltCallback>
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	08004699 	.word	0x08004699
 80040a8:	ffff0000 	.word	0xffff0000

080040ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d002      	beq.n	80040ce <I2C_Slave_AF+0x22>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d129      	bne.n	8004122 <I2C_Slave_AF+0x76>
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b28      	cmp	r3, #40	@ 0x28
 80040d2:	d126      	bne.n	8004122 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004190 <I2C_Slave_AF+0xe4>)
 80040d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe ffb7 	bl	800308e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004120:	e031      	b.n	8004186 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b21      	cmp	r3, #33	@ 0x21
 8004126:	d129      	bne.n	800417c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a19      	ldr	r2, [pc, #100]	@ (8004190 <I2C_Slave_AF+0xe4>)
 800412c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2221      	movs	r2, #33	@ 0x21
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004152:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800415c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fe f888 	bl	8002284 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fe ff6b 	bl	8003050 <HAL_I2C_SlaveTxCpltCallback>
}
 800417a:	e004      	b.n	8004186 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004184:	615a      	str	r2, [r3, #20]
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	ffff0000 	.word	0xffff0000

08004194 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d002      	beq.n	80041b8 <I2C_ITError+0x24>
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	2b40      	cmp	r3, #64	@ 0x40
 80041b6:	d10a      	bne.n	80041ce <I2C_ITError+0x3a>
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b22      	cmp	r3, #34	@ 0x22
 80041bc:	d107      	bne.n	80041ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041d4:	2b28      	cmp	r3, #40	@ 0x28
 80041d6:	d107      	bne.n	80041e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2228      	movs	r2, #40	@ 0x28
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041e6:	e015      	b.n	8004214 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f6:	d00a      	beq.n	800420e <I2C_ITError+0x7a>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b60      	cmp	r3, #96	@ 0x60
 80041fc:	d007      	beq.n	800420e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004222:	d162      	bne.n	80042ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004232:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004238:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d020      	beq.n	8004284 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <I2C_ITError+0x25c>)
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fcb2 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8089 	beq.w	800436e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800427e:	4610      	mov	r0, r2
 8004280:	4798      	blx	r3
 8004282:	e074      	b.n	800436e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	4a59      	ldr	r2, [pc, #356]	@ (80043f0 <I2C_ITError+0x25c>)
 800428a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd fc91 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d068      	beq.n	800436e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d10b      	bne.n	80042c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042e4:	4610      	mov	r0, r2
 80042e6:	4798      	blx	r3
 80042e8:	e041      	b.n	800436e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b60      	cmp	r3, #96	@ 0x60
 80042f4:	d125      	bne.n	8004342 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d10b      	bne.n	800432a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fe fecb 	bl	80030d6 <HAL_I2C_AbortCpltCallback>
 8004340:	e015      	b.n	800436e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d10b      	bne.n	8004368 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fe feab 	bl	80030c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d113      	bne.n	80043e8 <I2C_ITError+0x254>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b28      	cmp	r3, #40	@ 0x28
 80043c4:	d110      	bne.n	80043e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <I2C_ITError+0x260>)
 80043ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe fe53 	bl	800308e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	08004699 	.word	0x08004699
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	460b      	mov	r3, r1
 8004406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d006      	beq.n	8004422 <I2C_MasterRequestWrite+0x2a>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d003      	beq.n	8004422 <I2C_MasterRequestWrite+0x2a>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004420:	d108      	bne.n	8004434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e00b      	b.n	800444c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	2b12      	cmp	r3, #18
 800443a:	d107      	bne.n	800444c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f9c5 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	d103      	bne.n	800447c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e035      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004488:	d108      	bne.n	800449c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004498:	611a      	str	r2, [r3, #16]
 800449a:	e01b      	b.n	80044d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	11db      	asrs	r3, r3, #7
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0306 	and.w	r3, r3, #6
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f063 030f 	orn	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	490e      	ldr	r1, [pc, #56]	@ (80044f4 <I2C_MasterRequestWrite+0xfc>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa0e 	bl	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e010      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4907      	ldr	r1, [pc, #28]	@ (80044f8 <I2C_MasterRequestWrite+0x100>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f9fe 	bl	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00010008 	.word	0x00010008
 80044f8:	00010002 	.word	0x00010002

080044fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004520:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d006      	beq.n	8004536 <I2C_MasterRequestRead+0x3a>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d003      	beq.n	8004536 <I2C_MasterRequestRead+0x3a>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004534:	d108      	bne.n	8004548 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e00b      	b.n	8004560 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	2b11      	cmp	r3, #17
 800454e:	d107      	bne.n	8004560 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f93b 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004586:	d103      	bne.n	8004590 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e079      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800459c:	d108      	bne.n	80045b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	e05f      	b.n	8004670 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	11db      	asrs	r3, r3, #7
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f063 030f 	orn	r3, r3, #15
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4930      	ldr	r1, [pc, #192]	@ (8004690 <I2C_MasterRequestRead+0x194>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f984 	bl	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e054      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4929      	ldr	r1, [pc, #164]	@ (8004694 <I2C_MasterRequestRead+0x198>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f974 	bl	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e044      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004622:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f8d9 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464a:	d103      	bne.n	8004654 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e017      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	11db      	asrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f063 030e 	orn	r3, r3, #14
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4907      	ldr	r1, [pc, #28]	@ (8004694 <I2C_MasterRequestRead+0x198>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f930 	bl	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	00010008 	.word	0x00010008
 8004694:	00010002 	.word	0x00010002

08004698 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046b2:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <I2C_DMAAbort+0x148>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	08db      	lsrs	r3, r3, #3
 80046b8:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <I2C_DMAAbort+0x14c>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0a1a      	lsrs	r2, r3, #8
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00da      	lsls	r2, r3, #3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80046de:	e00a      	b.n	80046f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f4:	d0ea      	beq.n	80046cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004724:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004738:	2200      	movs	r2, #0
 800473a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b60      	cmp	r3, #96	@ 0x60
 8004766:	d10e      	bne.n	8004786 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800477e:	6978      	ldr	r0, [r7, #20]
 8004780:	f7fe fca9 	bl	80030d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004784:	e027      	b.n	80047d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800478c:	2b28      	cmp	r3, #40	@ 0x28
 800478e:	d117      	bne.n	80047c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2228      	movs	r2, #40	@ 0x28
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047be:	e007      	b.n	80047d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047d0:	6978      	ldr	r0, [r7, #20]
 80047d2:	f7fe fc77 	bl	80030c4 <HAL_I2C_ErrorCallback>
}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000008 	.word	0x20000008
 80047e4:	14f8b589 	.word	0x14f8b589

080047e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f8:	e048      	b.n	800488c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d044      	beq.n	800488c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fd f89d 	bl	8001940 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d139      	bne.n	800488c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10d      	bne.n	800483e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	43da      	mvns	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	e00c      	b.n	8004858 <I2C_WaitOnFlagUntilTimeout+0x70>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	429a      	cmp	r2, r3
 800485c:	d116      	bne.n	800488c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e023      	b.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10d      	bne.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	43da      	mvns	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	e00c      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d093      	beq.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ea:	e071      	b.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fa:	d123      	bne.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f043 0204 	orr.w	r2, r3, #4
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e067      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d041      	beq.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494c:	f7fc fff8 	bl	8001940 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d136      	bne.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10c      	bne.n	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e00b      	b.n	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	43da      	mvns	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e021      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10c      	bne.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e00b      	b.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f af6d 	bne.w	80048ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a28:	e034      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f915 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e034      	b.n	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d028      	beq.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fc ff7d 	bl	8001940 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b80      	cmp	r3, #128	@ 0x80
 8004a64:	d016      	beq.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b80      	cmp	r3, #128	@ 0x80
 8004aa0:	d1c3      	bne.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab8:	e034      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8cd 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e034      	b.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d028      	beq.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fc ff35 	bl	8001940 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11d      	bne.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d016      	beq.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d1c3      	bne.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	0a1a      	lsrs	r2, r3, #8
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e008      	b.n	8004b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b88:	d0e9      	beq.n	8004b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000008 	.word	0x20000008
 8004b9c:	14f8b589 	.word	0x14f8b589

08004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bac:	e049      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d119      	bne.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e030      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fc fea6 	bl	8001940 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d016      	beq.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e007      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	d1ae      	bne.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d11b      	bne.n	8004caa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004cc6:	d103      	bne.n	8004cd0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cce:	e007      	b.n	8004ce0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004cd8:	d102      	bne.n	8004ce0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e272      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8087 	beq.w	8004e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d0c:	4b92      	ldr	r3, [pc, #584]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d00c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d18:	4b8f      	ldr	r3, [pc, #572]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d112      	bne.n	8004d4a <HAL_RCC_OscConfig+0x5e>
 8004d24:	4b8c      	ldr	r3, [pc, #560]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d10b      	bne.n	8004d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d32:	4b89      	ldr	r3, [pc, #548]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d06c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x12c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d168      	bne.n	8004e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e24c      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_OscConfig+0x76>
 8004d54:	4b80      	ldr	r3, [pc, #512]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7f      	ldr	r2, [pc, #508]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e02e      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x98>
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b78      	ldr	r3, [pc, #480]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a77      	ldr	r2, [pc, #476]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0xbc>
 8004d8e:	4b72      	ldr	r3, [pc, #456]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a71      	ldr	r2, [pc, #452]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004da8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6a      	ldr	r2, [pc, #424]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b68      	ldr	r3, [pc, #416]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a67      	ldr	r2, [pc, #412]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fc fdba 	bl	8001940 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fc fdb6 	bl	8001940 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e200      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xe4>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fc fda6 	bl	8001940 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fc fda2 	bl	8001940 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	@ 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1ec      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b53      	ldr	r3, [pc, #332]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x10c>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e26:	4b4c      	ldr	r3, [pc, #304]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e32:	4b49      	ldr	r3, [pc, #292]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x18c>
 8004e3e:	4b46      	ldr	r3, [pc, #280]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b43      	ldr	r3, [pc, #268]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x176>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c0      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b3d      	ldr	r3, [pc, #244]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4939      	ldr	r1, [pc, #228]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b36      	ldr	r3, [pc, #216]	@ (8004f5c <HAL_RCC_OscConfig+0x270>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fc fd5b 	bl	8001940 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fd57 	bl	8001940 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1a1      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4927      	ldr	r1, [pc, #156]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <HAL_RCC_OscConfig+0x270>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fd3a 	bl	8001940 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fd36 	bl	8001940 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e180      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03a      	beq.n	8004f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d019      	beq.n	8004f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b17      	ldr	r3, [pc, #92]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fc fd1a 	bl	8001940 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fc fd16 	bl	8001940 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e160      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f000 face 	bl	80054d0 <RCC_Delay>
 8004f34:	e01c      	b.n	8004f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f36:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fc fd00 	bl	8001940 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f42:	e00f      	b.n	8004f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f44:	f7fc fcfc 	bl	8001940 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d908      	bls.n	8004f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e146      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	42420000 	.word	0x42420000
 8004f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	4b92      	ldr	r3, [pc, #584]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e9      	bne.n	8004f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80a6 	beq.w	80050ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f82:	4b8b      	ldr	r3, [pc, #556]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	4b88      	ldr	r3, [pc, #544]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4a87      	ldr	r2, [pc, #540]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	61d3      	str	r3, [r2, #28]
 8004f9a:	4b85      	ldr	r3, [pc, #532]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b82      	ldr	r3, [pc, #520]	@ (80051b4 <HAL_RCC_OscConfig+0x4c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d118      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80051b4 <HAL_RCC_OscConfig+0x4c8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7e      	ldr	r2, [pc, #504]	@ (80051b4 <HAL_RCC_OscConfig+0x4c8>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fc fcbd 	bl	8001940 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fc fcb9 	bl	8001940 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	@ 0x64
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e103      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b75      	ldr	r3, [pc, #468]	@ (80051b4 <HAL_RCC_OscConfig+0x4c8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x312>
 8004ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6213      	str	r3, [r2, #32]
 8004ffc:	e02d      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x334>
 8005006:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4a69      	ldr	r2, [pc, #420]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6213      	str	r3, [r2, #32]
 8005012:	4b67      	ldr	r3, [pc, #412]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a66      	ldr	r2, [pc, #408]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	e01c      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d10c      	bne.n	8005042 <HAL_RCC_OscConfig+0x356>
 8005028:	4b61      	ldr	r3, [pc, #388]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	4a60      	ldr	r2, [pc, #384]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800502e:	f043 0304 	orr.w	r3, r3, #4
 8005032:	6213      	str	r3, [r2, #32]
 8005034:	4b5e      	ldr	r3, [pc, #376]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4a5d      	ldr	r2, [pc, #372]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6213      	str	r3, [r2, #32]
 8005040:	e00b      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8005042:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a5a      	ldr	r2, [pc, #360]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a57      	ldr	r2, [pc, #348]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fc fc6d 	bl	8001940 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fc fc69 	bl	8001940 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0b1      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	4b4b      	ldr	r3, [pc, #300]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ee      	beq.n	800506a <HAL_RCC_OscConfig+0x37e>
 800508c:	e014      	b.n	80050b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508e:	f7fc fc57 	bl	8001940 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fc fc53 	bl	8001940 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e09b      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ac:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ee      	bne.n	8005096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050be:	4b3c      	ldr	r3, [pc, #240]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4a3b      	ldr	r2, [pc, #236]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8087 	beq.w	80051e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d4:	4b36      	ldr	r3, [pc, #216]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d061      	beq.n	80051a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d146      	bne.n	8005176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fc fc27 	bl	8001940 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fc fc23 	bl	8001940 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e06d      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005108:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d108      	bne.n	8005130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800511e:	4b24      	ldr	r3, [pc, #144]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4921      	ldr	r1, [pc, #132]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005130:	4b1f      	ldr	r3, [pc, #124]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a19      	ldr	r1, [r3, #32]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	430b      	orrs	r3, r1
 8005142:	491b      	ldr	r1, [pc, #108]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fc fbf7 	bl	8001940 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fc fbf3 	bl	8001940 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e03d      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x46a>
 8005174:	e035      	b.n	80051e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fc fbe0 	bl	8001940 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fc fbdc 	bl	8001940 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e026      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x498>
 80051a2:	e01e      	b.n	80051e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e019      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40007000 	.word	0x40007000
 80051b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051bc:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <HAL_RCC_OscConfig+0x500>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d106      	bne.n	80051de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d001      	beq.n	80051e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000

080051f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0d0      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005204:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d910      	bls.n	8005234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b67      	ldr	r3, [pc, #412]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0207 	bic.w	r2, r3, #7
 800521a:	4965      	ldr	r1, [pc, #404]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b63      	ldr	r3, [pc, #396]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0b8      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800524c:	4b59      	ldr	r3, [pc, #356]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a58      	ldr	r2, [pc, #352]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005264:	4b53      	ldr	r3, [pc, #332]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a52      	ldr	r2, [pc, #328]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800526e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005270:	4b50      	ldr	r3, [pc, #320]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	494d      	ldr	r1, [pc, #308]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d040      	beq.n	8005310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	4b47      	ldr	r3, [pc, #284]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d115      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e07f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ae:	4b41      	ldr	r3, [pc, #260]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e073      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052be:	4b3d      	ldr	r3, [pc, #244]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06b      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f023 0203 	bic.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4936      	ldr	r1, [pc, #216]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e0:	f7fc fb2e 	bl	8001940 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e8:	f7fc fb2a 	bl	8001940 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e053      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 020c 	and.w	r2, r3, #12
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	429a      	cmp	r2, r3
 800530e:	d1eb      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005310:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d210      	bcs.n	8005340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 0207 	bic.w	r2, r3, #7
 8005326:	4922      	ldr	r1, [pc, #136]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b20      	ldr	r3, [pc, #128]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e032      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534c:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4916      	ldr	r1, [pc, #88]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800536a:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	490e      	ldr	r1, [pc, #56]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800537e:	f000 f821 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 8005382:	4602      	mov	r2, r0
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	490a      	ldr	r1, [pc, #40]	@ (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005390:	5ccb      	ldrb	r3, [r1, r3]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <HAL_RCC_ClockConfig+0x1cc>)
 8005398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800539a:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <HAL_RCC_ClockConfig+0x1d0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fc fa8c 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800a048 	.word	0x0800a048
 80053bc:	20000008 	.word	0x20000008
 80053c0:	2000000c 	.word	0x2000000c

080053c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053de:	4b1e      	ldr	r3, [pc, #120]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x94>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d002      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x30>
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0x36>
 80053f2:	e027      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f4:	4b19      	ldr	r3, [pc, #100]	@ (800545c <HAL_RCC_GetSysClockFreq+0x98>)
 80053f6:	613b      	str	r3, [r7, #16]
      break;
 80053f8:	e027      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	0c9b      	lsrs	r3, r3, #18
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005404:	5cd3      	ldrb	r3, [r2, r3]
 8005406:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d010      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x94>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	0c5b      	lsrs	r3, r3, #17
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a0d      	ldr	r2, [pc, #52]	@ (800545c <HAL_RCC_GetSysClockFreq+0x98>)
 8005426:	fb03 f202 	mul.w	r2, r3, r2
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e004      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0c      	ldr	r2, [pc, #48]	@ (8005468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	613b      	str	r3, [r7, #16]
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005444:	4b05      	ldr	r3, [pc, #20]	@ (800545c <HAL_RCC_GetSysClockFreq+0x98>)
 8005446:	613b      	str	r3, [r7, #16]
      break;
 8005448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544a:	693b      	ldr	r3, [r7, #16]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
 800545c:	007a1200 	.word	0x007a1200
 8005460:	0800a060 	.word	0x0800a060
 8005464:	0800a070 	.word	0x0800a070
 8005468:	003d0900 	.word	0x003d0900

0800546c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b02      	ldr	r3, [pc, #8]	@ (800547c <HAL_RCC_GetHCLKFreq+0x10>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	20000008 	.word	0x20000008

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005484:	f7ff fff2 	bl	800546c <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800a058 	.word	0x0800a058

080054a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054ac:	f7ff ffde 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	0adb      	lsrs	r3, r3, #11
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4903      	ldr	r1, [pc, #12]	@ (80054cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	0800a058 	.word	0x0800a058

080054d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <RCC_Delay+0x34>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005508 <RCC_Delay+0x38>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0a5b      	lsrs	r3, r3, #9
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054ec:	bf00      	nop
  }
  while (Delay --);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	60fa      	str	r2, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f9      	bne.n	80054ec <RCC_Delay+0x1c>
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	20000008 	.word	0x20000008
 8005508:	10624dd3 	.word	0x10624dd3

0800550c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e042      	b.n	80055a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc f93c 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	@ 0x24
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f971 	bl	8005838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695a      	ldr	r2, [r3, #20]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d175      	bne.n	80056b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Transmit+0x2c>
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e06e      	b.n	80056ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2221      	movs	r2, #33	@ 0x21
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ea:	f7fc f9a9 	bl	8001940 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005604:	d108      	bne.n	8005618 <HAL_UART_Transmit+0x6c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e003      	b.n	8005620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005620:	e02e      	b.n	8005680 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2200      	movs	r2, #0
 800562a:	2180      	movs	r1, #128	@ 0x80
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f848 	bl	80056c2 <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e03a      	b.n	80056ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e007      	b.n	8005672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1cb      	bne.n	8005622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2140      	movs	r1, #64	@ 0x40
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f814 	bl	80056c2 <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e006      	b.n	80056ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	4613      	mov	r3, r2
 80056d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	e03b      	b.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d037      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056dc:	f7fc f930 	bl	8001940 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	6a3a      	ldr	r2, [r7, #32]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e03a      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d023      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b80      	cmp	r3, #128	@ 0x80
 8005708:	d020      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d01d      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	d116      	bne.n	800574c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f81d 	bl	8005774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2208      	movs	r2, #8
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e00f      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	429a      	cmp	r2, r3
 8005768:	d0b4      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b095      	sub	sp, #84	@ 0x54
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800579c:	643a      	str	r2, [r7, #64]	@ 0x40
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e5      	bne.n	800577c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d119      	bne.n	8005820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0310 	bic.w	r3, r3, #16
 8005802:	647b      	str	r3, [r7, #68]	@ 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580c:	61ba      	str	r2, [r7, #24]
 800580e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	613b      	str	r3, [r7, #16]
   return(result);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800582e:	bf00      	nop
 8005830:	3754      	adds	r7, #84	@ 0x54
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005872:	f023 030c 	bic.w	r3, r3, #12
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	430b      	orrs	r3, r1
 800587e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2c      	ldr	r2, [pc, #176]	@ (800594c <UART_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058a0:	f7ff fe02 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	e002      	b.n	80058ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7ff fdea 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 80058ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009a      	lsls	r2, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	4a22      	ldr	r2, [pc, #136]	@ (8005950 <UART_SetConfig+0x118>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	0119      	lsls	r1, r3, #4
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009a      	lsls	r2, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <UART_SetConfig+0x118>)
 80058e6:	fba3 0302 	umull	r0, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	2064      	movs	r0, #100	@ 0x64
 80058ee:	fb00 f303 	mul.w	r3, r0, r3
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	3332      	adds	r3, #50	@ 0x32
 80058f8:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <UART_SetConfig+0x118>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005904:	4419      	add	r1, r3
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009a      	lsls	r2, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	fbb2 f2f3 	udiv	r2, r2, r3
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <UART_SetConfig+0x118>)
 800591e:	fba3 0302 	umull	r0, r3, r3, r2
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	2064      	movs	r0, #100	@ 0x64
 8005926:	fb00 f303 	mul.w	r3, r0, r3
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	3332      	adds	r3, #50	@ 0x32
 8005930:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <UART_SetConfig+0x118>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	440a      	add	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40013800 	.word	0x40013800
 8005950:	51eb851f 	.word	0x51eb851f

08005954 <__cvt>:
 8005954:	2b00      	cmp	r3, #0
 8005956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595a:	461d      	mov	r5, r3
 800595c:	bfbb      	ittet	lt
 800595e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005962:	461d      	movlt	r5, r3
 8005964:	2300      	movge	r3, #0
 8005966:	232d      	movlt	r3, #45	@ 0x2d
 8005968:	b088      	sub	sp, #32
 800596a:	4614      	mov	r4, r2
 800596c:	bfb8      	it	lt
 800596e:	4614      	movlt	r4, r2
 8005970:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005972:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005974:	7013      	strb	r3, [r2, #0]
 8005976:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005978:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800597c:	f023 0820 	bic.w	r8, r3, #32
 8005980:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005984:	d005      	beq.n	8005992 <__cvt+0x3e>
 8005986:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800598a:	d100      	bne.n	800598e <__cvt+0x3a>
 800598c:	3601      	adds	r6, #1
 800598e:	2302      	movs	r3, #2
 8005990:	e000      	b.n	8005994 <__cvt+0x40>
 8005992:	2303      	movs	r3, #3
 8005994:	aa07      	add	r2, sp, #28
 8005996:	9204      	str	r2, [sp, #16]
 8005998:	aa06      	add	r2, sp, #24
 800599a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800599e:	e9cd 3600 	strd	r3, r6, [sp]
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f001 f87b 	bl	8006aa0 <_dtoa_r>
 80059aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059ae:	4607      	mov	r7, r0
 80059b0:	d119      	bne.n	80059e6 <__cvt+0x92>
 80059b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059b4:	07db      	lsls	r3, r3, #31
 80059b6:	d50e      	bpl.n	80059d6 <__cvt+0x82>
 80059b8:	eb00 0906 	add.w	r9, r0, r6
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	4620      	mov	r0, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7fa fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80059c8:	b108      	cbz	r0, 80059ce <__cvt+0x7a>
 80059ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ce:	2230      	movs	r2, #48	@ 0x30
 80059d0:	9b07      	ldr	r3, [sp, #28]
 80059d2:	454b      	cmp	r3, r9
 80059d4:	d31e      	bcc.n	8005a14 <__cvt+0xc0>
 80059d6:	4638      	mov	r0, r7
 80059d8:	9b07      	ldr	r3, [sp, #28]
 80059da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059dc:	1bdb      	subs	r3, r3, r7
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	b008      	add	sp, #32
 80059e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059ea:	eb00 0906 	add.w	r9, r0, r6
 80059ee:	d1e5      	bne.n	80059bc <__cvt+0x68>
 80059f0:	7803      	ldrb	r3, [r0, #0]
 80059f2:	2b30      	cmp	r3, #48	@ 0x30
 80059f4:	d10a      	bne.n	8005a0c <__cvt+0xb8>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fa ffd3 	bl	80009a8 <__aeabi_dcmpeq>
 8005a02:	b918      	cbnz	r0, 8005a0c <__cvt+0xb8>
 8005a04:	f1c6 0601 	rsb	r6, r6, #1
 8005a08:	f8ca 6000 	str.w	r6, [sl]
 8005a0c:	f8da 3000 	ldr.w	r3, [sl]
 8005a10:	4499      	add	r9, r3
 8005a12:	e7d3      	b.n	80059bc <__cvt+0x68>
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	9107      	str	r1, [sp, #28]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e7d9      	b.n	80059d0 <__cvt+0x7c>

08005a1c <__exponent>:
 8005a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	bfb6      	itet	lt
 8005a22:	232d      	movlt	r3, #45	@ 0x2d
 8005a24:	232b      	movge	r3, #43	@ 0x2b
 8005a26:	4249      	neglt	r1, r1
 8005a28:	2909      	cmp	r1, #9
 8005a2a:	7002      	strb	r2, [r0, #0]
 8005a2c:	7043      	strb	r3, [r0, #1]
 8005a2e:	dd29      	ble.n	8005a84 <__exponent+0x68>
 8005a30:	f10d 0307 	add.w	r3, sp, #7
 8005a34:	461d      	mov	r5, r3
 8005a36:	270a      	movs	r7, #10
 8005a38:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	fb07 1416 	mls	r4, r7, r6, r1
 8005a42:	3430      	adds	r4, #48	@ 0x30
 8005a44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a48:	460c      	mov	r4, r1
 8005a4a:	2c63      	cmp	r4, #99	@ 0x63
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a52:	dcf1      	bgt.n	8005a38 <__exponent+0x1c>
 8005a54:	3130      	adds	r1, #48	@ 0x30
 8005a56:	1e94      	subs	r4, r2, #2
 8005a58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	1c41      	adds	r1, r0, #1
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	d30a      	bcc.n	8005a7a <__exponent+0x5e>
 8005a64:	f10d 0309 	add.w	r3, sp, #9
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	42ac      	cmp	r4, r5
 8005a6c:	bf88      	it	hi
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	3302      	adds	r3, #2
 8005a72:	4403      	add	r3, r0
 8005a74:	1a18      	subs	r0, r3, r0
 8005a76:	b003      	add	sp, #12
 8005a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a82:	e7ed      	b.n	8005a60 <__exponent+0x44>
 8005a84:	2330      	movs	r3, #48	@ 0x30
 8005a86:	3130      	adds	r1, #48	@ 0x30
 8005a88:	7083      	strb	r3, [r0, #2]
 8005a8a:	70c1      	strb	r1, [r0, #3]
 8005a8c:	1d03      	adds	r3, r0, #4
 8005a8e:	e7f1      	b.n	8005a74 <__exponent+0x58>

08005a90 <_printf_float>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	b091      	sub	sp, #68	@ 0x44
 8005a96:	460c      	mov	r4, r1
 8005a98:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f000 feeb 	bl	800687c <_localeconv_r>
 8005aa6:	6803      	ldr	r3, [r0, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	9308      	str	r3, [sp, #32]
 8005aac:	f7fa fb50 	bl	8000150 <strlen>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005aba:	3307      	adds	r3, #7
 8005abc:	f023 0307 	bic.w	r3, r3, #7
 8005ac0:	f103 0208 	add.w	r2, r3, #8
 8005ac4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ac8:	f8d4 b000 	ldr.w	fp, [r4]
 8005acc:	f8c8 2000 	str.w	r2, [r8]
 8005ad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ad4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ada:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ae6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aea:	4b9c      	ldr	r3, [pc, #624]	@ (8005d5c <_printf_float+0x2cc>)
 8005aec:	f7fa ff8e 	bl	8000a0c <__aeabi_dcmpun>
 8005af0:	bb70      	cbnz	r0, 8005b50 <_printf_float+0xc0>
 8005af2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	4b98      	ldr	r3, [pc, #608]	@ (8005d5c <_printf_float+0x2cc>)
 8005afc:	f7fa ff68 	bl	80009d0 <__aeabi_dcmple>
 8005b00:	bb30      	cbnz	r0, 8005b50 <_printf_float+0xc0>
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa ff57 	bl	80009bc <__aeabi_dcmplt>
 8005b0e:	b110      	cbz	r0, 8005b16 <_printf_float+0x86>
 8005b10:	232d      	movs	r3, #45	@ 0x2d
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b16:	4a92      	ldr	r2, [pc, #584]	@ (8005d60 <_printf_float+0x2d0>)
 8005b18:	4b92      	ldr	r3, [pc, #584]	@ (8005d64 <_printf_float+0x2d4>)
 8005b1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b1e:	bf8c      	ite	hi
 8005b20:	4690      	movhi	r8, r2
 8005b22:	4698      	movls	r8, r3
 8005b24:	2303      	movs	r3, #3
 8005b26:	f04f 0900 	mov.w	r9, #0
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	f02b 0304 	bic.w	r3, fp, #4
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	4633      	mov	r3, r6
 8005b34:	4621      	mov	r1, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	9700      	str	r7, [sp, #0]
 8005b3a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b3c:	f000 f9d4 	bl	8005ee8 <_printf_common>
 8005b40:	3001      	adds	r0, #1
 8005b42:	f040 8090 	bne.w	8005c66 <_printf_float+0x1d6>
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4a:	b011      	add	sp, #68	@ 0x44
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fa ff58 	bl	8000a0c <__aeabi_dcmpun>
 8005b5c:	b148      	cbz	r0, 8005b72 <_printf_float+0xe2>
 8005b5e:	464b      	mov	r3, r9
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfb8      	it	lt
 8005b64:	232d      	movlt	r3, #45	@ 0x2d
 8005b66:	4a80      	ldr	r2, [pc, #512]	@ (8005d68 <_printf_float+0x2d8>)
 8005b68:	bfb8      	it	lt
 8005b6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d6c <_printf_float+0x2dc>)
 8005b70:	e7d3      	b.n	8005b1a <_printf_float+0x8a>
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	d13f      	bne.n	8005bfc <_printf_float+0x16c>
 8005b7c:	2306      	movs	r3, #6
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	9206      	str	r2, [sp, #24]
 8005b8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b8c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b90:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b92:	9203      	str	r2, [sp, #12]
 8005b94:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005b98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ba8:	f7ff fed4 	bl	8005954 <__cvt>
 8005bac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bae:	4680      	mov	r8, r0
 8005bb0:	2947      	cmp	r1, #71	@ 0x47
 8005bb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005bb4:	d128      	bne.n	8005c08 <_printf_float+0x178>
 8005bb6:	1cc8      	adds	r0, r1, #3
 8005bb8:	db02      	blt.n	8005bc0 <_printf_float+0x130>
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	dd40      	ble.n	8005c42 <_printf_float+0x1b2>
 8005bc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bc4:	fa5f fa8a 	uxtb.w	sl, sl
 8005bc8:	4652      	mov	r2, sl
 8005bca:	3901      	subs	r1, #1
 8005bcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bd0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bd2:	f7ff ff23 	bl	8005a1c <__exponent>
 8005bd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bd8:	4681      	mov	r9, r0
 8005bda:	1813      	adds	r3, r2, r0
 8005bdc:	2a01      	cmp	r2, #1
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	dc02      	bgt.n	8005be8 <_printf_float+0x158>
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	07d2      	lsls	r2, r2, #31
 8005be6:	d501      	bpl.n	8005bec <_printf_float+0x15c>
 8005be8:	3301      	adds	r3, #1
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d09e      	beq.n	8005b32 <_printf_float+0xa2>
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfa:	e79a      	b.n	8005b32 <_printf_float+0xa2>
 8005bfc:	2947      	cmp	r1, #71	@ 0x47
 8005bfe:	d1bf      	bne.n	8005b80 <_printf_float+0xf0>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1bd      	bne.n	8005b80 <_printf_float+0xf0>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e7ba      	b.n	8005b7e <_printf_float+0xee>
 8005c08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c0c:	d9dc      	bls.n	8005bc8 <_printf_float+0x138>
 8005c0e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c12:	d118      	bne.n	8005c46 <_printf_float+0x1b6>
 8005c14:	2900      	cmp	r1, #0
 8005c16:	6863      	ldr	r3, [r4, #4]
 8005c18:	dd0b      	ble.n	8005c32 <_printf_float+0x1a2>
 8005c1a:	6121      	str	r1, [r4, #16]
 8005c1c:	b913      	cbnz	r3, 8005c24 <_printf_float+0x194>
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	07d0      	lsls	r0, r2, #31
 8005c22:	d502      	bpl.n	8005c2a <_printf_float+0x19a>
 8005c24:	3301      	adds	r3, #1
 8005c26:	440b      	add	r3, r1
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	f04f 0900 	mov.w	r9, #0
 8005c2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c30:	e7dc      	b.n	8005bec <_printf_float+0x15c>
 8005c32:	b913      	cbnz	r3, 8005c3a <_printf_float+0x1aa>
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	07d2      	lsls	r2, r2, #31
 8005c38:	d501      	bpl.n	8005c3e <_printf_float+0x1ae>
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	e7f4      	b.n	8005c28 <_printf_float+0x198>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7f2      	b.n	8005c28 <_printf_float+0x198>
 8005c42:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	db05      	blt.n	8005c58 <_printf_float+0x1c8>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	6121      	str	r1, [r4, #16]
 8005c50:	07d8      	lsls	r0, r3, #31
 8005c52:	d5ea      	bpl.n	8005c2a <_printf_float+0x19a>
 8005c54:	1c4b      	adds	r3, r1, #1
 8005c56:	e7e7      	b.n	8005c28 <_printf_float+0x198>
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	bfcc      	ite	gt
 8005c5c:	2201      	movgt	r2, #1
 8005c5e:	f1c1 0202 	rsble	r2, r1, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	e7e0      	b.n	8005c28 <_printf_float+0x198>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	055a      	lsls	r2, r3, #21
 8005c6a:	d407      	bmi.n	8005c7c <_printf_float+0x1ec>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	4642      	mov	r2, r8
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	d12b      	bne.n	8005cd2 <_printf_float+0x242>
 8005c7a:	e764      	b.n	8005b46 <_printf_float+0xb6>
 8005c7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c80:	f240 80dc 	bls.w	8005e3c <_printf_float+0x3ac>
 8005c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f7fa fe8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d033      	beq.n	8005cfc <_printf_float+0x26c>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	4a35      	ldr	r2, [pc, #212]	@ (8005d70 <_printf_float+0x2e0>)
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f43f af51 	beq.w	8005b46 <_printf_float+0xb6>
 8005ca4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005ca8:	4543      	cmp	r3, r8
 8005caa:	db02      	blt.n	8005cb2 <_printf_float+0x222>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07d8      	lsls	r0, r3, #31
 8005cb0:	d50f      	bpl.n	8005cd2 <_printf_float+0x242>
 8005cb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f43f af42 	beq.w	8005b46 <_printf_float+0xb6>
 8005cc2:	f04f 0900 	mov.w	r9, #0
 8005cc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cca:	f104 0a1a 	add.w	sl, r4, #26
 8005cce:	45c8      	cmp	r8, r9
 8005cd0:	dc09      	bgt.n	8005ce6 <_printf_float+0x256>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	079b      	lsls	r3, r3, #30
 8005cd6:	f100 8102 	bmi.w	8005ede <_printf_float+0x44e>
 8005cda:	68e0      	ldr	r0, [r4, #12]
 8005cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cde:	4298      	cmp	r0, r3
 8005ce0:	bfb8      	it	lt
 8005ce2:	4618      	movlt	r0, r3
 8005ce4:	e731      	b.n	8005b4a <_printf_float+0xba>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f43f af28 	beq.w	8005b46 <_printf_float+0xb6>
 8005cf6:	f109 0901 	add.w	r9, r9, #1
 8005cfa:	e7e8      	b.n	8005cce <_printf_float+0x23e>
 8005cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dc38      	bgt.n	8005d74 <_printf_float+0x2e4>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <_printf_float+0x2e0>)
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f43f af1a 	beq.w	8005b46 <_printf_float+0xb6>
 8005d12:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d16:	ea59 0303 	orrs.w	r3, r9, r3
 8005d1a:	d102      	bne.n	8005d22 <_printf_float+0x292>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	07d9      	lsls	r1, r3, #31
 8005d20:	d5d7      	bpl.n	8005cd2 <_printf_float+0x242>
 8005d22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f af0a 	beq.w	8005b46 <_printf_float+0xb6>
 8005d32:	f04f 0a00 	mov.w	sl, #0
 8005d36:	f104 0b1a 	add.w	fp, r4, #26
 8005d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	4553      	cmp	r3, sl
 8005d40:	dc01      	bgt.n	8005d46 <_printf_float+0x2b6>
 8005d42:	464b      	mov	r3, r9
 8005d44:	e793      	b.n	8005c6e <_printf_float+0x1de>
 8005d46:	2301      	movs	r3, #1
 8005d48:	465a      	mov	r2, fp
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f aef8 	beq.w	8005b46 <_printf_float+0xb6>
 8005d56:	f10a 0a01 	add.w	sl, sl, #1
 8005d5a:	e7ee      	b.n	8005d3a <_printf_float+0x2aa>
 8005d5c:	7fefffff 	.word	0x7fefffff
 8005d60:	0800a076 	.word	0x0800a076
 8005d64:	0800a072 	.word	0x0800a072
 8005d68:	0800a07e 	.word	0x0800a07e
 8005d6c:	0800a07a 	.word	0x0800a07a
 8005d70:	0800a082 	.word	0x0800a082
 8005d74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d7a:	4553      	cmp	r3, sl
 8005d7c:	bfa8      	it	ge
 8005d7e:	4653      	movge	r3, sl
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	4699      	mov	r9, r3
 8005d84:	dc36      	bgt.n	8005df4 <_printf_float+0x364>
 8005d86:	f04f 0b00 	mov.w	fp, #0
 8005d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8e:	f104 021a 	add.w	r2, r4, #26
 8005d92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d96:	eba3 0309 	sub.w	r3, r3, r9
 8005d9a:	455b      	cmp	r3, fp
 8005d9c:	dc31      	bgt.n	8005e02 <_printf_float+0x372>
 8005d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da0:	459a      	cmp	sl, r3
 8005da2:	dc3a      	bgt.n	8005e1a <_printf_float+0x38a>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07da      	lsls	r2, r3, #31
 8005da8:	d437      	bmi.n	8005e1a <_printf_float+0x38a>
 8005daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dac:	ebaa 0903 	sub.w	r9, sl, r3
 8005db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db2:	ebaa 0303 	sub.w	r3, sl, r3
 8005db6:	4599      	cmp	r9, r3
 8005db8:	bfa8      	it	ge
 8005dba:	4699      	movge	r9, r3
 8005dbc:	f1b9 0f00 	cmp.w	r9, #0
 8005dc0:	dc33      	bgt.n	8005e2a <_printf_float+0x39a>
 8005dc2:	f04f 0800 	mov.w	r8, #0
 8005dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dca:	f104 0b1a 	add.w	fp, r4, #26
 8005dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd4:	eba3 0309 	sub.w	r3, r3, r9
 8005dd8:	4543      	cmp	r3, r8
 8005dda:	f77f af7a 	ble.w	8005cd2 <_printf_float+0x242>
 8005dde:	2301      	movs	r3, #1
 8005de0:	465a      	mov	r2, fp
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f aeac 	beq.w	8005b46 <_printf_float+0xb6>
 8005dee:	f108 0801 	add.w	r8, r8, #1
 8005df2:	e7ec      	b.n	8005dce <_printf_float+0x33e>
 8005df4:	4642      	mov	r2, r8
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d1c2      	bne.n	8005d86 <_printf_float+0x2f6>
 8005e00:	e6a1      	b.n	8005b46 <_printf_float+0xb6>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f ae9a 	beq.w	8005b46 <_printf_float+0xb6>
 8005e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e14:	f10b 0b01 	add.w	fp, fp, #1
 8005e18:	e7bb      	b.n	8005d92 <_printf_float+0x302>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	d1c0      	bne.n	8005daa <_printf_float+0x31a>
 8005e28:	e68d      	b.n	8005b46 <_printf_float+0xb6>
 8005e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	4442      	add	r2, r8
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	d1c3      	bne.n	8005dc2 <_printf_float+0x332>
 8005e3a:	e684      	b.n	8005b46 <_printf_float+0xb6>
 8005e3c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e40:	f1ba 0f01 	cmp.w	sl, #1
 8005e44:	dc01      	bgt.n	8005e4a <_printf_float+0x3ba>
 8005e46:	07db      	lsls	r3, r3, #31
 8005e48:	d536      	bpl.n	8005eb8 <_printf_float+0x428>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f ae76 	beq.w	8005b46 <_printf_float+0xb6>
 8005e5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e5e:	4631      	mov	r1, r6
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	f43f ae6e 	beq.w	8005b46 <_printf_float+0xb6>
 8005e6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e76:	f7fa fd97 	bl	80009a8 <__aeabi_dcmpeq>
 8005e7a:	b9c0      	cbnz	r0, 8005eae <_printf_float+0x41e>
 8005e7c:	4653      	mov	r3, sl
 8005e7e:	f108 0201 	add.w	r2, r8, #1
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d10c      	bne.n	8005ea6 <_printf_float+0x416>
 8005e8c:	e65b      	b.n	8005b46 <_printf_float+0xb6>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	465a      	mov	r2, fp
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f ae54 	beq.w	8005b46 <_printf_float+0xb6>
 8005e9e:	f108 0801 	add.w	r8, r8, #1
 8005ea2:	45d0      	cmp	r8, sl
 8005ea4:	dbf3      	blt.n	8005e8e <_printf_float+0x3fe>
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005eac:	e6e0      	b.n	8005c70 <_printf_float+0x1e0>
 8005eae:	f04f 0800 	mov.w	r8, #0
 8005eb2:	f104 0b1a 	add.w	fp, r4, #26
 8005eb6:	e7f4      	b.n	8005ea2 <_printf_float+0x412>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4642      	mov	r2, r8
 8005ebc:	e7e1      	b.n	8005e82 <_printf_float+0x3f2>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	464a      	mov	r2, r9
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f ae3c 	beq.w	8005b46 <_printf_float+0xb6>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ed6:	1a5b      	subs	r3, r3, r1
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	dcf0      	bgt.n	8005ebe <_printf_float+0x42e>
 8005edc:	e6fd      	b.n	8005cda <_printf_float+0x24a>
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	f104 0919 	add.w	r9, r4, #25
 8005ee6:	e7f4      	b.n	8005ed2 <_printf_float+0x442>

08005ee8 <_printf_common>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	4616      	mov	r6, r2
 8005eee:	4698      	mov	r8, r3
 8005ef0:	688a      	ldr	r2, [r1, #8]
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bfb8      	it	lt
 8005efa:	4613      	movlt	r3, r2
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f02:	460c      	mov	r4, r1
 8005f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f08:	b10a      	cbz	r2, 8005f0e <_printf_common+0x26>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0699      	lsls	r1, r3, #26
 8005f12:	bf42      	ittt	mi
 8005f14:	6833      	ldrmi	r3, [r6, #0]
 8005f16:	3302      	addmi	r3, #2
 8005f18:	6033      	strmi	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	f015 0506 	ands.w	r5, r5, #6
 8005f20:	d106      	bne.n	8005f30 <_printf_common+0x48>
 8005f22:	f104 0a19 	add.w	sl, r4, #25
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	6832      	ldr	r2, [r6, #0]
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dc2b      	bgt.n	8005f88 <_printf_common+0xa0>
 8005f30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	3b00      	subs	r3, #0
 8005f38:	bf18      	it	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	0692      	lsls	r2, r2, #26
 8005f3e:	d430      	bmi.n	8005fa2 <_printf_common+0xba>
 8005f40:	4641      	mov	r1, r8
 8005f42:	4638      	mov	r0, r7
 8005f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f48:	47c8      	blx	r9
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d023      	beq.n	8005f96 <_printf_common+0xae>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	6922      	ldr	r2, [r4, #16]
 8005f52:	f003 0306 	and.w	r3, r3, #6
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	bf14      	ite	ne
 8005f5a:	2500      	movne	r5, #0
 8005f5c:	6833      	ldreq	r3, [r6, #0]
 8005f5e:	f04f 0600 	mov.w	r6, #0
 8005f62:	bf08      	it	eq
 8005f64:	68e5      	ldreq	r5, [r4, #12]
 8005f66:	f104 041a 	add.w	r4, r4, #26
 8005f6a:	bf08      	it	eq
 8005f6c:	1aed      	subeq	r5, r5, r3
 8005f6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f72:	bf08      	it	eq
 8005f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	bfc4      	itt	gt
 8005f7c:	1a9b      	subgt	r3, r3, r2
 8005f7e:	18ed      	addgt	r5, r5, r3
 8005f80:	42b5      	cmp	r5, r6
 8005f82:	d11a      	bne.n	8005fba <_printf_common+0xd2>
 8005f84:	2000      	movs	r0, #0
 8005f86:	e008      	b.n	8005f9a <_printf_common+0xb2>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	4638      	mov	r0, r7
 8005f90:	47c8      	blx	r9
 8005f92:	3001      	adds	r0, #1
 8005f94:	d103      	bne.n	8005f9e <_printf_common+0xb6>
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	e7c1      	b.n	8005f26 <_printf_common+0x3e>
 8005fa2:	2030      	movs	r0, #48	@ 0x30
 8005fa4:	18e1      	adds	r1, r4, r3
 8005fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fb0:	4422      	add	r2, r4
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb8:	e7c2      	b.n	8005f40 <_printf_common+0x58>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	47c8      	blx	r9
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0e6      	beq.n	8005f96 <_printf_common+0xae>
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7d9      	b.n	8005f80 <_printf_common+0x98>

08005fcc <_printf_i>:
 8005fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	7e0f      	ldrb	r7, [r1, #24]
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	2f78      	cmp	r7, #120	@ 0x78
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	469a      	mov	sl, r3
 8005fdc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fe2:	d807      	bhi.n	8005ff4 <_printf_i+0x28>
 8005fe4:	2f62      	cmp	r7, #98	@ 0x62
 8005fe6:	d80a      	bhi.n	8005ffe <_printf_i+0x32>
 8005fe8:	2f00      	cmp	r7, #0
 8005fea:	f000 80d1 	beq.w	8006190 <_printf_i+0x1c4>
 8005fee:	2f58      	cmp	r7, #88	@ 0x58
 8005ff0:	f000 80b8 	beq.w	8006164 <_printf_i+0x198>
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ffc:	e03a      	b.n	8006074 <_printf_i+0xa8>
 8005ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006002:	2b15      	cmp	r3, #21
 8006004:	d8f6      	bhi.n	8005ff4 <_printf_i+0x28>
 8006006:	a101      	add	r1, pc, #4	@ (adr r1, 800600c <_printf_i+0x40>)
 8006008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800600c:	08006065 	.word	0x08006065
 8006010:	08006079 	.word	0x08006079
 8006014:	08005ff5 	.word	0x08005ff5
 8006018:	08005ff5 	.word	0x08005ff5
 800601c:	08005ff5 	.word	0x08005ff5
 8006020:	08005ff5 	.word	0x08005ff5
 8006024:	08006079 	.word	0x08006079
 8006028:	08005ff5 	.word	0x08005ff5
 800602c:	08005ff5 	.word	0x08005ff5
 8006030:	08005ff5 	.word	0x08005ff5
 8006034:	08005ff5 	.word	0x08005ff5
 8006038:	08006177 	.word	0x08006177
 800603c:	080060a3 	.word	0x080060a3
 8006040:	08006131 	.word	0x08006131
 8006044:	08005ff5 	.word	0x08005ff5
 8006048:	08005ff5 	.word	0x08005ff5
 800604c:	08006199 	.word	0x08006199
 8006050:	08005ff5 	.word	0x08005ff5
 8006054:	080060a3 	.word	0x080060a3
 8006058:	08005ff5 	.word	0x08005ff5
 800605c:	08005ff5 	.word	0x08005ff5
 8006060:	08006139 	.word	0x08006139
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6032      	str	r2, [r6, #0]
 800606c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006074:	2301      	movs	r3, #1
 8006076:	e09c      	b.n	80061b2 <_printf_i+0x1e6>
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	1d19      	adds	r1, r3, #4
 800607e:	6031      	str	r1, [r6, #0]
 8006080:	0606      	lsls	r6, r0, #24
 8006082:	d501      	bpl.n	8006088 <_printf_i+0xbc>
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	e003      	b.n	8006090 <_printf_i+0xc4>
 8006088:	0645      	lsls	r5, r0, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0xb8>
 800608c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0xd0>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	426d      	negs	r5, r5
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609c:	230a      	movs	r3, #10
 800609e:	4858      	ldr	r0, [pc, #352]	@ (8006200 <_printf_i+0x234>)
 80060a0:	e011      	b.n	80060c6 <_printf_i+0xfa>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	0608      	lsls	r0, r1, #24
 80060a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060ac:	d402      	bmi.n	80060b4 <_printf_i+0xe8>
 80060ae:	0649      	lsls	r1, r1, #25
 80060b0:	bf48      	it	mi
 80060b2:	b2ad      	uxthmi	r5, r5
 80060b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	bf14      	ite	ne
 80060ba:	230a      	movne	r3, #10
 80060bc:	2308      	moveq	r3, #8
 80060be:	4850      	ldr	r0, [pc, #320]	@ (8006200 <_printf_i+0x234>)
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c6:	6866      	ldr	r6, [r4, #4]
 80060c8:	2e00      	cmp	r6, #0
 80060ca:	60a6      	str	r6, [r4, #8]
 80060cc:	db05      	blt.n	80060da <_printf_i+0x10e>
 80060ce:	6821      	ldr	r1, [r4, #0]
 80060d0:	432e      	orrs	r6, r5
 80060d2:	f021 0104 	bic.w	r1, r1, #4
 80060d6:	6021      	str	r1, [r4, #0]
 80060d8:	d04b      	beq.n	8006172 <_printf_i+0x1a6>
 80060da:	4616      	mov	r6, r2
 80060dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80060e0:	fb03 5711 	mls	r7, r3, r1, r5
 80060e4:	5dc7      	ldrb	r7, [r0, r7]
 80060e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ea:	462f      	mov	r7, r5
 80060ec:	42bb      	cmp	r3, r7
 80060ee:	460d      	mov	r5, r1
 80060f0:	d9f4      	bls.n	80060dc <_printf_i+0x110>
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d10b      	bne.n	800610e <_printf_i+0x142>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	07df      	lsls	r7, r3, #31
 80060fa:	d508      	bpl.n	800610e <_printf_i+0x142>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	6861      	ldr	r1, [r4, #4]
 8006100:	4299      	cmp	r1, r3
 8006102:	bfde      	ittt	le
 8006104:	2330      	movle	r3, #48	@ 0x30
 8006106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800610a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800610e:	1b92      	subs	r2, r2, r6
 8006110:	6122      	str	r2, [r4, #16]
 8006112:	464b      	mov	r3, r9
 8006114:	4621      	mov	r1, r4
 8006116:	4640      	mov	r0, r8
 8006118:	f8cd a000 	str.w	sl, [sp]
 800611c:	aa03      	add	r2, sp, #12
 800611e:	f7ff fee3 	bl	8005ee8 <_printf_common>
 8006122:	3001      	adds	r0, #1
 8006124:	d14a      	bne.n	80061bc <_printf_i+0x1f0>
 8006126:	f04f 30ff 	mov.w	r0, #4294967295
 800612a:	b004      	add	sp, #16
 800612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	f043 0320 	orr.w	r3, r3, #32
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	2778      	movs	r7, #120	@ 0x78
 800613a:	4832      	ldr	r0, [pc, #200]	@ (8006204 <_printf_i+0x238>)
 800613c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	6831      	ldr	r1, [r6, #0]
 8006144:	061f      	lsls	r7, r3, #24
 8006146:	f851 5b04 	ldr.w	r5, [r1], #4
 800614a:	d402      	bmi.n	8006152 <_printf_i+0x186>
 800614c:	065f      	lsls	r7, r3, #25
 800614e:	bf48      	it	mi
 8006150:	b2ad      	uxthmi	r5, r5
 8006152:	6031      	str	r1, [r6, #0]
 8006154:	07d9      	lsls	r1, r3, #31
 8006156:	bf44      	itt	mi
 8006158:	f043 0320 	orrmi.w	r3, r3, #32
 800615c:	6023      	strmi	r3, [r4, #0]
 800615e:	b11d      	cbz	r5, 8006168 <_printf_i+0x19c>
 8006160:	2310      	movs	r3, #16
 8006162:	e7ad      	b.n	80060c0 <_printf_i+0xf4>
 8006164:	4826      	ldr	r0, [pc, #152]	@ (8006200 <_printf_i+0x234>)
 8006166:	e7e9      	b.n	800613c <_printf_i+0x170>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	f023 0320 	bic.w	r3, r3, #32
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	e7f6      	b.n	8006160 <_printf_i+0x194>
 8006172:	4616      	mov	r6, r2
 8006174:	e7bd      	b.n	80060f2 <_printf_i+0x126>
 8006176:	6833      	ldr	r3, [r6, #0]
 8006178:	6825      	ldr	r5, [r4, #0]
 800617a:	1d18      	adds	r0, r3, #4
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	6030      	str	r0, [r6, #0]
 8006180:	062e      	lsls	r6, r5, #24
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	d501      	bpl.n	800618a <_printf_i+0x1be>
 8006186:	6019      	str	r1, [r3, #0]
 8006188:	e002      	b.n	8006190 <_printf_i+0x1c4>
 800618a:	0668      	lsls	r0, r5, #25
 800618c:	d5fb      	bpl.n	8006186 <_printf_i+0x1ba>
 800618e:	8019      	strh	r1, [r3, #0]
 8006190:	2300      	movs	r3, #0
 8006192:	4616      	mov	r6, r2
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	e7bc      	b.n	8006112 <_printf_i+0x146>
 8006198:	6833      	ldr	r3, [r6, #0]
 800619a:	2100      	movs	r1, #0
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	6032      	str	r2, [r6, #0]
 80061a0:	681e      	ldr	r6, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 fbe0 	bl	800696a <memchr>
 80061aa:	b108      	cbz	r0, 80061b0 <_printf_i+0x1e4>
 80061ac:	1b80      	subs	r0, r0, r6
 80061ae:	6060      	str	r0, [r4, #4]
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	2300      	movs	r3, #0
 80061b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ba:	e7aa      	b.n	8006112 <_printf_i+0x146>
 80061bc:	4632      	mov	r2, r6
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	47d0      	blx	sl
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0ad      	beq.n	8006126 <_printf_i+0x15a>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	079b      	lsls	r3, r3, #30
 80061ce:	d413      	bmi.n	80061f8 <_printf_i+0x22c>
 80061d0:	68e0      	ldr	r0, [r4, #12]
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	4298      	cmp	r0, r3
 80061d6:	bfb8      	it	lt
 80061d8:	4618      	movlt	r0, r3
 80061da:	e7a6      	b.n	800612a <_printf_i+0x15e>
 80061dc:	2301      	movs	r3, #1
 80061de:	4632      	mov	r2, r6
 80061e0:	4649      	mov	r1, r9
 80061e2:	4640      	mov	r0, r8
 80061e4:	47d0      	blx	sl
 80061e6:	3001      	adds	r0, #1
 80061e8:	d09d      	beq.n	8006126 <_printf_i+0x15a>
 80061ea:	3501      	adds	r5, #1
 80061ec:	68e3      	ldr	r3, [r4, #12]
 80061ee:	9903      	ldr	r1, [sp, #12]
 80061f0:	1a5b      	subs	r3, r3, r1
 80061f2:	42ab      	cmp	r3, r5
 80061f4:	dcf2      	bgt.n	80061dc <_printf_i+0x210>
 80061f6:	e7eb      	b.n	80061d0 <_printf_i+0x204>
 80061f8:	2500      	movs	r5, #0
 80061fa:	f104 0619 	add.w	r6, r4, #25
 80061fe:	e7f5      	b.n	80061ec <_printf_i+0x220>
 8006200:	0800a084 	.word	0x0800a084
 8006204:	0800a095 	.word	0x0800a095

08006208 <_scanf_float>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	b087      	sub	sp, #28
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	688b      	ldr	r3, [r1, #8]
 8006212:	4691      	mov	r9, r2
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800621a:	bf82      	ittt	hi
 800621c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006220:	eb03 0b05 	addhi.w	fp, r3, r5
 8006224:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006228:	460a      	mov	r2, r1
 800622a:	f04f 0500 	mov.w	r5, #0
 800622e:	bf88      	it	hi
 8006230:	608b      	strhi	r3, [r1, #8]
 8006232:	680b      	ldr	r3, [r1, #0]
 8006234:	4680      	mov	r8, r0
 8006236:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800623a:	f842 3b1c 	str.w	r3, [r2], #28
 800623e:	460c      	mov	r4, r1
 8006240:	bf98      	it	ls
 8006242:	f04f 0b00 	movls.w	fp, #0
 8006246:	4616      	mov	r6, r2
 8006248:	46aa      	mov	sl, r5
 800624a:	462f      	mov	r7, r5
 800624c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006250:	9201      	str	r2, [sp, #4]
 8006252:	9502      	str	r5, [sp, #8]
 8006254:	68a2      	ldr	r2, [r4, #8]
 8006256:	b15a      	cbz	r2, 8006270 <_scanf_float+0x68>
 8006258:	f8d9 3000 	ldr.w	r3, [r9]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006260:	d862      	bhi.n	8006328 <_scanf_float+0x120>
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d83a      	bhi.n	80062dc <_scanf_float+0xd4>
 8006266:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800626a:	b2c8      	uxtb	r0, r1
 800626c:	280e      	cmp	r0, #14
 800626e:	d938      	bls.n	80062e2 <_scanf_float+0xda>
 8006270:	b11f      	cbz	r7, 800627a <_scanf_float+0x72>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627e:	f1ba 0f01 	cmp.w	sl, #1
 8006282:	f200 8114 	bhi.w	80064ae <_scanf_float+0x2a6>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	429e      	cmp	r6, r3
 800628a:	f200 8105 	bhi.w	8006498 <_scanf_float+0x290>
 800628e:	2001      	movs	r0, #1
 8006290:	b007      	add	sp, #28
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800629a:	2a0d      	cmp	r2, #13
 800629c:	d8e8      	bhi.n	8006270 <_scanf_float+0x68>
 800629e:	a101      	add	r1, pc, #4	@ (adr r1, 80062a4 <_scanf_float+0x9c>)
 80062a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80062a4:	080063ed 	.word	0x080063ed
 80062a8:	08006271 	.word	0x08006271
 80062ac:	08006271 	.word	0x08006271
 80062b0:	08006271 	.word	0x08006271
 80062b4:	08006449 	.word	0x08006449
 80062b8:	08006423 	.word	0x08006423
 80062bc:	08006271 	.word	0x08006271
 80062c0:	08006271 	.word	0x08006271
 80062c4:	080063fb 	.word	0x080063fb
 80062c8:	08006271 	.word	0x08006271
 80062cc:	08006271 	.word	0x08006271
 80062d0:	08006271 	.word	0x08006271
 80062d4:	08006271 	.word	0x08006271
 80062d8:	080063b7 	.word	0x080063b7
 80062dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80062e0:	e7db      	b.n	800629a <_scanf_float+0x92>
 80062e2:	290e      	cmp	r1, #14
 80062e4:	d8c4      	bhi.n	8006270 <_scanf_float+0x68>
 80062e6:	a001      	add	r0, pc, #4	@ (adr r0, 80062ec <_scanf_float+0xe4>)
 80062e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80062ec:	080063a7 	.word	0x080063a7
 80062f0:	08006271 	.word	0x08006271
 80062f4:	080063a7 	.word	0x080063a7
 80062f8:	08006437 	.word	0x08006437
 80062fc:	08006271 	.word	0x08006271
 8006300:	08006349 	.word	0x08006349
 8006304:	0800638d 	.word	0x0800638d
 8006308:	0800638d 	.word	0x0800638d
 800630c:	0800638d 	.word	0x0800638d
 8006310:	0800638d 	.word	0x0800638d
 8006314:	0800638d 	.word	0x0800638d
 8006318:	0800638d 	.word	0x0800638d
 800631c:	0800638d 	.word	0x0800638d
 8006320:	0800638d 	.word	0x0800638d
 8006324:	0800638d 	.word	0x0800638d
 8006328:	2b6e      	cmp	r3, #110	@ 0x6e
 800632a:	d809      	bhi.n	8006340 <_scanf_float+0x138>
 800632c:	2b60      	cmp	r3, #96	@ 0x60
 800632e:	d8b2      	bhi.n	8006296 <_scanf_float+0x8e>
 8006330:	2b54      	cmp	r3, #84	@ 0x54
 8006332:	d07b      	beq.n	800642c <_scanf_float+0x224>
 8006334:	2b59      	cmp	r3, #89	@ 0x59
 8006336:	d19b      	bne.n	8006270 <_scanf_float+0x68>
 8006338:	2d07      	cmp	r5, #7
 800633a:	d199      	bne.n	8006270 <_scanf_float+0x68>
 800633c:	2508      	movs	r5, #8
 800633e:	e02f      	b.n	80063a0 <_scanf_float+0x198>
 8006340:	2b74      	cmp	r3, #116	@ 0x74
 8006342:	d073      	beq.n	800642c <_scanf_float+0x224>
 8006344:	2b79      	cmp	r3, #121	@ 0x79
 8006346:	e7f6      	b.n	8006336 <_scanf_float+0x12e>
 8006348:	6821      	ldr	r1, [r4, #0]
 800634a:	05c8      	lsls	r0, r1, #23
 800634c:	d51e      	bpl.n	800638c <_scanf_float+0x184>
 800634e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006352:	6021      	str	r1, [r4, #0]
 8006354:	3701      	adds	r7, #1
 8006356:	f1bb 0f00 	cmp.w	fp, #0
 800635a:	d003      	beq.n	8006364 <_scanf_float+0x15c>
 800635c:	3201      	adds	r2, #1
 800635e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006362:	60a2      	str	r2, [r4, #8]
 8006364:	68a3      	ldr	r3, [r4, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	3301      	adds	r3, #1
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006374:	3b01      	subs	r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	f8c9 3004 	str.w	r3, [r9, #4]
 800637c:	f340 8083 	ble.w	8006486 <_scanf_float+0x27e>
 8006380:	f8d9 3000 	ldr.w	r3, [r9]
 8006384:	3301      	adds	r3, #1
 8006386:	f8c9 3000 	str.w	r3, [r9]
 800638a:	e763      	b.n	8006254 <_scanf_float+0x4c>
 800638c:	eb1a 0105 	adds.w	r1, sl, r5
 8006390:	f47f af6e 	bne.w	8006270 <_scanf_float+0x68>
 8006394:	460d      	mov	r5, r1
 8006396:	468a      	mov	sl, r1
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	f806 3b01 	strb.w	r3, [r6], #1
 80063a4:	e7de      	b.n	8006364 <_scanf_float+0x15c>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	0610      	lsls	r0, r2, #24
 80063aa:	f57f af61 	bpl.w	8006270 <_scanf_float+0x68>
 80063ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	e7f4      	b.n	80063a0 <_scanf_float+0x198>
 80063b6:	f1ba 0f00 	cmp.w	sl, #0
 80063ba:	d10c      	bne.n	80063d6 <_scanf_float+0x1ce>
 80063bc:	b977      	cbnz	r7, 80063dc <_scanf_float+0x1d4>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80063c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80063c8:	d108      	bne.n	80063dc <_scanf_float+0x1d4>
 80063ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063ce:	f04f 0a01 	mov.w	sl, #1
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	e7e4      	b.n	80063a0 <_scanf_float+0x198>
 80063d6:	f1ba 0f02 	cmp.w	sl, #2
 80063da:	d051      	beq.n	8006480 <_scanf_float+0x278>
 80063dc:	2d01      	cmp	r5, #1
 80063de:	d002      	beq.n	80063e6 <_scanf_float+0x1de>
 80063e0:	2d04      	cmp	r5, #4
 80063e2:	f47f af45 	bne.w	8006270 <_scanf_float+0x68>
 80063e6:	3501      	adds	r5, #1
 80063e8:	b2ed      	uxtb	r5, r5
 80063ea:	e7d9      	b.n	80063a0 <_scanf_float+0x198>
 80063ec:	f1ba 0f01 	cmp.w	sl, #1
 80063f0:	f47f af3e 	bne.w	8006270 <_scanf_float+0x68>
 80063f4:	f04f 0a02 	mov.w	sl, #2
 80063f8:	e7d2      	b.n	80063a0 <_scanf_float+0x198>
 80063fa:	b975      	cbnz	r5, 800641a <_scanf_float+0x212>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	f47f af38 	bne.w	8006272 <_scanf_float+0x6a>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006408:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800640c:	f040 80ff 	bne.w	800660e <_scanf_float+0x406>
 8006410:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006414:	2501      	movs	r5, #1
 8006416:	6022      	str	r2, [r4, #0]
 8006418:	e7c2      	b.n	80063a0 <_scanf_float+0x198>
 800641a:	2d03      	cmp	r5, #3
 800641c:	d0e3      	beq.n	80063e6 <_scanf_float+0x1de>
 800641e:	2d05      	cmp	r5, #5
 8006420:	e7df      	b.n	80063e2 <_scanf_float+0x1da>
 8006422:	2d02      	cmp	r5, #2
 8006424:	f47f af24 	bne.w	8006270 <_scanf_float+0x68>
 8006428:	2503      	movs	r5, #3
 800642a:	e7b9      	b.n	80063a0 <_scanf_float+0x198>
 800642c:	2d06      	cmp	r5, #6
 800642e:	f47f af1f 	bne.w	8006270 <_scanf_float+0x68>
 8006432:	2507      	movs	r5, #7
 8006434:	e7b4      	b.n	80063a0 <_scanf_float+0x198>
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	0591      	lsls	r1, r2, #22
 800643a:	f57f af19 	bpl.w	8006270 <_scanf_float+0x68>
 800643e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	9702      	str	r7, [sp, #8]
 8006446:	e7ab      	b.n	80063a0 <_scanf_float+0x198>
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800644e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006452:	d005      	beq.n	8006460 <_scanf_float+0x258>
 8006454:	0550      	lsls	r0, r2, #21
 8006456:	f57f af0b 	bpl.w	8006270 <_scanf_float+0x68>
 800645a:	2f00      	cmp	r7, #0
 800645c:	f000 80d7 	beq.w	800660e <_scanf_float+0x406>
 8006460:	0591      	lsls	r1, r2, #22
 8006462:	bf58      	it	pl
 8006464:	9902      	ldrpl	r1, [sp, #8]
 8006466:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800646a:	bf58      	it	pl
 800646c:	1a79      	subpl	r1, r7, r1
 800646e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006472:	f04f 0700 	mov.w	r7, #0
 8006476:	bf58      	it	pl
 8006478:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	e78f      	b.n	80063a0 <_scanf_float+0x198>
 8006480:	f04f 0a03 	mov.w	sl, #3
 8006484:	e78c      	b.n	80063a0 <_scanf_float+0x198>
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800648e:	4798      	blx	r3
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aedf 	beq.w	8006254 <_scanf_float+0x4c>
 8006496:	e6eb      	b.n	8006270 <_scanf_float+0x68>
 8006498:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800649c:	464a      	mov	r2, r9
 800649e:	4640      	mov	r0, r8
 80064a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064a4:	4798      	blx	r3
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	e6eb      	b.n	8006286 <_scanf_float+0x7e>
 80064ae:	1e6b      	subs	r3, r5, #1
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d824      	bhi.n	80064fe <_scanf_float+0x2f6>
 80064b4:	2d02      	cmp	r5, #2
 80064b6:	d836      	bhi.n	8006526 <_scanf_float+0x31e>
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	429e      	cmp	r6, r3
 80064bc:	f67f aee7 	bls.w	800628e <_scanf_float+0x86>
 80064c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064c4:	464a      	mov	r2, r9
 80064c6:	4640      	mov	r0, r8
 80064c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064cc:	4798      	blx	r3
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	e7f0      	b.n	80064b8 <_scanf_float+0x2b0>
 80064d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064da:	464a      	mov	r2, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80064e2:	4798      	blx	r3
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ee:	fa5f fa8a 	uxtb.w	sl, sl
 80064f2:	f1ba 0f02 	cmp.w	sl, #2
 80064f6:	d1ee      	bne.n	80064d6 <_scanf_float+0x2ce>
 80064f8:	3d03      	subs	r5, #3
 80064fa:	b2ed      	uxtb	r5, r5
 80064fc:	1b76      	subs	r6, r6, r5
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	05da      	lsls	r2, r3, #23
 8006502:	d530      	bpl.n	8006566 <_scanf_float+0x35e>
 8006504:	055b      	lsls	r3, r3, #21
 8006506:	d511      	bpl.n	800652c <_scanf_float+0x324>
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	429e      	cmp	r6, r3
 800650c:	f67f aebf 	bls.w	800628e <_scanf_float+0x86>
 8006510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006514:	464a      	mov	r2, r9
 8006516:	4640      	mov	r0, r8
 8006518:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800651c:	4798      	blx	r3
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	3b01      	subs	r3, #1
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	e7f0      	b.n	8006508 <_scanf_float+0x300>
 8006526:	46aa      	mov	sl, r5
 8006528:	46b3      	mov	fp, r6
 800652a:	e7de      	b.n	80064ea <_scanf_float+0x2e2>
 800652c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	2965      	cmp	r1, #101	@ 0x65
 8006534:	f103 33ff 	add.w	r3, r3, #4294967295
 8006538:	f106 35ff 	add.w	r5, r6, #4294967295
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	d00c      	beq.n	800655a <_scanf_float+0x352>
 8006540:	2945      	cmp	r1, #69	@ 0x45
 8006542:	d00a      	beq.n	800655a <_scanf_float+0x352>
 8006544:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006548:	464a      	mov	r2, r9
 800654a:	4640      	mov	r0, r8
 800654c:	4798      	blx	r3
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006554:	3b01      	subs	r3, #1
 8006556:	1eb5      	subs	r5, r6, #2
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	464a      	mov	r2, r9
 800655c:	4640      	mov	r0, r8
 800655e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006562:	4798      	blx	r3
 8006564:	462e      	mov	r6, r5
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	f012 0210 	ands.w	r2, r2, #16
 800656c:	d001      	beq.n	8006572 <_scanf_float+0x36a>
 800656e:	2000      	movs	r0, #0
 8006570:	e68e      	b.n	8006290 <_scanf_float+0x88>
 8006572:	7032      	strb	r2, [r6, #0]
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657e:	d125      	bne.n	80065cc <_scanf_float+0x3c4>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	429f      	cmp	r7, r3
 8006584:	d00a      	beq.n	800659c <_scanf_float+0x394>
 8006586:	1bda      	subs	r2, r3, r7
 8006588:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800658c:	429e      	cmp	r6, r3
 800658e:	bf28      	it	cs
 8006590:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006594:	4630      	mov	r0, r6
 8006596:	491f      	ldr	r1, [pc, #124]	@ (8006614 <_scanf_float+0x40c>)
 8006598:	f000 f902 	bl	80067a0 <siprintf>
 800659c:	2200      	movs	r2, #0
 800659e:	4640      	mov	r0, r8
 80065a0:	9901      	ldr	r1, [sp, #4]
 80065a2:	f002 fbe9 	bl	8008d78 <_strtod_r>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	6825      	ldr	r5, [r4, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f015 0f02 	tst.w	r5, #2
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	f103 0204 	add.w	r2, r3, #4
 80065b8:	d015      	beq.n	80065e6 <_scanf_float+0x3de>
 80065ba:	9903      	ldr	r1, [sp, #12]
 80065bc:	600a      	str	r2, [r1, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	e9c3 6700 	strd	r6, r7, [r3]
 80065c4:	68e3      	ldr	r3, [r4, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60e3      	str	r3, [r4, #12]
 80065ca:	e7d0      	b.n	800656e <_scanf_float+0x366>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0e4      	beq.n	800659c <_scanf_float+0x394>
 80065d2:	9905      	ldr	r1, [sp, #20]
 80065d4:	230a      	movs	r3, #10
 80065d6:	4640      	mov	r0, r8
 80065d8:	3101      	adds	r1, #1
 80065da:	f002 fc4d 	bl	8008e78 <_strtol_r>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	9e05      	ldr	r6, [sp, #20]
 80065e2:	1ac2      	subs	r2, r0, r3
 80065e4:	e7d0      	b.n	8006588 <_scanf_float+0x380>
 80065e6:	076d      	lsls	r5, r5, #29
 80065e8:	d4e7      	bmi.n	80065ba <_scanf_float+0x3b2>
 80065ea:	9d03      	ldr	r5, [sp, #12]
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	681d      	ldr	r5, [r3, #0]
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	f7fa fa0a 	bl	8000a0c <__aeabi_dcmpun>
 80065f8:	b120      	cbz	r0, 8006604 <_scanf_float+0x3fc>
 80065fa:	4807      	ldr	r0, [pc, #28]	@ (8006618 <_scanf_float+0x410>)
 80065fc:	f000 f9c4 	bl	8006988 <nanf>
 8006600:	6028      	str	r0, [r5, #0]
 8006602:	e7df      	b.n	80065c4 <_scanf_float+0x3bc>
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7fa fa5e 	bl	8000ac8 <__aeabi_d2f>
 800660c:	e7f8      	b.n	8006600 <_scanf_float+0x3f8>
 800660e:	2700      	movs	r7, #0
 8006610:	e633      	b.n	800627a <_scanf_float+0x72>
 8006612:	bf00      	nop
 8006614:	0800a0a6 	.word	0x0800a0a6
 8006618:	0800a1e7 	.word	0x0800a1e7

0800661c <std>:
 800661c:	2300      	movs	r3, #0
 800661e:	b510      	push	{r4, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	e9c0 3300 	strd	r3, r3, [r0]
 8006626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800662a:	6083      	str	r3, [r0, #8]
 800662c:	8181      	strh	r1, [r0, #12]
 800662e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006630:	81c2      	strh	r2, [r0, #14]
 8006632:	6183      	str	r3, [r0, #24]
 8006634:	4619      	mov	r1, r3
 8006636:	2208      	movs	r2, #8
 8006638:	305c      	adds	r0, #92	@ 0x5c
 800663a:	f000 f916 	bl	800686a <memset>
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <std+0x58>)
 8006640:	6224      	str	r4, [r4, #32]
 8006642:	6263      	str	r3, [r4, #36]	@ 0x24
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <std+0x5c>)
 8006646:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <std+0x60>)
 800664a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800664c:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <std+0x64>)
 800664e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006650:	4b0c      	ldr	r3, [pc, #48]	@ (8006684 <std+0x68>)
 8006652:	429c      	cmp	r4, r3
 8006654:	d006      	beq.n	8006664 <std+0x48>
 8006656:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800665a:	4294      	cmp	r4, r2
 800665c:	d002      	beq.n	8006664 <std+0x48>
 800665e:	33d0      	adds	r3, #208	@ 0xd0
 8006660:	429c      	cmp	r4, r3
 8006662:	d105      	bne.n	8006670 <std+0x54>
 8006664:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666c:	f000 b97a 	b.w	8006964 <__retarget_lock_init_recursive>
 8006670:	bd10      	pop	{r4, pc}
 8006672:	bf00      	nop
 8006674:	080067e5 	.word	0x080067e5
 8006678:	08006807 	.word	0x08006807
 800667c:	0800683f 	.word	0x0800683f
 8006680:	08006863 	.word	0x08006863
 8006684:	200002a4 	.word	0x200002a4

08006688 <stdio_exit_handler>:
 8006688:	4a02      	ldr	r2, [pc, #8]	@ (8006694 <stdio_exit_handler+0xc>)
 800668a:	4903      	ldr	r1, [pc, #12]	@ (8006698 <stdio_exit_handler+0x10>)
 800668c:	4803      	ldr	r0, [pc, #12]	@ (800669c <stdio_exit_handler+0x14>)
 800668e:	f000 b869 	b.w	8006764 <_fwalk_sglue>
 8006692:	bf00      	nop
 8006694:	20000014 	.word	0x20000014
 8006698:	0800922d 	.word	0x0800922d
 800669c:	20000024 	.word	0x20000024

080066a0 <cleanup_stdio>:
 80066a0:	6841      	ldr	r1, [r0, #4]
 80066a2:	4b0c      	ldr	r3, [pc, #48]	@ (80066d4 <cleanup_stdio+0x34>)
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4299      	cmp	r1, r3
 80066a8:	4604      	mov	r4, r0
 80066aa:	d001      	beq.n	80066b0 <cleanup_stdio+0x10>
 80066ac:	f002 fdbe 	bl	800922c <_fflush_r>
 80066b0:	68a1      	ldr	r1, [r4, #8]
 80066b2:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <cleanup_stdio+0x38>)
 80066b4:	4299      	cmp	r1, r3
 80066b6:	d002      	beq.n	80066be <cleanup_stdio+0x1e>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f002 fdb7 	bl	800922c <_fflush_r>
 80066be:	68e1      	ldr	r1, [r4, #12]
 80066c0:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <cleanup_stdio+0x3c>)
 80066c2:	4299      	cmp	r1, r3
 80066c4:	d004      	beq.n	80066d0 <cleanup_stdio+0x30>
 80066c6:	4620      	mov	r0, r4
 80066c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066cc:	f002 bdae 	b.w	800922c <_fflush_r>
 80066d0:	bd10      	pop	{r4, pc}
 80066d2:	bf00      	nop
 80066d4:	200002a4 	.word	0x200002a4
 80066d8:	2000030c 	.word	0x2000030c
 80066dc:	20000374 	.word	0x20000374

080066e0 <global_stdio_init.part.0>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <global_stdio_init.part.0+0x30>)
 80066e4:	4c0b      	ldr	r4, [pc, #44]	@ (8006714 <global_stdio_init.part.0+0x34>)
 80066e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <global_stdio_init.part.0+0x38>)
 80066e8:	4620      	mov	r0, r4
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	2104      	movs	r1, #4
 80066ee:	2200      	movs	r2, #0
 80066f0:	f7ff ff94 	bl	800661c <std>
 80066f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066f8:	2201      	movs	r2, #1
 80066fa:	2109      	movs	r1, #9
 80066fc:	f7ff ff8e 	bl	800661c <std>
 8006700:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006704:	2202      	movs	r2, #2
 8006706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670a:	2112      	movs	r1, #18
 800670c:	f7ff bf86 	b.w	800661c <std>
 8006710:	200003dc 	.word	0x200003dc
 8006714:	200002a4 	.word	0x200002a4
 8006718:	08006689 	.word	0x08006689

0800671c <__sfp_lock_acquire>:
 800671c:	4801      	ldr	r0, [pc, #4]	@ (8006724 <__sfp_lock_acquire+0x8>)
 800671e:	f000 b922 	b.w	8006966 <__retarget_lock_acquire_recursive>
 8006722:	bf00      	nop
 8006724:	200003e5 	.word	0x200003e5

08006728 <__sfp_lock_release>:
 8006728:	4801      	ldr	r0, [pc, #4]	@ (8006730 <__sfp_lock_release+0x8>)
 800672a:	f000 b91d 	b.w	8006968 <__retarget_lock_release_recursive>
 800672e:	bf00      	nop
 8006730:	200003e5 	.word	0x200003e5

08006734 <__sinit>:
 8006734:	b510      	push	{r4, lr}
 8006736:	4604      	mov	r4, r0
 8006738:	f7ff fff0 	bl	800671c <__sfp_lock_acquire>
 800673c:	6a23      	ldr	r3, [r4, #32]
 800673e:	b11b      	cbz	r3, 8006748 <__sinit+0x14>
 8006740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006744:	f7ff bff0 	b.w	8006728 <__sfp_lock_release>
 8006748:	4b04      	ldr	r3, [pc, #16]	@ (800675c <__sinit+0x28>)
 800674a:	6223      	str	r3, [r4, #32]
 800674c:	4b04      	ldr	r3, [pc, #16]	@ (8006760 <__sinit+0x2c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f5      	bne.n	8006740 <__sinit+0xc>
 8006754:	f7ff ffc4 	bl	80066e0 <global_stdio_init.part.0>
 8006758:	e7f2      	b.n	8006740 <__sinit+0xc>
 800675a:	bf00      	nop
 800675c:	080066a1 	.word	0x080066a1
 8006760:	200003dc 	.word	0x200003dc

08006764 <_fwalk_sglue>:
 8006764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006768:	4607      	mov	r7, r0
 800676a:	4688      	mov	r8, r1
 800676c:	4614      	mov	r4, r2
 800676e:	2600      	movs	r6, #0
 8006770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006774:	f1b9 0901 	subs.w	r9, r9, #1
 8006778:	d505      	bpl.n	8006786 <_fwalk_sglue+0x22>
 800677a:	6824      	ldr	r4, [r4, #0]
 800677c:	2c00      	cmp	r4, #0
 800677e:	d1f7      	bne.n	8006770 <_fwalk_sglue+0xc>
 8006780:	4630      	mov	r0, r6
 8006782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006786:	89ab      	ldrh	r3, [r5, #12]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d907      	bls.n	800679c <_fwalk_sglue+0x38>
 800678c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006790:	3301      	adds	r3, #1
 8006792:	d003      	beq.n	800679c <_fwalk_sglue+0x38>
 8006794:	4629      	mov	r1, r5
 8006796:	4638      	mov	r0, r7
 8006798:	47c0      	blx	r8
 800679a:	4306      	orrs	r6, r0
 800679c:	3568      	adds	r5, #104	@ 0x68
 800679e:	e7e9      	b.n	8006774 <_fwalk_sglue+0x10>

080067a0 <siprintf>:
 80067a0:	b40e      	push	{r1, r2, r3}
 80067a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067a6:	b510      	push	{r4, lr}
 80067a8:	2400      	movs	r4, #0
 80067aa:	b09d      	sub	sp, #116	@ 0x74
 80067ac:	ab1f      	add	r3, sp, #124	@ 0x7c
 80067ae:	9002      	str	r0, [sp, #8]
 80067b0:	9006      	str	r0, [sp, #24]
 80067b2:	9107      	str	r1, [sp, #28]
 80067b4:	9104      	str	r1, [sp, #16]
 80067b6:	4809      	ldr	r0, [pc, #36]	@ (80067dc <siprintf+0x3c>)
 80067b8:	4909      	ldr	r1, [pc, #36]	@ (80067e0 <siprintf+0x40>)
 80067ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80067be:	9105      	str	r1, [sp, #20]
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	a902      	add	r1, sp, #8
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80067c8:	f002 fbb4 	bl	8008f34 <_svfiprintf_r>
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	701c      	strb	r4, [r3, #0]
 80067d0:	b01d      	add	sp, #116	@ 0x74
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d6:	b003      	add	sp, #12
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000020 	.word	0x20000020
 80067e0:	ffff0208 	.word	0xffff0208

080067e4 <__sread>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ec:	f000 f86c 	bl	80068c8 <_read_r>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	bfab      	itete	ge
 80067f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067f6:	89a3      	ldrhlt	r3, [r4, #12]
 80067f8:	181b      	addge	r3, r3, r0
 80067fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067fe:	bfac      	ite	ge
 8006800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006802:	81a3      	strhlt	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__swrite>:
 8006806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	461f      	mov	r7, r3
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	4605      	mov	r5, r0
 8006810:	05db      	lsls	r3, r3, #23
 8006812:	460c      	mov	r4, r1
 8006814:	4616      	mov	r6, r2
 8006816:	d505      	bpl.n	8006824 <__swrite+0x1e>
 8006818:	2302      	movs	r3, #2
 800681a:	2200      	movs	r2, #0
 800681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006820:	f000 f840 	bl	80068a4 <_lseek_r>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	4632      	mov	r2, r6
 8006828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	4628      	mov	r0, r5
 8006830:	463b      	mov	r3, r7
 8006832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800683a:	f000 b857 	b.w	80068ec <_write_r>

0800683e <__sseek>:
 800683e:	b510      	push	{r4, lr}
 8006840:	460c      	mov	r4, r1
 8006842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006846:	f000 f82d 	bl	80068a4 <_lseek_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	bf15      	itete	ne
 8006850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800685a:	81a3      	strheq	r3, [r4, #12]
 800685c:	bf18      	it	ne
 800685e:	81a3      	strhne	r3, [r4, #12]
 8006860:	bd10      	pop	{r4, pc}

08006862 <__sclose>:
 8006862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006866:	f000 b80d 	b.w	8006884 <_close_r>

0800686a <memset>:
 800686a:	4603      	mov	r3, r0
 800686c:	4402      	add	r2, r0
 800686e:	4293      	cmp	r3, r2
 8006870:	d100      	bne.n	8006874 <memset+0xa>
 8006872:	4770      	bx	lr
 8006874:	f803 1b01 	strb.w	r1, [r3], #1
 8006878:	e7f9      	b.n	800686e <memset+0x4>
	...

0800687c <_localeconv_r>:
 800687c:	4800      	ldr	r0, [pc, #0]	@ (8006880 <_localeconv_r+0x4>)
 800687e:	4770      	bx	lr
 8006880:	20000160 	.word	0x20000160

08006884 <_close_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	2300      	movs	r3, #0
 8006888:	4d05      	ldr	r5, [pc, #20]	@ (80068a0 <_close_r+0x1c>)
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fa fef7 	bl	8001682 <_close>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_close_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_close_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	200003e0 	.word	0x200003e0

080068a4 <_lseek_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	2200      	movs	r2, #0
 80068ae:	4d05      	ldr	r5, [pc, #20]	@ (80068c4 <_lseek_r+0x20>)
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f7fa ff09 	bl	80016ca <_lseek>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_lseek_r+0x1e>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_lseek_r+0x1e>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	200003e0 	.word	0x200003e0

080068c8 <_read_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	2200      	movs	r2, #0
 80068d2:	4d05      	ldr	r5, [pc, #20]	@ (80068e8 <_read_r+0x20>)
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fa fe9a 	bl	8001610 <_read>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_read_r+0x1e>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_read_r+0x1e>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	200003e0 	.word	0x200003e0

080068ec <_write_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	2200      	movs	r2, #0
 80068f6:	4d05      	ldr	r5, [pc, #20]	@ (800690c <_write_r+0x20>)
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f7fa fea5 	bl	800164a <_write>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_write_r+0x1e>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_write_r+0x1e>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	200003e0 	.word	0x200003e0

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	@ (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000020 	.word	0x20000020

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	2600      	movs	r6, #0
 8006920:	4d0c      	ldr	r5, [pc, #48]	@ (8006954 <__libc_init_array+0x38>)
 8006922:	4c0d      	ldr	r4, [pc, #52]	@ (8006958 <__libc_init_array+0x3c>)
 8006924:	1b64      	subs	r4, r4, r5
 8006926:	10a4      	asrs	r4, r4, #2
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	f003 fb6a 	bl	800a004 <_init>
 8006930:	2600      	movs	r6, #0
 8006932:	4d0a      	ldr	r5, [pc, #40]	@ (800695c <__libc_init_array+0x40>)
 8006934:	4c0a      	ldr	r4, [pc, #40]	@ (8006960 <__libc_init_array+0x44>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	0800a4a4 	.word	0x0800a4a4
 8006958:	0800a4a4 	.word	0x0800a4a4
 800695c:	0800a4a4 	.word	0x0800a4a4
 8006960:	0800a4a8 	.word	0x0800a4a8

08006964 <__retarget_lock_init_recursive>:
 8006964:	4770      	bx	lr

08006966 <__retarget_lock_acquire_recursive>:
 8006966:	4770      	bx	lr

08006968 <__retarget_lock_release_recursive>:
 8006968:	4770      	bx	lr

0800696a <memchr>:
 800696a:	4603      	mov	r3, r0
 800696c:	b510      	push	{r4, lr}
 800696e:	b2c9      	uxtb	r1, r1
 8006970:	4402      	add	r2, r0
 8006972:	4293      	cmp	r3, r2
 8006974:	4618      	mov	r0, r3
 8006976:	d101      	bne.n	800697c <memchr+0x12>
 8006978:	2000      	movs	r0, #0
 800697a:	e003      	b.n	8006984 <memchr+0x1a>
 800697c:	7804      	ldrb	r4, [r0, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	428c      	cmp	r4, r1
 8006982:	d1f6      	bne.n	8006972 <memchr+0x8>
 8006984:	bd10      	pop	{r4, pc}
	...

08006988 <nanf>:
 8006988:	4800      	ldr	r0, [pc, #0]	@ (800698c <nanf+0x4>)
 800698a:	4770      	bx	lr
 800698c:	7fc00000 	.word	0x7fc00000

08006990 <quorem>:
 8006990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	6903      	ldr	r3, [r0, #16]
 8006996:	690c      	ldr	r4, [r1, #16]
 8006998:	4607      	mov	r7, r0
 800699a:	42a3      	cmp	r3, r4
 800699c:	db7e      	blt.n	8006a9c <quorem+0x10c>
 800699e:	3c01      	subs	r4, #1
 80069a0:	00a3      	lsls	r3, r4, #2
 80069a2:	f100 0514 	add.w	r5, r0, #20
 80069a6:	f101 0814 	add.w	r8, r1, #20
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ba:	3301      	adds	r3, #1
 80069bc:	429a      	cmp	r2, r3
 80069be:	fbb2 f6f3 	udiv	r6, r2, r3
 80069c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069c6:	d32e      	bcc.n	8006a26 <quorem+0x96>
 80069c8:	f04f 0a00 	mov.w	sl, #0
 80069cc:	46c4      	mov	ip, r8
 80069ce:	46ae      	mov	lr, r5
 80069d0:	46d3      	mov	fp, sl
 80069d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069d6:	b298      	uxth	r0, r3
 80069d8:	fb06 a000 	mla	r0, r6, r0, sl
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	0c02      	lsrs	r2, r0, #16
 80069e0:	fb06 2303 	mla	r3, r6, r3, r2
 80069e4:	f8de 2000 	ldr.w	r2, [lr]
 80069e8:	b280      	uxth	r0, r0
 80069ea:	b292      	uxth	r2, r2
 80069ec:	1a12      	subs	r2, r2, r0
 80069ee:	445a      	add	r2, fp
 80069f0:	f8de 0000 	ldr.w	r0, [lr]
 80069f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a02:	b292      	uxth	r2, r2
 8006a04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a08:	45e1      	cmp	r9, ip
 8006a0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a0e:	f84e 2b04 	str.w	r2, [lr], #4
 8006a12:	d2de      	bcs.n	80069d2 <quorem+0x42>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	58eb      	ldr	r3, [r5, r3]
 8006a18:	b92b      	cbnz	r3, 8006a26 <quorem+0x96>
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	3b04      	subs	r3, #4
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	d32f      	bcc.n	8006a84 <quorem+0xf4>
 8006a24:	613c      	str	r4, [r7, #16]
 8006a26:	4638      	mov	r0, r7
 8006a28:	f001 f9c8 	bl	8007dbc <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	db25      	blt.n	8006a7c <quorem+0xec>
 8006a30:	4629      	mov	r1, r5
 8006a32:	2000      	movs	r0, #0
 8006a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a38:	f8d1 c000 	ldr.w	ip, [r1]
 8006a3c:	fa1f fe82 	uxth.w	lr, r2
 8006a40:	fa1f f38c 	uxth.w	r3, ip
 8006a44:	eba3 030e 	sub.w	r3, r3, lr
 8006a48:	4403      	add	r3, r0
 8006a4a:	0c12      	lsrs	r2, r2, #16
 8006a4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a5a:	45c1      	cmp	r9, r8
 8006a5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a60:	f841 3b04 	str.w	r3, [r1], #4
 8006a64:	d2e6      	bcs.n	8006a34 <quorem+0xa4>
 8006a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a6e:	b922      	cbnz	r2, 8006a7a <quorem+0xea>
 8006a70:	3b04      	subs	r3, #4
 8006a72:	429d      	cmp	r5, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	d30b      	bcc.n	8006a90 <quorem+0x100>
 8006a78:	613c      	str	r4, [r7, #16]
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	b003      	add	sp, #12
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	3b04      	subs	r3, #4
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d1cb      	bne.n	8006a24 <quorem+0x94>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	e7c6      	b.n	8006a1e <quorem+0x8e>
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	3b04      	subs	r3, #4
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	d1ef      	bne.n	8006a78 <quorem+0xe8>
 8006a98:	3c01      	subs	r4, #1
 8006a9a:	e7ea      	b.n	8006a72 <quorem+0xe2>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7ee      	b.n	8006a7e <quorem+0xee>

08006aa0 <_dtoa_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	461d      	mov	r5, r3
 8006aa8:	69c7      	ldr	r7, [r0, #28]
 8006aaa:	b097      	sub	sp, #92	@ 0x5c
 8006aac:	4681      	mov	r9, r0
 8006aae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ab2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ab4:	b97f      	cbnz	r7, 8006ad6 <_dtoa_r+0x36>
 8006ab6:	2010      	movs	r0, #16
 8006ab8:	f000 fe0e 	bl	80076d8 <malloc>
 8006abc:	4602      	mov	r2, r0
 8006abe:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ac2:	b920      	cbnz	r0, 8006ace <_dtoa_r+0x2e>
 8006ac4:	21ef      	movs	r1, #239	@ 0xef
 8006ac6:	4bac      	ldr	r3, [pc, #688]	@ (8006d78 <_dtoa_r+0x2d8>)
 8006ac8:	48ac      	ldr	r0, [pc, #688]	@ (8006d7c <_dtoa_r+0x2dc>)
 8006aca:	f002 fc27 	bl	800931c <__assert_func>
 8006ace:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ad2:	6007      	str	r7, [r0, #0]
 8006ad4:	60c7      	str	r7, [r0, #12]
 8006ad6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ada:	6819      	ldr	r1, [r3, #0]
 8006adc:	b159      	cbz	r1, 8006af6 <_dtoa_r+0x56>
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4093      	lsls	r3, r2
 8006ae4:	604a      	str	r2, [r1, #4]
 8006ae6:	608b      	str	r3, [r1, #8]
 8006ae8:	4648      	mov	r0, r9
 8006aea:	f000 feeb 	bl	80078c4 <_Bfree>
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	1e2b      	subs	r3, r5, #0
 8006af8:	bfaf      	iteee	ge
 8006afa:	2300      	movge	r3, #0
 8006afc:	2201      	movlt	r2, #1
 8006afe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b02:	9307      	strlt	r3, [sp, #28]
 8006b04:	bfa8      	it	ge
 8006b06:	6033      	strge	r3, [r6, #0]
 8006b08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006b0c:	4b9c      	ldr	r3, [pc, #624]	@ (8006d80 <_dtoa_r+0x2e0>)
 8006b0e:	bfb8      	it	lt
 8006b10:	6032      	strlt	r2, [r6, #0]
 8006b12:	ea33 0308 	bics.w	r3, r3, r8
 8006b16:	d112      	bne.n	8006b3e <_dtoa_r+0x9e>
 8006b18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b24:	4323      	orrs	r3, r4
 8006b26:	f000 855e 	beq.w	80075e6 <_dtoa_r+0xb46>
 8006b2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d84 <_dtoa_r+0x2e4>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8560 	beq.w	80075f6 <_dtoa_r+0xb56>
 8006b36:	f10a 0303 	add.w	r3, sl, #3
 8006b3a:	f000 bd5a 	b.w	80075f2 <_dtoa_r+0xb52>
 8006b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f7f9 ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b52:	4607      	mov	r7, r0
 8006b54:	b158      	cbz	r0, 8006b6e <_dtoa_r+0xce>
 8006b56:	2301      	movs	r3, #1
 8006b58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b5e:	b113      	cbz	r3, 8006b66 <_dtoa_r+0xc6>
 8006b60:	4b89      	ldr	r3, [pc, #548]	@ (8006d88 <_dtoa_r+0x2e8>)
 8006b62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006d8c <_dtoa_r+0x2ec>
 8006b6a:	f000 bd44 	b.w	80075f6 <_dtoa_r+0xb56>
 8006b6e:	ab14      	add	r3, sp, #80	@ 0x50
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	ab15      	add	r3, sp, #84	@ 0x54
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	4648      	mov	r0, r9
 8006b78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b7c:	f001 fa36 	bl	8007fec <__d2b>
 8006b80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006b84:	9003      	str	r0, [sp, #12]
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d078      	beq.n	8006c7c <_dtoa_r+0x1dc>
 8006b8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ba0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8006d90 <_dtoa_r+0x2f0>)
 8006ba8:	f7f9 fade 	bl	8000168 <__aeabi_dsub>
 8006bac:	a36c      	add	r3, pc, #432	@ (adr r3, 8006d60 <_dtoa_r+0x2c0>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fc91 	bl	80004d8 <__aeabi_dmul>
 8006bb6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006d68 <_dtoa_r+0x2c8>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fad6 	bl	800016c <__adddf3>
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	f7f9 fc1d 	bl	8000404 <__aeabi_i2d>
 8006bca:	a369      	add	r3, pc, #420	@ (adr r3, 8006d70 <_dtoa_r+0x2d0>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f7f9 fc82 	bl	80004d8 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 fac6 	bl	800016c <__adddf3>
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	f7f9 ff28 	bl	8000a38 <__aeabi_d2iz>
 8006be8:	2200      	movs	r2, #0
 8006bea:	4607      	mov	r7, r0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 fee3 	bl	80009bc <__aeabi_dcmplt>
 8006bf6:	b140      	cbz	r0, 8006c0a <_dtoa_r+0x16a>
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7f9 fc03 	bl	8000404 <__aeabi_i2d>
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	f7f9 fed1 	bl	80009a8 <__aeabi_dcmpeq>
 8006c06:	b900      	cbnz	r0, 8006c0a <_dtoa_r+0x16a>
 8006c08:	3f01      	subs	r7, #1
 8006c0a:	2f16      	cmp	r7, #22
 8006c0c:	d854      	bhi.n	8006cb8 <_dtoa_r+0x218>
 8006c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c12:	4b60      	ldr	r3, [pc, #384]	@ (8006d94 <_dtoa_r+0x2f4>)
 8006c14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fece 	bl	80009bc <__aeabi_dcmplt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d04b      	beq.n	8006cbc <_dtoa_r+0x21c>
 8006c24:	2300      	movs	r3, #0
 8006c26:	3f01      	subs	r7, #1
 8006c28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c2c:	1b9b      	subs	r3, r3, r6
 8006c2e:	1e5a      	subs	r2, r3, #1
 8006c30:	bf49      	itett	mi
 8006c32:	f1c3 0301 	rsbmi	r3, r3, #1
 8006c36:	2300      	movpl	r3, #0
 8006c38:	9304      	strmi	r3, [sp, #16]
 8006c3a:	2300      	movmi	r3, #0
 8006c3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c3e:	bf54      	ite	pl
 8006c40:	9304      	strpl	r3, [sp, #16]
 8006c42:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	db3b      	blt.n	8006cc0 <_dtoa_r+0x220>
 8006c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006c4c:	443b      	add	r3, r7
 8006c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c50:	2300      	movs	r3, #0
 8006c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d865      	bhi.n	8006d26 <_dtoa_r+0x286>
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	bfc4      	itt	gt
 8006c5e:	3b04      	subgt	r3, #4
 8006c60:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c64:	bfc8      	it	gt
 8006c66:	2400      	movgt	r4, #0
 8006c68:	f1a3 0302 	sub.w	r3, r3, #2
 8006c6c:	bfd8      	it	le
 8006c6e:	2401      	movle	r4, #1
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d864      	bhi.n	8006d3e <_dtoa_r+0x29e>
 8006c74:	e8df f003 	tbb	[pc, r3]
 8006c78:	2c385553 	.word	0x2c385553
 8006c7c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c80:	441e      	add	r6, r3
 8006c82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	bfc1      	itttt	gt
 8006c8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c8e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c9a:	bfd6      	itet	le
 8006c9c:	f1c3 0320 	rsble	r3, r3, #32
 8006ca0:	ea48 0003 	orrgt.w	r0, r8, r3
 8006ca4:	fa04 f003 	lslle.w	r0, r4, r3
 8006ca8:	f7f9 fb9c 	bl	80003e4 <__aeabi_ui2d>
 8006cac:	2201      	movs	r2, #1
 8006cae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006cb2:	3e01      	subs	r6, #1
 8006cb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8006cb6:	e774      	b.n	8006ba2 <_dtoa_r+0x102>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e7b5      	b.n	8006c28 <_dtoa_r+0x188>
 8006cbc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006cbe:	e7b4      	b.n	8006c2a <_dtoa_r+0x18a>
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	1bdb      	subs	r3, r3, r7
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	427b      	negs	r3, r7
 8006cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cca:	2300      	movs	r3, #0
 8006ccc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cce:	e7c1      	b.n	8006c54 <_dtoa_r+0x1b4>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cd6:	eb07 0b03 	add.w	fp, r7, r3
 8006cda:	f10b 0301 	add.w	r3, fp, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	bfb8      	it	lt
 8006ce4:	2301      	movlt	r3, #1
 8006ce6:	e006      	b.n	8006cf6 <_dtoa_r+0x256>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd28      	ble.n	8006d44 <_dtoa_r+0x2a4>
 8006cf2:	469b      	mov	fp, r3
 8006cf4:	9308      	str	r3, [sp, #32]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006cfe:	f102 0514 	add.w	r5, r2, #20
 8006d02:	429d      	cmp	r5, r3
 8006d04:	d926      	bls.n	8006d54 <_dtoa_r+0x2b4>
 8006d06:	6041      	str	r1, [r0, #4]
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f000 fd9b 	bl	8007844 <_Balloc>
 8006d0e:	4682      	mov	sl, r0
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d143      	bne.n	8006d9c <_dtoa_r+0x2fc>
 8006d14:	4602      	mov	r2, r0
 8006d16:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d98 <_dtoa_r+0x2f8>)
 8006d1c:	e6d4      	b.n	8006ac8 <_dtoa_r+0x28>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e7e3      	b.n	8006cea <_dtoa_r+0x24a>
 8006d22:	2300      	movs	r3, #0
 8006d24:	e7d5      	b.n	8006cd2 <_dtoa_r+0x232>
 8006d26:	2401      	movs	r4, #1
 8006d28:	2300      	movs	r3, #0
 8006d2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d2e:	f04f 3bff 	mov.w	fp, #4294967295
 8006d32:	2200      	movs	r2, #0
 8006d34:	2312      	movs	r3, #18
 8006d36:	f8cd b020 	str.w	fp, [sp, #32]
 8006d3a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006d3c:	e7db      	b.n	8006cf6 <_dtoa_r+0x256>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d42:	e7f4      	b.n	8006d2e <_dtoa_r+0x28e>
 8006d44:	f04f 0b01 	mov.w	fp, #1
 8006d48:	465b      	mov	r3, fp
 8006d4a:	f8cd b020 	str.w	fp, [sp, #32]
 8006d4e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006d52:	e7d0      	b.n	8006cf6 <_dtoa_r+0x256>
 8006d54:	3101      	adds	r1, #1
 8006d56:	0052      	lsls	r2, r2, #1
 8006d58:	e7d1      	b.n	8006cfe <_dtoa_r+0x25e>
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	636f4361 	.word	0x636f4361
 8006d64:	3fd287a7 	.word	0x3fd287a7
 8006d68:	8b60c8b3 	.word	0x8b60c8b3
 8006d6c:	3fc68a28 	.word	0x3fc68a28
 8006d70:	509f79fb 	.word	0x509f79fb
 8006d74:	3fd34413 	.word	0x3fd34413
 8006d78:	0800a0b8 	.word	0x0800a0b8
 8006d7c:	0800a0cf 	.word	0x0800a0cf
 8006d80:	7ff00000 	.word	0x7ff00000
 8006d84:	0800a0b4 	.word	0x0800a0b4
 8006d88:	0800a083 	.word	0x0800a083
 8006d8c:	0800a082 	.word	0x0800a082
 8006d90:	3ff80000 	.word	0x3ff80000
 8006d94:	0800a280 	.word	0x0800a280
 8006d98:	0800a127 	.word	0x0800a127
 8006d9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006da0:	6018      	str	r0, [r3, #0]
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	2b0e      	cmp	r3, #14
 8006da6:	f200 80a1 	bhi.w	8006eec <_dtoa_r+0x44c>
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	f000 809e 	beq.w	8006eec <_dtoa_r+0x44c>
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	dd33      	ble.n	8006e1c <_dtoa_r+0x37c>
 8006db4:	4b9c      	ldr	r3, [pc, #624]	@ (8007028 <_dtoa_r+0x588>)
 8006db6:	f007 020f 	and.w	r2, r7, #15
 8006dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dbe:	05f8      	lsls	r0, r7, #23
 8006dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006dc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006dcc:	d516      	bpl.n	8006dfc <_dtoa_r+0x35c>
 8006dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dd2:	4b96      	ldr	r3, [pc, #600]	@ (800702c <_dtoa_r+0x58c>)
 8006dd4:	2603      	movs	r6, #3
 8006dd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dda:	f7f9 fca7 	bl	800072c <__aeabi_ddiv>
 8006dde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006de2:	f004 040f 	and.w	r4, r4, #15
 8006de6:	4d91      	ldr	r5, [pc, #580]	@ (800702c <_dtoa_r+0x58c>)
 8006de8:	b954      	cbnz	r4, 8006e00 <_dtoa_r+0x360>
 8006dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006df2:	f7f9 fc9b 	bl	800072c <__aeabi_ddiv>
 8006df6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006dfa:	e028      	b.n	8006e4e <_dtoa_r+0x3ae>
 8006dfc:	2602      	movs	r6, #2
 8006dfe:	e7f2      	b.n	8006de6 <_dtoa_r+0x346>
 8006e00:	07e1      	lsls	r1, r4, #31
 8006e02:	d508      	bpl.n	8006e16 <_dtoa_r+0x376>
 8006e04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e0c:	f7f9 fb64 	bl	80004d8 <__aeabi_dmul>
 8006e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e14:	3601      	adds	r6, #1
 8006e16:	1064      	asrs	r4, r4, #1
 8006e18:	3508      	adds	r5, #8
 8006e1a:	e7e5      	b.n	8006de8 <_dtoa_r+0x348>
 8006e1c:	f000 80af 	beq.w	8006f7e <_dtoa_r+0x4de>
 8006e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e24:	427c      	negs	r4, r7
 8006e26:	4b80      	ldr	r3, [pc, #512]	@ (8007028 <_dtoa_r+0x588>)
 8006e28:	f004 020f 	and.w	r2, r4, #15
 8006e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 fb50 	bl	80004d8 <__aeabi_dmul>
 8006e38:	2602      	movs	r6, #2
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e40:	4d7a      	ldr	r5, [pc, #488]	@ (800702c <_dtoa_r+0x58c>)
 8006e42:	1124      	asrs	r4, r4, #4
 8006e44:	2c00      	cmp	r4, #0
 8006e46:	f040 808f 	bne.w	8006f68 <_dtoa_r+0x4c8>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1d3      	bne.n	8006df6 <_dtoa_r+0x356>
 8006e4e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8094 	beq.w	8006f82 <_dtoa_r+0x4e2>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4b73      	ldr	r3, [pc, #460]	@ (8007030 <_dtoa_r+0x590>)
 8006e62:	f7f9 fdab 	bl	80009bc <__aeabi_dcmplt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f000 808b 	beq.w	8006f82 <_dtoa_r+0x4e2>
 8006e6c:	9b08      	ldr	r3, [sp, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8087 	beq.w	8006f82 <_dtoa_r+0x4e2>
 8006e74:	f1bb 0f00 	cmp.w	fp, #0
 8006e78:	dd34      	ble.n	8006ee4 <_dtoa_r+0x444>
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4b6c      	ldr	r3, [pc, #432]	@ (8007034 <_dtoa_r+0x594>)
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	465c      	mov	r4, fp
 8006e88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e90:	3601      	adds	r6, #1
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7f9 fab6 	bl	8000404 <__aeabi_i2d>
 8006e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e9c:	f7f9 fb1c 	bl	80004d8 <__aeabi_dmul>
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4b65      	ldr	r3, [pc, #404]	@ (8007038 <_dtoa_r+0x598>)
 8006ea4:	f7f9 f962 	bl	800016c <__adddf3>
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d16a      	bne.n	8006f88 <_dtoa_r+0x4e8>
 8006eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b60      	ldr	r3, [pc, #384]	@ (800703c <_dtoa_r+0x59c>)
 8006eba:	f7f9 f955 	bl	8000168 <__aeabi_dsub>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ec6:	462a      	mov	r2, r5
 8006ec8:	4633      	mov	r3, r6
 8006eca:	f7f9 fd95 	bl	80009f8 <__aeabi_dcmpgt>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f040 8298 	bne.w	8007404 <_dtoa_r+0x964>
 8006ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed8:	462a      	mov	r2, r5
 8006eda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ede:	f7f9 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8006ee2:	bb38      	cbnz	r0, 8006f34 <_dtoa_r+0x494>
 8006ee4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ee8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006eec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f2c0 8157 	blt.w	80071a2 <_dtoa_r+0x702>
 8006ef4:	2f0e      	cmp	r7, #14
 8006ef6:	f300 8154 	bgt.w	80071a2 <_dtoa_r+0x702>
 8006efa:	4b4b      	ldr	r3, [pc, #300]	@ (8007028 <_dtoa_r+0x588>)
 8006efc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f280 80e5 	bge.w	80070da <_dtoa_r+0x63a>
 8006f10:	9b08      	ldr	r3, [sp, #32]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f300 80e1 	bgt.w	80070da <_dtoa_r+0x63a>
 8006f18:	d10c      	bne.n	8006f34 <_dtoa_r+0x494>
 8006f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4b46      	ldr	r3, [pc, #280]	@ (800703c <_dtoa_r+0x59c>)
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f2a:	f7f9 fd5b 	bl	80009e4 <__aeabi_dcmpge>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f000 8266 	beq.w	8007400 <_dtoa_r+0x960>
 8006f34:	2400      	movs	r4, #0
 8006f36:	4625      	mov	r5, r4
 8006f38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f3a:	4656      	mov	r6, sl
 8006f3c:	ea6f 0803 	mvn.w	r8, r3
 8006f40:	2700      	movs	r7, #0
 8006f42:	4621      	mov	r1, r4
 8006f44:	4648      	mov	r0, r9
 8006f46:	f000 fcbd 	bl	80078c4 <_Bfree>
 8006f4a:	2d00      	cmp	r5, #0
 8006f4c:	f000 80bd 	beq.w	80070ca <_dtoa_r+0x62a>
 8006f50:	b12f      	cbz	r7, 8006f5e <_dtoa_r+0x4be>
 8006f52:	42af      	cmp	r7, r5
 8006f54:	d003      	beq.n	8006f5e <_dtoa_r+0x4be>
 8006f56:	4639      	mov	r1, r7
 8006f58:	4648      	mov	r0, r9
 8006f5a:	f000 fcb3 	bl	80078c4 <_Bfree>
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4648      	mov	r0, r9
 8006f62:	f000 fcaf 	bl	80078c4 <_Bfree>
 8006f66:	e0b0      	b.n	80070ca <_dtoa_r+0x62a>
 8006f68:	07e2      	lsls	r2, r4, #31
 8006f6a:	d505      	bpl.n	8006f78 <_dtoa_r+0x4d8>
 8006f6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f70:	f7f9 fab2 	bl	80004d8 <__aeabi_dmul>
 8006f74:	2301      	movs	r3, #1
 8006f76:	3601      	adds	r6, #1
 8006f78:	1064      	asrs	r4, r4, #1
 8006f7a:	3508      	adds	r5, #8
 8006f7c:	e762      	b.n	8006e44 <_dtoa_r+0x3a4>
 8006f7e:	2602      	movs	r6, #2
 8006f80:	e765      	b.n	8006e4e <_dtoa_r+0x3ae>
 8006f82:	46b8      	mov	r8, r7
 8006f84:	9c08      	ldr	r4, [sp, #32]
 8006f86:	e784      	b.n	8006e92 <_dtoa_r+0x3f2>
 8006f88:	4b27      	ldr	r3, [pc, #156]	@ (8007028 <_dtoa_r+0x588>)
 8006f8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f94:	4454      	add	r4, sl
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d054      	beq.n	8007044 <_dtoa_r+0x5a4>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	4928      	ldr	r1, [pc, #160]	@ (8007040 <_dtoa_r+0x5a0>)
 8006f9e:	f7f9 fbc5 	bl	800072c <__aeabi_ddiv>
 8006fa2:	4633      	mov	r3, r6
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	f7f9 f8df 	bl	8000168 <__aeabi_dsub>
 8006faa:	4656      	mov	r6, sl
 8006fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb4:	f7f9 fd40 	bl	8000a38 <__aeabi_d2iz>
 8006fb8:	4605      	mov	r5, r0
 8006fba:	f7f9 fa23 	bl	8000404 <__aeabi_i2d>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fc6:	f7f9 f8cf 	bl	8000168 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	3530      	adds	r5, #48	@ 0x30
 8006fd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fd8:	f806 5b01 	strb.w	r5, [r6], #1
 8006fdc:	f7f9 fcee 	bl	80009bc <__aeabi_dcmplt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d172      	bne.n	80070ca <_dtoa_r+0x62a>
 8006fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4911      	ldr	r1, [pc, #68]	@ (8007030 <_dtoa_r+0x590>)
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ff4:	f7f9 fce2 	bl	80009bc <__aeabi_dcmplt>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f040 80b4 	bne.w	8007166 <_dtoa_r+0x6c6>
 8006ffe:	42a6      	cmp	r6, r4
 8007000:	f43f af70 	beq.w	8006ee4 <_dtoa_r+0x444>
 8007004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007008:	2200      	movs	r2, #0
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <_dtoa_r+0x594>)
 800700c:	f7f9 fa64 	bl	80004d8 <__aeabi_dmul>
 8007010:	2200      	movs	r2, #0
 8007012:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800701a:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <_dtoa_r+0x594>)
 800701c:	f7f9 fa5c 	bl	80004d8 <__aeabi_dmul>
 8007020:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007024:	e7c4      	b.n	8006fb0 <_dtoa_r+0x510>
 8007026:	bf00      	nop
 8007028:	0800a280 	.word	0x0800a280
 800702c:	0800a258 	.word	0x0800a258
 8007030:	3ff00000 	.word	0x3ff00000
 8007034:	40240000 	.word	0x40240000
 8007038:	401c0000 	.word	0x401c0000
 800703c:	40140000 	.word	0x40140000
 8007040:	3fe00000 	.word	0x3fe00000
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	f7f9 fa46 	bl	80004d8 <__aeabi_dmul>
 800704c:	4656      	mov	r6, sl
 800704e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007052:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007058:	f7f9 fcee 	bl	8000a38 <__aeabi_d2iz>
 800705c:	4605      	mov	r5, r0
 800705e:	f7f9 f9d1 	bl	8000404 <__aeabi_i2d>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800706a:	f7f9 f87d 	bl	8000168 <__aeabi_dsub>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	3530      	adds	r5, #48	@ 0x30
 8007074:	f806 5b01 	strb.w	r5, [r6], #1
 8007078:	42a6      	cmp	r6, r4
 800707a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	d124      	bne.n	80070ce <_dtoa_r+0x62e>
 8007084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007088:	4bae      	ldr	r3, [pc, #696]	@ (8007344 <_dtoa_r+0x8a4>)
 800708a:	f7f9 f86f 	bl	800016c <__adddf3>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007096:	f7f9 fcaf 	bl	80009f8 <__aeabi_dcmpgt>
 800709a:	2800      	cmp	r0, #0
 800709c:	d163      	bne.n	8007166 <_dtoa_r+0x6c6>
 800709e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070a2:	2000      	movs	r0, #0
 80070a4:	49a7      	ldr	r1, [pc, #668]	@ (8007344 <_dtoa_r+0x8a4>)
 80070a6:	f7f9 f85f 	bl	8000168 <__aeabi_dsub>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b2:	f7f9 fc83 	bl	80009bc <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f af14 	beq.w	8006ee4 <_dtoa_r+0x444>
 80070bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80070be:	1e73      	subs	r3, r6, #1
 80070c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070c6:	2b30      	cmp	r3, #48	@ 0x30
 80070c8:	d0f8      	beq.n	80070bc <_dtoa_r+0x61c>
 80070ca:	4647      	mov	r7, r8
 80070cc:	e03b      	b.n	8007146 <_dtoa_r+0x6a6>
 80070ce:	4b9e      	ldr	r3, [pc, #632]	@ (8007348 <_dtoa_r+0x8a8>)
 80070d0:	f7f9 fa02 	bl	80004d8 <__aeabi_dmul>
 80070d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070d8:	e7bc      	b.n	8007054 <_dtoa_r+0x5b4>
 80070da:	4656      	mov	r6, sl
 80070dc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80070e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 fb20 	bl	800072c <__aeabi_ddiv>
 80070ec:	f7f9 fca4 	bl	8000a38 <__aeabi_d2iz>
 80070f0:	4680      	mov	r8, r0
 80070f2:	f7f9 f987 	bl	8000404 <__aeabi_i2d>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 f82f 	bl	8000168 <__aeabi_dsub>
 800710a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800710e:	9d08      	ldr	r5, [sp, #32]
 8007110:	f806 4b01 	strb.w	r4, [r6], #1
 8007114:	eba6 040a 	sub.w	r4, r6, sl
 8007118:	42a5      	cmp	r5, r4
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	d133      	bne.n	8007188 <_dtoa_r+0x6e8>
 8007120:	f7f9 f824 	bl	800016c <__adddf3>
 8007124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	f7f9 fc64 	bl	80009f8 <__aeabi_dcmpgt>
 8007130:	b9c0      	cbnz	r0, 8007164 <_dtoa_r+0x6c4>
 8007132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800713e:	b110      	cbz	r0, 8007146 <_dtoa_r+0x6a6>
 8007140:	f018 0f01 	tst.w	r8, #1
 8007144:	d10e      	bne.n	8007164 <_dtoa_r+0x6c4>
 8007146:	4648      	mov	r0, r9
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	f000 fbbb 	bl	80078c4 <_Bfree>
 800714e:	2300      	movs	r3, #0
 8007150:	7033      	strb	r3, [r6, #0]
 8007152:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007154:	3701      	adds	r7, #1
 8007156:	601f      	str	r7, [r3, #0]
 8007158:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 824b 	beq.w	80075f6 <_dtoa_r+0xb56>
 8007160:	601e      	str	r6, [r3, #0]
 8007162:	e248      	b.n	80075f6 <_dtoa_r+0xb56>
 8007164:	46b8      	mov	r8, r7
 8007166:	4633      	mov	r3, r6
 8007168:	461e      	mov	r6, r3
 800716a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800716e:	2a39      	cmp	r2, #57	@ 0x39
 8007170:	d106      	bne.n	8007180 <_dtoa_r+0x6e0>
 8007172:	459a      	cmp	sl, r3
 8007174:	d1f8      	bne.n	8007168 <_dtoa_r+0x6c8>
 8007176:	2230      	movs	r2, #48	@ 0x30
 8007178:	f108 0801 	add.w	r8, r8, #1
 800717c:	f88a 2000 	strb.w	r2, [sl]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	3201      	adds	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e7a0      	b.n	80070ca <_dtoa_r+0x62a>
 8007188:	2200      	movs	r2, #0
 800718a:	4b6f      	ldr	r3, [pc, #444]	@ (8007348 <_dtoa_r+0x8a8>)
 800718c:	f7f9 f9a4 	bl	80004d8 <__aeabi_dmul>
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	f7f9 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800719c:	2800      	cmp	r0, #0
 800719e:	d09f      	beq.n	80070e0 <_dtoa_r+0x640>
 80071a0:	e7d1      	b.n	8007146 <_dtoa_r+0x6a6>
 80071a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071a4:	2a00      	cmp	r2, #0
 80071a6:	f000 80ea 	beq.w	800737e <_dtoa_r+0x8de>
 80071aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071ac:	2a01      	cmp	r2, #1
 80071ae:	f300 80cd 	bgt.w	800734c <_dtoa_r+0x8ac>
 80071b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	f000 80c1 	beq.w	800733c <_dtoa_r+0x89c>
 80071ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071c0:	9e04      	ldr	r6, [sp, #16]
 80071c2:	9a04      	ldr	r2, [sp, #16]
 80071c4:	2101      	movs	r1, #1
 80071c6:	441a      	add	r2, r3
 80071c8:	9204      	str	r2, [sp, #16]
 80071ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071cc:	4648      	mov	r0, r9
 80071ce:	441a      	add	r2, r3
 80071d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80071d2:	f000 fc75 	bl	8007ac0 <__i2b>
 80071d6:	4605      	mov	r5, r0
 80071d8:	b166      	cbz	r6, 80071f4 <_dtoa_r+0x754>
 80071da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dd09      	ble.n	80071f4 <_dtoa_r+0x754>
 80071e0:	42b3      	cmp	r3, r6
 80071e2:	bfa8      	it	ge
 80071e4:	4633      	movge	r3, r6
 80071e6:	9a04      	ldr	r2, [sp, #16]
 80071e8:	1af6      	subs	r6, r6, r3
 80071ea:	1ad2      	subs	r2, r2, r3
 80071ec:	9204      	str	r2, [sp, #16]
 80071ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f6:	b30b      	cbz	r3, 800723c <_dtoa_r+0x79c>
 80071f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80c6 	beq.w	800738c <_dtoa_r+0x8ec>
 8007200:	2c00      	cmp	r4, #0
 8007202:	f000 80c0 	beq.w	8007386 <_dtoa_r+0x8e6>
 8007206:	4629      	mov	r1, r5
 8007208:	4622      	mov	r2, r4
 800720a:	4648      	mov	r0, r9
 800720c:	f000 fd10 	bl	8007c30 <__pow5mult>
 8007210:	9a03      	ldr	r2, [sp, #12]
 8007212:	4601      	mov	r1, r0
 8007214:	4605      	mov	r5, r0
 8007216:	4648      	mov	r0, r9
 8007218:	f000 fc68 	bl	8007aec <__multiply>
 800721c:	9903      	ldr	r1, [sp, #12]
 800721e:	4680      	mov	r8, r0
 8007220:	4648      	mov	r0, r9
 8007222:	f000 fb4f 	bl	80078c4 <_Bfree>
 8007226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007228:	1b1b      	subs	r3, r3, r4
 800722a:	930a      	str	r3, [sp, #40]	@ 0x28
 800722c:	f000 80b1 	beq.w	8007392 <_dtoa_r+0x8f2>
 8007230:	4641      	mov	r1, r8
 8007232:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007234:	4648      	mov	r0, r9
 8007236:	f000 fcfb 	bl	8007c30 <__pow5mult>
 800723a:	9003      	str	r0, [sp, #12]
 800723c:	2101      	movs	r1, #1
 800723e:	4648      	mov	r0, r9
 8007240:	f000 fc3e 	bl	8007ac0 <__i2b>
 8007244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007246:	4604      	mov	r4, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 81d8 	beq.w	80075fe <_dtoa_r+0xb5e>
 800724e:	461a      	mov	r2, r3
 8007250:	4601      	mov	r1, r0
 8007252:	4648      	mov	r0, r9
 8007254:	f000 fcec 	bl	8007c30 <__pow5mult>
 8007258:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800725a:	4604      	mov	r4, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	f300 809f 	bgt.w	80073a0 <_dtoa_r+0x900>
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8097 	bne.w	8007398 <_dtoa_r+0x8f8>
 800726a:	9b07      	ldr	r3, [sp, #28]
 800726c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 8093 	bne.w	800739c <_dtoa_r+0x8fc>
 8007276:	9b07      	ldr	r3, [sp, #28]
 8007278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800727c:	0d1b      	lsrs	r3, r3, #20
 800727e:	051b      	lsls	r3, r3, #20
 8007280:	b133      	cbz	r3, 8007290 <_dtoa_r+0x7f0>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	3301      	adds	r3, #1
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728a:	3301      	adds	r3, #1
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	2301      	movs	r3, #1
 8007290:	930a      	str	r3, [sp, #40]	@ 0x28
 8007292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 81b8 	beq.w	800760a <_dtoa_r+0xb6a>
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072a0:	6918      	ldr	r0, [r3, #16]
 80072a2:	f000 fbc1 	bl	8007a28 <__hi0bits>
 80072a6:	f1c0 0020 	rsb	r0, r0, #32
 80072aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ac:	4418      	add	r0, r3
 80072ae:	f010 001f 	ands.w	r0, r0, #31
 80072b2:	f000 8082 	beq.w	80073ba <_dtoa_r+0x91a>
 80072b6:	f1c0 0320 	rsb	r3, r0, #32
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	dd73      	ble.n	80073a6 <_dtoa_r+0x906>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	f1c0 001c 	rsb	r0, r0, #28
 80072c4:	4403      	add	r3, r0
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ca:	4406      	add	r6, r0
 80072cc:	4403      	add	r3, r0
 80072ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd05      	ble.n	80072e2 <_dtoa_r+0x842>
 80072d6:	461a      	mov	r2, r3
 80072d8:	4648      	mov	r0, r9
 80072da:	9903      	ldr	r1, [sp, #12]
 80072dc:	f000 fd02 	bl	8007ce4 <__lshift>
 80072e0:	9003      	str	r0, [sp, #12]
 80072e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd05      	ble.n	80072f4 <_dtoa_r+0x854>
 80072e8:	4621      	mov	r1, r4
 80072ea:	461a      	mov	r2, r3
 80072ec:	4648      	mov	r0, r9
 80072ee:	f000 fcf9 	bl	8007ce4 <__lshift>
 80072f2:	4604      	mov	r4, r0
 80072f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d061      	beq.n	80073be <_dtoa_r+0x91e>
 80072fa:	4621      	mov	r1, r4
 80072fc:	9803      	ldr	r0, [sp, #12]
 80072fe:	f000 fd5d 	bl	8007dbc <__mcmp>
 8007302:	2800      	cmp	r0, #0
 8007304:	da5b      	bge.n	80073be <_dtoa_r+0x91e>
 8007306:	2300      	movs	r3, #0
 8007308:	220a      	movs	r2, #10
 800730a:	4648      	mov	r0, r9
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	f000 fafb 	bl	8007908 <__multadd>
 8007312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007314:	f107 38ff 	add.w	r8, r7, #4294967295
 8007318:	9003      	str	r0, [sp, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8177 	beq.w	800760e <_dtoa_r+0xb6e>
 8007320:	4629      	mov	r1, r5
 8007322:	2300      	movs	r3, #0
 8007324:	220a      	movs	r2, #10
 8007326:	4648      	mov	r0, r9
 8007328:	f000 faee 	bl	8007908 <__multadd>
 800732c:	f1bb 0f00 	cmp.w	fp, #0
 8007330:	4605      	mov	r5, r0
 8007332:	dc6f      	bgt.n	8007414 <_dtoa_r+0x974>
 8007334:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007336:	2b02      	cmp	r3, #2
 8007338:	dc49      	bgt.n	80073ce <_dtoa_r+0x92e>
 800733a:	e06b      	b.n	8007414 <_dtoa_r+0x974>
 800733c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800733e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007342:	e73c      	b.n	80071be <_dtoa_r+0x71e>
 8007344:	3fe00000 	.word	0x3fe00000
 8007348:	40240000 	.word	0x40240000
 800734c:	9b08      	ldr	r3, [sp, #32]
 800734e:	1e5c      	subs	r4, r3, #1
 8007350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007352:	42a3      	cmp	r3, r4
 8007354:	db09      	blt.n	800736a <_dtoa_r+0x8ca>
 8007356:	1b1c      	subs	r4, r3, r4
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f6bf af30 	bge.w	80071c0 <_dtoa_r+0x720>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	9a08      	ldr	r2, [sp, #32]
 8007364:	1a9e      	subs	r6, r3, r2
 8007366:	2300      	movs	r3, #0
 8007368:	e72b      	b.n	80071c2 <_dtoa_r+0x722>
 800736a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800736c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800736e:	1ae3      	subs	r3, r4, r3
 8007370:	441a      	add	r2, r3
 8007372:	940a      	str	r4, [sp, #40]	@ 0x28
 8007374:	9e04      	ldr	r6, [sp, #16]
 8007376:	2400      	movs	r4, #0
 8007378:	9b08      	ldr	r3, [sp, #32]
 800737a:	920e      	str	r2, [sp, #56]	@ 0x38
 800737c:	e721      	b.n	80071c2 <_dtoa_r+0x722>
 800737e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007380:	9e04      	ldr	r6, [sp, #16]
 8007382:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007384:	e728      	b.n	80071d8 <_dtoa_r+0x738>
 8007386:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800738a:	e751      	b.n	8007230 <_dtoa_r+0x790>
 800738c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800738e:	9903      	ldr	r1, [sp, #12]
 8007390:	e750      	b.n	8007234 <_dtoa_r+0x794>
 8007392:	f8cd 800c 	str.w	r8, [sp, #12]
 8007396:	e751      	b.n	800723c <_dtoa_r+0x79c>
 8007398:	2300      	movs	r3, #0
 800739a:	e779      	b.n	8007290 <_dtoa_r+0x7f0>
 800739c:	9b06      	ldr	r3, [sp, #24]
 800739e:	e777      	b.n	8007290 <_dtoa_r+0x7f0>
 80073a0:	2300      	movs	r3, #0
 80073a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a4:	e779      	b.n	800729a <_dtoa_r+0x7fa>
 80073a6:	d093      	beq.n	80072d0 <_dtoa_r+0x830>
 80073a8:	9a04      	ldr	r2, [sp, #16]
 80073aa:	331c      	adds	r3, #28
 80073ac:	441a      	add	r2, r3
 80073ae:	9204      	str	r2, [sp, #16]
 80073b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b2:	441e      	add	r6, r3
 80073b4:	441a      	add	r2, r3
 80073b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b8:	e78a      	b.n	80072d0 <_dtoa_r+0x830>
 80073ba:	4603      	mov	r3, r0
 80073bc:	e7f4      	b.n	80073a8 <_dtoa_r+0x908>
 80073be:	9b08      	ldr	r3, [sp, #32]
 80073c0:	46b8      	mov	r8, r7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dc20      	bgt.n	8007408 <_dtoa_r+0x968>
 80073c6:	469b      	mov	fp, r3
 80073c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	dd1e      	ble.n	800740c <_dtoa_r+0x96c>
 80073ce:	f1bb 0f00 	cmp.w	fp, #0
 80073d2:	f47f adb1 	bne.w	8006f38 <_dtoa_r+0x498>
 80073d6:	4621      	mov	r1, r4
 80073d8:	465b      	mov	r3, fp
 80073da:	2205      	movs	r2, #5
 80073dc:	4648      	mov	r0, r9
 80073de:	f000 fa93 	bl	8007908 <__multadd>
 80073e2:	4601      	mov	r1, r0
 80073e4:	4604      	mov	r4, r0
 80073e6:	9803      	ldr	r0, [sp, #12]
 80073e8:	f000 fce8 	bl	8007dbc <__mcmp>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f77f ada3 	ble.w	8006f38 <_dtoa_r+0x498>
 80073f2:	4656      	mov	r6, sl
 80073f4:	2331      	movs	r3, #49	@ 0x31
 80073f6:	f108 0801 	add.w	r8, r8, #1
 80073fa:	f806 3b01 	strb.w	r3, [r6], #1
 80073fe:	e59f      	b.n	8006f40 <_dtoa_r+0x4a0>
 8007400:	46b8      	mov	r8, r7
 8007402:	9c08      	ldr	r4, [sp, #32]
 8007404:	4625      	mov	r5, r4
 8007406:	e7f4      	b.n	80073f2 <_dtoa_r+0x952>
 8007408:	f8dd b020 	ldr.w	fp, [sp, #32]
 800740c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8101 	beq.w	8007616 <_dtoa_r+0xb76>
 8007414:	2e00      	cmp	r6, #0
 8007416:	dd05      	ble.n	8007424 <_dtoa_r+0x984>
 8007418:	4629      	mov	r1, r5
 800741a:	4632      	mov	r2, r6
 800741c:	4648      	mov	r0, r9
 800741e:	f000 fc61 	bl	8007ce4 <__lshift>
 8007422:	4605      	mov	r5, r0
 8007424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d05c      	beq.n	80074e4 <_dtoa_r+0xa44>
 800742a:	4648      	mov	r0, r9
 800742c:	6869      	ldr	r1, [r5, #4]
 800742e:	f000 fa09 	bl	8007844 <_Balloc>
 8007432:	4606      	mov	r6, r0
 8007434:	b928      	cbnz	r0, 8007442 <_dtoa_r+0x9a2>
 8007436:	4602      	mov	r2, r0
 8007438:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800743c:	4b80      	ldr	r3, [pc, #512]	@ (8007640 <_dtoa_r+0xba0>)
 800743e:	f7ff bb43 	b.w	8006ac8 <_dtoa_r+0x28>
 8007442:	692a      	ldr	r2, [r5, #16]
 8007444:	f105 010c 	add.w	r1, r5, #12
 8007448:	3202      	adds	r2, #2
 800744a:	0092      	lsls	r2, r2, #2
 800744c:	300c      	adds	r0, #12
 800744e:	f001 ff51 	bl	80092f4 <memcpy>
 8007452:	2201      	movs	r2, #1
 8007454:	4631      	mov	r1, r6
 8007456:	4648      	mov	r0, r9
 8007458:	f000 fc44 	bl	8007ce4 <__lshift>
 800745c:	462f      	mov	r7, r5
 800745e:	4605      	mov	r5, r0
 8007460:	f10a 0301 	add.w	r3, sl, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	eb0a 030b 	add.w	r3, sl, fp
 800746a:	930a      	str	r3, [sp, #40]	@ 0x28
 800746c:	9b06      	ldr	r3, [sp, #24]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	9309      	str	r3, [sp, #36]	@ 0x24
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	4621      	mov	r1, r4
 8007478:	9803      	ldr	r0, [sp, #12]
 800747a:	f103 3bff 	add.w	fp, r3, #4294967295
 800747e:	f7ff fa87 	bl	8006990 <quorem>
 8007482:	4603      	mov	r3, r0
 8007484:	4639      	mov	r1, r7
 8007486:	3330      	adds	r3, #48	@ 0x30
 8007488:	9006      	str	r0, [sp, #24]
 800748a:	9803      	ldr	r0, [sp, #12]
 800748c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748e:	f000 fc95 	bl	8007dbc <__mcmp>
 8007492:	462a      	mov	r2, r5
 8007494:	9008      	str	r0, [sp, #32]
 8007496:	4621      	mov	r1, r4
 8007498:	4648      	mov	r0, r9
 800749a:	f000 fcab 	bl	8007df4 <__mdiff>
 800749e:	68c2      	ldr	r2, [r0, #12]
 80074a0:	4606      	mov	r6, r0
 80074a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a4:	bb02      	cbnz	r2, 80074e8 <_dtoa_r+0xa48>
 80074a6:	4601      	mov	r1, r0
 80074a8:	9803      	ldr	r0, [sp, #12]
 80074aa:	f000 fc87 	bl	8007dbc <__mcmp>
 80074ae:	4602      	mov	r2, r0
 80074b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b2:	4631      	mov	r1, r6
 80074b4:	4648      	mov	r0, r9
 80074b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80074ba:	f000 fa03 	bl	80078c4 <_Bfree>
 80074be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074c2:	9e04      	ldr	r6, [sp, #16]
 80074c4:	ea42 0103 	orr.w	r1, r2, r3
 80074c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ca:	4319      	orrs	r1, r3
 80074cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ce:	d10d      	bne.n	80074ec <_dtoa_r+0xa4c>
 80074d0:	2b39      	cmp	r3, #57	@ 0x39
 80074d2:	d027      	beq.n	8007524 <_dtoa_r+0xa84>
 80074d4:	9a08      	ldr	r2, [sp, #32]
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	dd01      	ble.n	80074de <_dtoa_r+0xa3e>
 80074da:	9b06      	ldr	r3, [sp, #24]
 80074dc:	3331      	adds	r3, #49	@ 0x31
 80074de:	f88b 3000 	strb.w	r3, [fp]
 80074e2:	e52e      	b.n	8006f42 <_dtoa_r+0x4a2>
 80074e4:	4628      	mov	r0, r5
 80074e6:	e7b9      	b.n	800745c <_dtoa_r+0x9bc>
 80074e8:	2201      	movs	r2, #1
 80074ea:	e7e2      	b.n	80074b2 <_dtoa_r+0xa12>
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	2900      	cmp	r1, #0
 80074f0:	db04      	blt.n	80074fc <_dtoa_r+0xa5c>
 80074f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80074f4:	4301      	orrs	r1, r0
 80074f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f8:	4301      	orrs	r1, r0
 80074fa:	d120      	bne.n	800753e <_dtoa_r+0xa9e>
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	ddee      	ble.n	80074de <_dtoa_r+0xa3e>
 8007500:	2201      	movs	r2, #1
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	4648      	mov	r0, r9
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	f000 fbec 	bl	8007ce4 <__lshift>
 800750c:	4621      	mov	r1, r4
 800750e:	9003      	str	r0, [sp, #12]
 8007510:	f000 fc54 	bl	8007dbc <__mcmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	dc02      	bgt.n	8007520 <_dtoa_r+0xa80>
 800751a:	d1e0      	bne.n	80074de <_dtoa_r+0xa3e>
 800751c:	07da      	lsls	r2, r3, #31
 800751e:	d5de      	bpl.n	80074de <_dtoa_r+0xa3e>
 8007520:	2b39      	cmp	r3, #57	@ 0x39
 8007522:	d1da      	bne.n	80074da <_dtoa_r+0xa3a>
 8007524:	2339      	movs	r3, #57	@ 0x39
 8007526:	f88b 3000 	strb.w	r3, [fp]
 800752a:	4633      	mov	r3, r6
 800752c:	461e      	mov	r6, r3
 800752e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007532:	3b01      	subs	r3, #1
 8007534:	2a39      	cmp	r2, #57	@ 0x39
 8007536:	d04e      	beq.n	80075d6 <_dtoa_r+0xb36>
 8007538:	3201      	adds	r2, #1
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e501      	b.n	8006f42 <_dtoa_r+0x4a2>
 800753e:	2a00      	cmp	r2, #0
 8007540:	dd03      	ble.n	800754a <_dtoa_r+0xaaa>
 8007542:	2b39      	cmp	r3, #57	@ 0x39
 8007544:	d0ee      	beq.n	8007524 <_dtoa_r+0xa84>
 8007546:	3301      	adds	r3, #1
 8007548:	e7c9      	b.n	80074de <_dtoa_r+0xa3e>
 800754a:	9a04      	ldr	r2, [sp, #16]
 800754c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800754e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007552:	428a      	cmp	r2, r1
 8007554:	d028      	beq.n	80075a8 <_dtoa_r+0xb08>
 8007556:	2300      	movs	r3, #0
 8007558:	220a      	movs	r2, #10
 800755a:	9903      	ldr	r1, [sp, #12]
 800755c:	4648      	mov	r0, r9
 800755e:	f000 f9d3 	bl	8007908 <__multadd>
 8007562:	42af      	cmp	r7, r5
 8007564:	9003      	str	r0, [sp, #12]
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	f04f 020a 	mov.w	r2, #10
 800756e:	4639      	mov	r1, r7
 8007570:	4648      	mov	r0, r9
 8007572:	d107      	bne.n	8007584 <_dtoa_r+0xae4>
 8007574:	f000 f9c8 	bl	8007908 <__multadd>
 8007578:	4607      	mov	r7, r0
 800757a:	4605      	mov	r5, r0
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	3301      	adds	r3, #1
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	e777      	b.n	8007474 <_dtoa_r+0x9d4>
 8007584:	f000 f9c0 	bl	8007908 <__multadd>
 8007588:	4629      	mov	r1, r5
 800758a:	4607      	mov	r7, r0
 800758c:	2300      	movs	r3, #0
 800758e:	220a      	movs	r2, #10
 8007590:	4648      	mov	r0, r9
 8007592:	f000 f9b9 	bl	8007908 <__multadd>
 8007596:	4605      	mov	r5, r0
 8007598:	e7f0      	b.n	800757c <_dtoa_r+0xadc>
 800759a:	f1bb 0f00 	cmp.w	fp, #0
 800759e:	bfcc      	ite	gt
 80075a0:	465e      	movgt	r6, fp
 80075a2:	2601      	movle	r6, #1
 80075a4:	2700      	movs	r7, #0
 80075a6:	4456      	add	r6, sl
 80075a8:	2201      	movs	r2, #1
 80075aa:	9903      	ldr	r1, [sp, #12]
 80075ac:	4648      	mov	r0, r9
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	f000 fb98 	bl	8007ce4 <__lshift>
 80075b4:	4621      	mov	r1, r4
 80075b6:	9003      	str	r0, [sp, #12]
 80075b8:	f000 fc00 	bl	8007dbc <__mcmp>
 80075bc:	2800      	cmp	r0, #0
 80075be:	dcb4      	bgt.n	800752a <_dtoa_r+0xa8a>
 80075c0:	d102      	bne.n	80075c8 <_dtoa_r+0xb28>
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	07db      	lsls	r3, r3, #31
 80075c6:	d4b0      	bmi.n	800752a <_dtoa_r+0xa8a>
 80075c8:	4633      	mov	r3, r6
 80075ca:	461e      	mov	r6, r3
 80075cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075d0:	2a30      	cmp	r2, #48	@ 0x30
 80075d2:	d0fa      	beq.n	80075ca <_dtoa_r+0xb2a>
 80075d4:	e4b5      	b.n	8006f42 <_dtoa_r+0x4a2>
 80075d6:	459a      	cmp	sl, r3
 80075d8:	d1a8      	bne.n	800752c <_dtoa_r+0xa8c>
 80075da:	2331      	movs	r3, #49	@ 0x31
 80075dc:	f108 0801 	add.w	r8, r8, #1
 80075e0:	f88a 3000 	strb.w	r3, [sl]
 80075e4:	e4ad      	b.n	8006f42 <_dtoa_r+0x4a2>
 80075e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007644 <_dtoa_r+0xba4>
 80075ec:	b11b      	cbz	r3, 80075f6 <_dtoa_r+0xb56>
 80075ee:	f10a 0308 	add.w	r3, sl, #8
 80075f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4650      	mov	r0, sl
 80075f8:	b017      	add	sp, #92	@ 0x5c
 80075fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007600:	2b01      	cmp	r3, #1
 8007602:	f77f ae2e 	ble.w	8007262 <_dtoa_r+0x7c2>
 8007606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007608:	930a      	str	r3, [sp, #40]	@ 0x28
 800760a:	2001      	movs	r0, #1
 800760c:	e64d      	b.n	80072aa <_dtoa_r+0x80a>
 800760e:	f1bb 0f00 	cmp.w	fp, #0
 8007612:	f77f aed9 	ble.w	80073c8 <_dtoa_r+0x928>
 8007616:	4656      	mov	r6, sl
 8007618:	4621      	mov	r1, r4
 800761a:	9803      	ldr	r0, [sp, #12]
 800761c:	f7ff f9b8 	bl	8006990 <quorem>
 8007620:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007624:	f806 3b01 	strb.w	r3, [r6], #1
 8007628:	eba6 020a 	sub.w	r2, r6, sl
 800762c:	4593      	cmp	fp, r2
 800762e:	ddb4      	ble.n	800759a <_dtoa_r+0xafa>
 8007630:	2300      	movs	r3, #0
 8007632:	220a      	movs	r2, #10
 8007634:	4648      	mov	r0, r9
 8007636:	9903      	ldr	r1, [sp, #12]
 8007638:	f000 f966 	bl	8007908 <__multadd>
 800763c:	9003      	str	r0, [sp, #12]
 800763e:	e7eb      	b.n	8007618 <_dtoa_r+0xb78>
 8007640:	0800a127 	.word	0x0800a127
 8007644:	0800a0ab 	.word	0x0800a0ab

08007648 <_free_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4605      	mov	r5, r0
 800764c:	2900      	cmp	r1, #0
 800764e:	d040      	beq.n	80076d2 <_free_r+0x8a>
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f0c      	subs	r4, r1, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfb8      	it	lt
 800765a:	18e4      	addlt	r4, r4, r3
 800765c:	f000 f8e6 	bl	800782c <__malloc_lock>
 8007660:	4a1c      	ldr	r2, [pc, #112]	@ (80076d4 <_free_r+0x8c>)
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	b933      	cbnz	r3, 8007674 <_free_r+0x2c>
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	6014      	str	r4, [r2, #0]
 800766a:	4628      	mov	r0, r5
 800766c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007670:	f000 b8e2 	b.w	8007838 <__malloc_unlock>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d908      	bls.n	800768a <_free_r+0x42>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	1821      	adds	r1, r4, r0
 800767c:	428b      	cmp	r3, r1
 800767e:	bf01      	itttt	eq
 8007680:	6819      	ldreq	r1, [r3, #0]
 8007682:	685b      	ldreq	r3, [r3, #4]
 8007684:	1809      	addeq	r1, r1, r0
 8007686:	6021      	streq	r1, [r4, #0]
 8007688:	e7ed      	b.n	8007666 <_free_r+0x1e>
 800768a:	461a      	mov	r2, r3
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b10b      	cbz	r3, 8007694 <_free_r+0x4c>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d9fa      	bls.n	800768a <_free_r+0x42>
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	1850      	adds	r0, r2, r1
 8007698:	42a0      	cmp	r0, r4
 800769a:	d10b      	bne.n	80076b4 <_free_r+0x6c>
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	4401      	add	r1, r0
 80076a0:	1850      	adds	r0, r2, r1
 80076a2:	4283      	cmp	r3, r0
 80076a4:	6011      	str	r1, [r2, #0]
 80076a6:	d1e0      	bne.n	800766a <_free_r+0x22>
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4408      	add	r0, r1
 80076ae:	6010      	str	r0, [r2, #0]
 80076b0:	6053      	str	r3, [r2, #4]
 80076b2:	e7da      	b.n	800766a <_free_r+0x22>
 80076b4:	d902      	bls.n	80076bc <_free_r+0x74>
 80076b6:	230c      	movs	r3, #12
 80076b8:	602b      	str	r3, [r5, #0]
 80076ba:	e7d6      	b.n	800766a <_free_r+0x22>
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	1821      	adds	r1, r4, r0
 80076c0:	428b      	cmp	r3, r1
 80076c2:	bf01      	itttt	eq
 80076c4:	6819      	ldreq	r1, [r3, #0]
 80076c6:	685b      	ldreq	r3, [r3, #4]
 80076c8:	1809      	addeq	r1, r1, r0
 80076ca:	6021      	streq	r1, [r4, #0]
 80076cc:	6063      	str	r3, [r4, #4]
 80076ce:	6054      	str	r4, [r2, #4]
 80076d0:	e7cb      	b.n	800766a <_free_r+0x22>
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	200003ec 	.word	0x200003ec

080076d8 <malloc>:
 80076d8:	4b02      	ldr	r3, [pc, #8]	@ (80076e4 <malloc+0xc>)
 80076da:	4601      	mov	r1, r0
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	f000 b825 	b.w	800772c <_malloc_r>
 80076e2:	bf00      	nop
 80076e4:	20000020 	.word	0x20000020

080076e8 <sbrk_aligned>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007728 <sbrk_aligned+0x40>)
 80076ec:	460c      	mov	r4, r1
 80076ee:	6831      	ldr	r1, [r6, #0]
 80076f0:	4605      	mov	r5, r0
 80076f2:	b911      	cbnz	r1, 80076fa <sbrk_aligned+0x12>
 80076f4:	f001 fdee 	bl	80092d4 <_sbrk_r>
 80076f8:	6030      	str	r0, [r6, #0]
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f001 fde9 	bl	80092d4 <_sbrk_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d103      	bne.n	800770e <sbrk_aligned+0x26>
 8007706:	f04f 34ff 	mov.w	r4, #4294967295
 800770a:	4620      	mov	r0, r4
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	1cc4      	adds	r4, r0, #3
 8007710:	f024 0403 	bic.w	r4, r4, #3
 8007714:	42a0      	cmp	r0, r4
 8007716:	d0f8      	beq.n	800770a <sbrk_aligned+0x22>
 8007718:	1a21      	subs	r1, r4, r0
 800771a:	4628      	mov	r0, r5
 800771c:	f001 fdda 	bl	80092d4 <_sbrk_r>
 8007720:	3001      	adds	r0, #1
 8007722:	d1f2      	bne.n	800770a <sbrk_aligned+0x22>
 8007724:	e7ef      	b.n	8007706 <sbrk_aligned+0x1e>
 8007726:	bf00      	nop
 8007728:	200003e8 	.word	0x200003e8

0800772c <_malloc_r>:
 800772c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007730:	1ccd      	adds	r5, r1, #3
 8007732:	f025 0503 	bic.w	r5, r5, #3
 8007736:	3508      	adds	r5, #8
 8007738:	2d0c      	cmp	r5, #12
 800773a:	bf38      	it	cc
 800773c:	250c      	movcc	r5, #12
 800773e:	2d00      	cmp	r5, #0
 8007740:	4606      	mov	r6, r0
 8007742:	db01      	blt.n	8007748 <_malloc_r+0x1c>
 8007744:	42a9      	cmp	r1, r5
 8007746:	d904      	bls.n	8007752 <_malloc_r+0x26>
 8007748:	230c      	movs	r3, #12
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	2000      	movs	r0, #0
 800774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007828 <_malloc_r+0xfc>
 8007756:	f000 f869 	bl	800782c <__malloc_lock>
 800775a:	f8d8 3000 	ldr.w	r3, [r8]
 800775e:	461c      	mov	r4, r3
 8007760:	bb44      	cbnz	r4, 80077b4 <_malloc_r+0x88>
 8007762:	4629      	mov	r1, r5
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff ffbf 	bl	80076e8 <sbrk_aligned>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	4604      	mov	r4, r0
 800776e:	d158      	bne.n	8007822 <_malloc_r+0xf6>
 8007770:	f8d8 4000 	ldr.w	r4, [r8]
 8007774:	4627      	mov	r7, r4
 8007776:	2f00      	cmp	r7, #0
 8007778:	d143      	bne.n	8007802 <_malloc_r+0xd6>
 800777a:	2c00      	cmp	r4, #0
 800777c:	d04b      	beq.n	8007816 <_malloc_r+0xea>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	4639      	mov	r1, r7
 8007782:	4630      	mov	r0, r6
 8007784:	eb04 0903 	add.w	r9, r4, r3
 8007788:	f001 fda4 	bl	80092d4 <_sbrk_r>
 800778c:	4581      	cmp	r9, r0
 800778e:	d142      	bne.n	8007816 <_malloc_r+0xea>
 8007790:	6821      	ldr	r1, [r4, #0]
 8007792:	4630      	mov	r0, r6
 8007794:	1a6d      	subs	r5, r5, r1
 8007796:	4629      	mov	r1, r5
 8007798:	f7ff ffa6 	bl	80076e8 <sbrk_aligned>
 800779c:	3001      	adds	r0, #1
 800779e:	d03a      	beq.n	8007816 <_malloc_r+0xea>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	442b      	add	r3, r5
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	f8d8 3000 	ldr.w	r3, [r8]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	bb62      	cbnz	r2, 8007808 <_malloc_r+0xdc>
 80077ae:	f8c8 7000 	str.w	r7, [r8]
 80077b2:	e00f      	b.n	80077d4 <_malloc_r+0xa8>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	1b52      	subs	r2, r2, r5
 80077b8:	d420      	bmi.n	80077fc <_malloc_r+0xd0>
 80077ba:	2a0b      	cmp	r2, #11
 80077bc:	d917      	bls.n	80077ee <_malloc_r+0xc2>
 80077be:	1961      	adds	r1, r4, r5
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	bf18      	it	ne
 80077c6:	6059      	strne	r1, [r3, #4]
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	bf08      	it	eq
 80077cc:	f8c8 1000 	streq.w	r1, [r8]
 80077d0:	5162      	str	r2, [r4, r5]
 80077d2:	604b      	str	r3, [r1, #4]
 80077d4:	4630      	mov	r0, r6
 80077d6:	f000 f82f 	bl	8007838 <__malloc_unlock>
 80077da:	f104 000b 	add.w	r0, r4, #11
 80077de:	1d23      	adds	r3, r4, #4
 80077e0:	f020 0007 	bic.w	r0, r0, #7
 80077e4:	1ac2      	subs	r2, r0, r3
 80077e6:	bf1c      	itt	ne
 80077e8:	1a1b      	subne	r3, r3, r0
 80077ea:	50a3      	strne	r3, [r4, r2]
 80077ec:	e7af      	b.n	800774e <_malloc_r+0x22>
 80077ee:	6862      	ldr	r2, [r4, #4]
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	bf0c      	ite	eq
 80077f4:	f8c8 2000 	streq.w	r2, [r8]
 80077f8:	605a      	strne	r2, [r3, #4]
 80077fa:	e7eb      	b.n	80077d4 <_malloc_r+0xa8>
 80077fc:	4623      	mov	r3, r4
 80077fe:	6864      	ldr	r4, [r4, #4]
 8007800:	e7ae      	b.n	8007760 <_malloc_r+0x34>
 8007802:	463c      	mov	r4, r7
 8007804:	687f      	ldr	r7, [r7, #4]
 8007806:	e7b6      	b.n	8007776 <_malloc_r+0x4a>
 8007808:	461a      	mov	r2, r3
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	42a3      	cmp	r3, r4
 800780e:	d1fb      	bne.n	8007808 <_malloc_r+0xdc>
 8007810:	2300      	movs	r3, #0
 8007812:	6053      	str	r3, [r2, #4]
 8007814:	e7de      	b.n	80077d4 <_malloc_r+0xa8>
 8007816:	230c      	movs	r3, #12
 8007818:	4630      	mov	r0, r6
 800781a:	6033      	str	r3, [r6, #0]
 800781c:	f000 f80c 	bl	8007838 <__malloc_unlock>
 8007820:	e794      	b.n	800774c <_malloc_r+0x20>
 8007822:	6005      	str	r5, [r0, #0]
 8007824:	e7d6      	b.n	80077d4 <_malloc_r+0xa8>
 8007826:	bf00      	nop
 8007828:	200003ec 	.word	0x200003ec

0800782c <__malloc_lock>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__malloc_lock+0x8>)
 800782e:	f7ff b89a 	b.w	8006966 <__retarget_lock_acquire_recursive>
 8007832:	bf00      	nop
 8007834:	200003e4 	.word	0x200003e4

08007838 <__malloc_unlock>:
 8007838:	4801      	ldr	r0, [pc, #4]	@ (8007840 <__malloc_unlock+0x8>)
 800783a:	f7ff b895 	b.w	8006968 <__retarget_lock_release_recursive>
 800783e:	bf00      	nop
 8007840:	200003e4 	.word	0x200003e4

08007844 <_Balloc>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	69c6      	ldr	r6, [r0, #28]
 8007848:	4604      	mov	r4, r0
 800784a:	460d      	mov	r5, r1
 800784c:	b976      	cbnz	r6, 800786c <_Balloc+0x28>
 800784e:	2010      	movs	r0, #16
 8007850:	f7ff ff42 	bl	80076d8 <malloc>
 8007854:	4602      	mov	r2, r0
 8007856:	61e0      	str	r0, [r4, #28]
 8007858:	b920      	cbnz	r0, 8007864 <_Balloc+0x20>
 800785a:	216b      	movs	r1, #107	@ 0x6b
 800785c:	4b17      	ldr	r3, [pc, #92]	@ (80078bc <_Balloc+0x78>)
 800785e:	4818      	ldr	r0, [pc, #96]	@ (80078c0 <_Balloc+0x7c>)
 8007860:	f001 fd5c 	bl	800931c <__assert_func>
 8007864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007868:	6006      	str	r6, [r0, #0]
 800786a:	60c6      	str	r6, [r0, #12]
 800786c:	69e6      	ldr	r6, [r4, #28]
 800786e:	68f3      	ldr	r3, [r6, #12]
 8007870:	b183      	cbz	r3, 8007894 <_Balloc+0x50>
 8007872:	69e3      	ldr	r3, [r4, #28]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800787a:	b9b8      	cbnz	r0, 80078ac <_Balloc+0x68>
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f605 	lsl.w	r6, r1, r5
 8007882:	1d72      	adds	r2, r6, #5
 8007884:	4620      	mov	r0, r4
 8007886:	0092      	lsls	r2, r2, #2
 8007888:	f001 fd66 	bl	8009358 <_calloc_r>
 800788c:	b160      	cbz	r0, 80078a8 <_Balloc+0x64>
 800788e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007892:	e00e      	b.n	80078b2 <_Balloc+0x6e>
 8007894:	2221      	movs	r2, #33	@ 0x21
 8007896:	2104      	movs	r1, #4
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fd5d 	bl	8009358 <_calloc_r>
 800789e:	69e3      	ldr	r3, [r4, #28]
 80078a0:	60f0      	str	r0, [r6, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e4      	bne.n	8007872 <_Balloc+0x2e>
 80078a8:	2000      	movs	r0, #0
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	6802      	ldr	r2, [r0, #0]
 80078ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078b2:	2300      	movs	r3, #0
 80078b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078b8:	e7f7      	b.n	80078aa <_Balloc+0x66>
 80078ba:	bf00      	nop
 80078bc:	0800a0b8 	.word	0x0800a0b8
 80078c0:	0800a138 	.word	0x0800a138

080078c4 <_Bfree>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	69c6      	ldr	r6, [r0, #28]
 80078c8:	4605      	mov	r5, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	b976      	cbnz	r6, 80078ec <_Bfree+0x28>
 80078ce:	2010      	movs	r0, #16
 80078d0:	f7ff ff02 	bl	80076d8 <malloc>
 80078d4:	4602      	mov	r2, r0
 80078d6:	61e8      	str	r0, [r5, #28]
 80078d8:	b920      	cbnz	r0, 80078e4 <_Bfree+0x20>
 80078da:	218f      	movs	r1, #143	@ 0x8f
 80078dc:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <_Bfree+0x3c>)
 80078de:	4809      	ldr	r0, [pc, #36]	@ (8007904 <_Bfree+0x40>)
 80078e0:	f001 fd1c 	bl	800931c <__assert_func>
 80078e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e8:	6006      	str	r6, [r0, #0]
 80078ea:	60c6      	str	r6, [r0, #12]
 80078ec:	b13c      	cbz	r4, 80078fe <_Bfree+0x3a>
 80078ee:	69eb      	ldr	r3, [r5, #28]
 80078f0:	6862      	ldr	r2, [r4, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078f8:	6021      	str	r1, [r4, #0]
 80078fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	0800a0b8 	.word	0x0800a0b8
 8007904:	0800a138 	.word	0x0800a138

08007908 <__multadd>:
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4607      	mov	r7, r0
 800790e:	460c      	mov	r4, r1
 8007910:	461e      	mov	r6, r3
 8007912:	2000      	movs	r0, #0
 8007914:	690d      	ldr	r5, [r1, #16]
 8007916:	f101 0c14 	add.w	ip, r1, #20
 800791a:	f8dc 3000 	ldr.w	r3, [ip]
 800791e:	3001      	adds	r0, #1
 8007920:	b299      	uxth	r1, r3
 8007922:	fb02 6101 	mla	r1, r2, r1, r6
 8007926:	0c1e      	lsrs	r6, r3, #16
 8007928:	0c0b      	lsrs	r3, r1, #16
 800792a:	fb02 3306 	mla	r3, r2, r6, r3
 800792e:	b289      	uxth	r1, r1
 8007930:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007934:	4285      	cmp	r5, r0
 8007936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800793a:	f84c 1b04 	str.w	r1, [ip], #4
 800793e:	dcec      	bgt.n	800791a <__multadd+0x12>
 8007940:	b30e      	cbz	r6, 8007986 <__multadd+0x7e>
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc19      	bgt.n	800797c <__multadd+0x74>
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	4638      	mov	r0, r7
 800794c:	3101      	adds	r1, #1
 800794e:	f7ff ff79 	bl	8007844 <_Balloc>
 8007952:	4680      	mov	r8, r0
 8007954:	b928      	cbnz	r0, 8007962 <__multadd+0x5a>
 8007956:	4602      	mov	r2, r0
 8007958:	21ba      	movs	r1, #186	@ 0xba
 800795a:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <__multadd+0x84>)
 800795c:	480c      	ldr	r0, [pc, #48]	@ (8007990 <__multadd+0x88>)
 800795e:	f001 fcdd 	bl	800931c <__assert_func>
 8007962:	6922      	ldr	r2, [r4, #16]
 8007964:	f104 010c 	add.w	r1, r4, #12
 8007968:	3202      	adds	r2, #2
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	300c      	adds	r0, #12
 800796e:	f001 fcc1 	bl	80092f4 <memcpy>
 8007972:	4621      	mov	r1, r4
 8007974:	4638      	mov	r0, r7
 8007976:	f7ff ffa5 	bl	80078c4 <_Bfree>
 800797a:	4644      	mov	r4, r8
 800797c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007980:	3501      	adds	r5, #1
 8007982:	615e      	str	r6, [r3, #20]
 8007984:	6125      	str	r5, [r4, #16]
 8007986:	4620      	mov	r0, r4
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	0800a127 	.word	0x0800a127
 8007990:	0800a138 	.word	0x0800a138

08007994 <__s2b>:
 8007994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007998:	4615      	mov	r5, r2
 800799a:	2209      	movs	r2, #9
 800799c:	461f      	mov	r7, r3
 800799e:	3308      	adds	r3, #8
 80079a0:	460c      	mov	r4, r1
 80079a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a6:	4606      	mov	r6, r0
 80079a8:	2201      	movs	r2, #1
 80079aa:	2100      	movs	r1, #0
 80079ac:	429a      	cmp	r2, r3
 80079ae:	db09      	blt.n	80079c4 <__s2b+0x30>
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff ff47 	bl	8007844 <_Balloc>
 80079b6:	b940      	cbnz	r0, 80079ca <__s2b+0x36>
 80079b8:	4602      	mov	r2, r0
 80079ba:	21d3      	movs	r1, #211	@ 0xd3
 80079bc:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <__s2b+0x8c>)
 80079be:	4819      	ldr	r0, [pc, #100]	@ (8007a24 <__s2b+0x90>)
 80079c0:	f001 fcac 	bl	800931c <__assert_func>
 80079c4:	0052      	lsls	r2, r2, #1
 80079c6:	3101      	adds	r1, #1
 80079c8:	e7f0      	b.n	80079ac <__s2b+0x18>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	2d09      	cmp	r5, #9
 80079ce:	6143      	str	r3, [r0, #20]
 80079d0:	f04f 0301 	mov.w	r3, #1
 80079d4:	6103      	str	r3, [r0, #16]
 80079d6:	dd16      	ble.n	8007a06 <__s2b+0x72>
 80079d8:	f104 0909 	add.w	r9, r4, #9
 80079dc:	46c8      	mov	r8, r9
 80079de:	442c      	add	r4, r5
 80079e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079e4:	4601      	mov	r1, r0
 80079e6:	220a      	movs	r2, #10
 80079e8:	4630      	mov	r0, r6
 80079ea:	3b30      	subs	r3, #48	@ 0x30
 80079ec:	f7ff ff8c 	bl	8007908 <__multadd>
 80079f0:	45a0      	cmp	r8, r4
 80079f2:	d1f5      	bne.n	80079e0 <__s2b+0x4c>
 80079f4:	f1a5 0408 	sub.w	r4, r5, #8
 80079f8:	444c      	add	r4, r9
 80079fa:	1b2d      	subs	r5, r5, r4
 80079fc:	1963      	adds	r3, r4, r5
 80079fe:	42bb      	cmp	r3, r7
 8007a00:	db04      	blt.n	8007a0c <__s2b+0x78>
 8007a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a06:	2509      	movs	r5, #9
 8007a08:	340a      	adds	r4, #10
 8007a0a:	e7f6      	b.n	80079fa <__s2b+0x66>
 8007a0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a10:	4601      	mov	r1, r0
 8007a12:	220a      	movs	r2, #10
 8007a14:	4630      	mov	r0, r6
 8007a16:	3b30      	subs	r3, #48	@ 0x30
 8007a18:	f7ff ff76 	bl	8007908 <__multadd>
 8007a1c:	e7ee      	b.n	80079fc <__s2b+0x68>
 8007a1e:	bf00      	nop
 8007a20:	0800a127 	.word	0x0800a127
 8007a24:	0800a138 	.word	0x0800a138

08007a28 <__hi0bits>:
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a2e:	bf3a      	itte	cc
 8007a30:	0403      	lslcc	r3, r0, #16
 8007a32:	2010      	movcc	r0, #16
 8007a34:	2000      	movcs	r0, #0
 8007a36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a3a:	bf3c      	itt	cc
 8007a3c:	021b      	lslcc	r3, r3, #8
 8007a3e:	3008      	addcc	r0, #8
 8007a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a44:	bf3c      	itt	cc
 8007a46:	011b      	lslcc	r3, r3, #4
 8007a48:	3004      	addcc	r0, #4
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4e:	bf3c      	itt	cc
 8007a50:	009b      	lslcc	r3, r3, #2
 8007a52:	3002      	addcc	r0, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	db05      	blt.n	8007a64 <__hi0bits+0x3c>
 8007a58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a5c:	f100 0001 	add.w	r0, r0, #1
 8007a60:	bf08      	it	eq
 8007a62:	2020      	moveq	r0, #32
 8007a64:	4770      	bx	lr

08007a66 <__lo0bits>:
 8007a66:	6803      	ldr	r3, [r0, #0]
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f013 0007 	ands.w	r0, r3, #7
 8007a6e:	d00b      	beq.n	8007a88 <__lo0bits+0x22>
 8007a70:	07d9      	lsls	r1, r3, #31
 8007a72:	d421      	bmi.n	8007ab8 <__lo0bits+0x52>
 8007a74:	0798      	lsls	r0, r3, #30
 8007a76:	bf49      	itett	mi
 8007a78:	085b      	lsrmi	r3, r3, #1
 8007a7a:	089b      	lsrpl	r3, r3, #2
 8007a7c:	2001      	movmi	r0, #1
 8007a7e:	6013      	strmi	r3, [r2, #0]
 8007a80:	bf5c      	itt	pl
 8007a82:	2002      	movpl	r0, #2
 8007a84:	6013      	strpl	r3, [r2, #0]
 8007a86:	4770      	bx	lr
 8007a88:	b299      	uxth	r1, r3
 8007a8a:	b909      	cbnz	r1, 8007a90 <__lo0bits+0x2a>
 8007a8c:	2010      	movs	r0, #16
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	b2d9      	uxtb	r1, r3
 8007a92:	b909      	cbnz	r1, 8007a98 <__lo0bits+0x32>
 8007a94:	3008      	adds	r0, #8
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	0719      	lsls	r1, r3, #28
 8007a9a:	bf04      	itt	eq
 8007a9c:	091b      	lsreq	r3, r3, #4
 8007a9e:	3004      	addeq	r0, #4
 8007aa0:	0799      	lsls	r1, r3, #30
 8007aa2:	bf04      	itt	eq
 8007aa4:	089b      	lsreq	r3, r3, #2
 8007aa6:	3002      	addeq	r0, #2
 8007aa8:	07d9      	lsls	r1, r3, #31
 8007aaa:	d403      	bmi.n	8007ab4 <__lo0bits+0x4e>
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	f100 0001 	add.w	r0, r0, #1
 8007ab2:	d003      	beq.n	8007abc <__lo0bits+0x56>
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	4770      	bx	lr
 8007ab8:	2000      	movs	r0, #0
 8007aba:	4770      	bx	lr
 8007abc:	2020      	movs	r0, #32
 8007abe:	4770      	bx	lr

08007ac0 <__i2b>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	f7ff febd 	bl	8007844 <_Balloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	b928      	cbnz	r0, 8007ada <__i2b+0x1a>
 8007ace:	f240 1145 	movw	r1, #325	@ 0x145
 8007ad2:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <__i2b+0x24>)
 8007ad4:	4804      	ldr	r0, [pc, #16]	@ (8007ae8 <__i2b+0x28>)
 8007ad6:	f001 fc21 	bl	800931c <__assert_func>
 8007ada:	2301      	movs	r3, #1
 8007adc:	6144      	str	r4, [r0, #20]
 8007ade:	6103      	str	r3, [r0, #16]
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	bf00      	nop
 8007ae4:	0800a127 	.word	0x0800a127
 8007ae8:	0800a138 	.word	0x0800a138

08007aec <__multiply>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	4617      	mov	r7, r2
 8007af2:	690a      	ldr	r2, [r1, #16]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4689      	mov	r9, r1
 8007af8:	429a      	cmp	r2, r3
 8007afa:	bfa2      	ittt	ge
 8007afc:	463b      	movge	r3, r7
 8007afe:	460f      	movge	r7, r1
 8007b00:	4699      	movge	r9, r3
 8007b02:	693d      	ldr	r5, [r7, #16]
 8007b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	eb05 060a 	add.w	r6, r5, sl
 8007b10:	42b3      	cmp	r3, r6
 8007b12:	b085      	sub	sp, #20
 8007b14:	bfb8      	it	lt
 8007b16:	3101      	addlt	r1, #1
 8007b18:	f7ff fe94 	bl	8007844 <_Balloc>
 8007b1c:	b930      	cbnz	r0, 8007b2c <__multiply+0x40>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b24:	4b40      	ldr	r3, [pc, #256]	@ (8007c28 <__multiply+0x13c>)
 8007b26:	4841      	ldr	r0, [pc, #260]	@ (8007c2c <__multiply+0x140>)
 8007b28:	f001 fbf8 	bl	800931c <__assert_func>
 8007b2c:	f100 0414 	add.w	r4, r0, #20
 8007b30:	4623      	mov	r3, r4
 8007b32:	2200      	movs	r2, #0
 8007b34:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007b38:	4573      	cmp	r3, lr
 8007b3a:	d320      	bcc.n	8007b7e <__multiply+0x92>
 8007b3c:	f107 0814 	add.w	r8, r7, #20
 8007b40:	f109 0114 	add.w	r1, r9, #20
 8007b44:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b48:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b4c:	9302      	str	r3, [sp, #8]
 8007b4e:	1beb      	subs	r3, r5, r7
 8007b50:	3b15      	subs	r3, #21
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	3304      	adds	r3, #4
 8007b58:	3715      	adds	r7, #21
 8007b5a:	42bd      	cmp	r5, r7
 8007b5c:	bf38      	it	cc
 8007b5e:	2304      	movcc	r3, #4
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	9103      	str	r1, [sp, #12]
 8007b66:	428b      	cmp	r3, r1
 8007b68:	d80c      	bhi.n	8007b84 <__multiply+0x98>
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	dd03      	ble.n	8007b76 <__multiply+0x8a>
 8007b6e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d055      	beq.n	8007c22 <__multiply+0x136>
 8007b76:	6106      	str	r6, [r0, #16]
 8007b78:	b005      	add	sp, #20
 8007b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7e:	f843 2b04 	str.w	r2, [r3], #4
 8007b82:	e7d9      	b.n	8007b38 <__multiply+0x4c>
 8007b84:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	d01f      	beq.n	8007bce <__multiply+0xe2>
 8007b8e:	46c4      	mov	ip, r8
 8007b90:	46a1      	mov	r9, r4
 8007b92:	2700      	movs	r7, #0
 8007b94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b98:	f8d9 3000 	ldr.w	r3, [r9]
 8007b9c:	fa1f fb82 	uxth.w	fp, r2
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ba6:	443b      	add	r3, r7
 8007ba8:	f8d9 7000 	ldr.w	r7, [r9]
 8007bac:	0c12      	lsrs	r2, r2, #16
 8007bae:	0c3f      	lsrs	r7, r7, #16
 8007bb0:	fb0a 7202 	mla	r2, sl, r2, r7
 8007bb4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bbe:	4565      	cmp	r5, ip
 8007bc0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007bc4:	f849 3b04 	str.w	r3, [r9], #4
 8007bc8:	d8e4      	bhi.n	8007b94 <__multiply+0xa8>
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	50e7      	str	r7, [r4, r3]
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	3104      	adds	r1, #4
 8007bd2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bd6:	f1b9 0f00 	cmp.w	r9, #0
 8007bda:	d020      	beq.n	8007c1e <__multiply+0x132>
 8007bdc:	4647      	mov	r7, r8
 8007bde:	46a4      	mov	ip, r4
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	f8b7 b000 	ldrh.w	fp, [r7]
 8007bea:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	fb09 220b 	mla	r2, r9, fp, r2
 8007bf4:	4452      	add	r2, sl
 8007bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bfa:	f84c 3b04 	str.w	r3, [ip], #4
 8007bfe:	f857 3b04 	ldr.w	r3, [r7], #4
 8007c02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c06:	f8bc 3000 	ldrh.w	r3, [ip]
 8007c0a:	42bd      	cmp	r5, r7
 8007c0c:	fb09 330a 	mla	r3, r9, sl, r3
 8007c10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007c14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c18:	d8e5      	bhi.n	8007be6 <__multiply+0xfa>
 8007c1a:	9a01      	ldr	r2, [sp, #4]
 8007c1c:	50a3      	str	r3, [r4, r2]
 8007c1e:	3404      	adds	r4, #4
 8007c20:	e79f      	b.n	8007b62 <__multiply+0x76>
 8007c22:	3e01      	subs	r6, #1
 8007c24:	e7a1      	b.n	8007b6a <__multiply+0x7e>
 8007c26:	bf00      	nop
 8007c28:	0800a127 	.word	0x0800a127
 8007c2c:	0800a138 	.word	0x0800a138

08007c30 <__pow5mult>:
 8007c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c34:	4615      	mov	r5, r2
 8007c36:	f012 0203 	ands.w	r2, r2, #3
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	d007      	beq.n	8007c50 <__pow5mult+0x20>
 8007c40:	4c25      	ldr	r4, [pc, #148]	@ (8007cd8 <__pow5mult+0xa8>)
 8007c42:	3a01      	subs	r2, #1
 8007c44:	2300      	movs	r3, #0
 8007c46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c4a:	f7ff fe5d 	bl	8007908 <__multadd>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	10ad      	asrs	r5, r5, #2
 8007c52:	d03d      	beq.n	8007cd0 <__pow5mult+0xa0>
 8007c54:	69fc      	ldr	r4, [r7, #28]
 8007c56:	b97c      	cbnz	r4, 8007c78 <__pow5mult+0x48>
 8007c58:	2010      	movs	r0, #16
 8007c5a:	f7ff fd3d 	bl	80076d8 <malloc>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	61f8      	str	r0, [r7, #28]
 8007c62:	b928      	cbnz	r0, 8007c70 <__pow5mult+0x40>
 8007c64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c68:	4b1c      	ldr	r3, [pc, #112]	@ (8007cdc <__pow5mult+0xac>)
 8007c6a:	481d      	ldr	r0, [pc, #116]	@ (8007ce0 <__pow5mult+0xb0>)
 8007c6c:	f001 fb56 	bl	800931c <__assert_func>
 8007c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c74:	6004      	str	r4, [r0, #0]
 8007c76:	60c4      	str	r4, [r0, #12]
 8007c78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c80:	b94c      	cbnz	r4, 8007c96 <__pow5mult+0x66>
 8007c82:	f240 2171 	movw	r1, #625	@ 0x271
 8007c86:	4638      	mov	r0, r7
 8007c88:	f7ff ff1a 	bl	8007ac0 <__i2b>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c94:	6003      	str	r3, [r0, #0]
 8007c96:	f04f 0900 	mov.w	r9, #0
 8007c9a:	07eb      	lsls	r3, r5, #31
 8007c9c:	d50a      	bpl.n	8007cb4 <__pow5mult+0x84>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f7ff ff22 	bl	8007aec <__multiply>
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4631      	mov	r1, r6
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff fe09 	bl	80078c4 <_Bfree>
 8007cb2:	4646      	mov	r6, r8
 8007cb4:	106d      	asrs	r5, r5, #1
 8007cb6:	d00b      	beq.n	8007cd0 <__pow5mult+0xa0>
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	b938      	cbnz	r0, 8007ccc <__pow5mult+0x9c>
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7ff ff13 	bl	8007aec <__multiply>
 8007cc6:	6020      	str	r0, [r4, #0]
 8007cc8:	f8c0 9000 	str.w	r9, [r0]
 8007ccc:	4604      	mov	r4, r0
 8007cce:	e7e4      	b.n	8007c9a <__pow5mult+0x6a>
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0800a248 	.word	0x0800a248
 8007cdc:	0800a0b8 	.word	0x0800a0b8
 8007ce0:	0800a138 	.word	0x0800a138

08007ce4 <__lshift>:
 8007ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	460c      	mov	r4, r1
 8007cea:	4607      	mov	r7, r0
 8007cec:	4691      	mov	r9, r2
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6849      	ldr	r1, [r1, #4]
 8007cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cfc:	f108 0601 	add.w	r6, r8, #1
 8007d00:	42b3      	cmp	r3, r6
 8007d02:	db0b      	blt.n	8007d1c <__lshift+0x38>
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff fd9d 	bl	8007844 <_Balloc>
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	b948      	cbnz	r0, 8007d22 <__lshift+0x3e>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d14:	4b27      	ldr	r3, [pc, #156]	@ (8007db4 <__lshift+0xd0>)
 8007d16:	4828      	ldr	r0, [pc, #160]	@ (8007db8 <__lshift+0xd4>)
 8007d18:	f001 fb00 	bl	800931c <__assert_func>
 8007d1c:	3101      	adds	r1, #1
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	e7ee      	b.n	8007d00 <__lshift+0x1c>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f100 0114 	add.w	r1, r0, #20
 8007d28:	f100 0210 	add.w	r2, r0, #16
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	4553      	cmp	r3, sl
 8007d30:	db33      	blt.n	8007d9a <__lshift+0xb6>
 8007d32:	6920      	ldr	r0, [r4, #16]
 8007d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d38:	f104 0314 	add.w	r3, r4, #20
 8007d3c:	f019 091f 	ands.w	r9, r9, #31
 8007d40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d48:	d02b      	beq.n	8007da2 <__lshift+0xbe>
 8007d4a:	468a      	mov	sl, r1
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	fa00 f009 	lsl.w	r0, r0, r9
 8007d58:	4310      	orrs	r0, r2
 8007d5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d62:	459c      	cmp	ip, r3
 8007d64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d68:	d8f3      	bhi.n	8007d52 <__lshift+0x6e>
 8007d6a:	ebac 0304 	sub.w	r3, ip, r4
 8007d6e:	3b15      	subs	r3, #21
 8007d70:	f023 0303 	bic.w	r3, r3, #3
 8007d74:	3304      	adds	r3, #4
 8007d76:	f104 0015 	add.w	r0, r4, #21
 8007d7a:	4560      	cmp	r0, ip
 8007d7c:	bf88      	it	hi
 8007d7e:	2304      	movhi	r3, #4
 8007d80:	50ca      	str	r2, [r1, r3]
 8007d82:	b10a      	cbz	r2, 8007d88 <__lshift+0xa4>
 8007d84:	f108 0602 	add.w	r6, r8, #2
 8007d88:	3e01      	subs	r6, #1
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	612e      	str	r6, [r5, #16]
 8007d90:	f7ff fd98 	bl	80078c4 <_Bfree>
 8007d94:	4628      	mov	r0, r5
 8007d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d9e:	3301      	adds	r3, #1
 8007da0:	e7c5      	b.n	8007d2e <__lshift+0x4a>
 8007da2:	3904      	subs	r1, #4
 8007da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da8:	459c      	cmp	ip, r3
 8007daa:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dae:	d8f9      	bhi.n	8007da4 <__lshift+0xc0>
 8007db0:	e7ea      	b.n	8007d88 <__lshift+0xa4>
 8007db2:	bf00      	nop
 8007db4:	0800a127 	.word	0x0800a127
 8007db8:	0800a138 	.word	0x0800a138

08007dbc <__mcmp>:
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	690a      	ldr	r2, [r1, #16]
 8007dc0:	6900      	ldr	r0, [r0, #16]
 8007dc2:	b530      	push	{r4, r5, lr}
 8007dc4:	1a80      	subs	r0, r0, r2
 8007dc6:	d10e      	bne.n	8007de6 <__mcmp+0x2a>
 8007dc8:	3314      	adds	r3, #20
 8007dca:	3114      	adds	r1, #20
 8007dcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ddc:	4295      	cmp	r5, r2
 8007dde:	d003      	beq.n	8007de8 <__mcmp+0x2c>
 8007de0:	d205      	bcs.n	8007dee <__mcmp+0x32>
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	bd30      	pop	{r4, r5, pc}
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d3f3      	bcc.n	8007dd4 <__mcmp+0x18>
 8007dec:	e7fb      	b.n	8007de6 <__mcmp+0x2a>
 8007dee:	2001      	movs	r0, #1
 8007df0:	e7f9      	b.n	8007de6 <__mcmp+0x2a>
	...

08007df4 <__mdiff>:
 8007df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4689      	mov	r9, r1
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4648      	mov	r0, r9
 8007e00:	4614      	mov	r4, r2
 8007e02:	f7ff ffdb 	bl	8007dbc <__mcmp>
 8007e06:	1e05      	subs	r5, r0, #0
 8007e08:	d112      	bne.n	8007e30 <__mdiff+0x3c>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff fd19 	bl	8007844 <_Balloc>
 8007e12:	4602      	mov	r2, r0
 8007e14:	b928      	cbnz	r0, 8007e22 <__mdiff+0x2e>
 8007e16:	f240 2137 	movw	r1, #567	@ 0x237
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007f14 <__mdiff+0x120>)
 8007e1c:	483e      	ldr	r0, [pc, #248]	@ (8007f18 <__mdiff+0x124>)
 8007e1e:	f001 fa7d 	bl	800931c <__assert_func>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e28:	4610      	mov	r0, r2
 8007e2a:	b003      	add	sp, #12
 8007e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e30:	bfbc      	itt	lt
 8007e32:	464b      	movlt	r3, r9
 8007e34:	46a1      	movlt	r9, r4
 8007e36:	4630      	mov	r0, r6
 8007e38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e3c:	bfba      	itte	lt
 8007e3e:	461c      	movlt	r4, r3
 8007e40:	2501      	movlt	r5, #1
 8007e42:	2500      	movge	r5, #0
 8007e44:	f7ff fcfe 	bl	8007844 <_Balloc>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	b918      	cbnz	r0, 8007e54 <__mdiff+0x60>
 8007e4c:	f240 2145 	movw	r1, #581	@ 0x245
 8007e50:	4b30      	ldr	r3, [pc, #192]	@ (8007f14 <__mdiff+0x120>)
 8007e52:	e7e3      	b.n	8007e1c <__mdiff+0x28>
 8007e54:	f100 0b14 	add.w	fp, r0, #20
 8007e58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e5c:	f109 0310 	add.w	r3, r9, #16
 8007e60:	60c5      	str	r5, [r0, #12]
 8007e62:	f04f 0c00 	mov.w	ip, #0
 8007e66:	f109 0514 	add.w	r5, r9, #20
 8007e6a:	46d9      	mov	r9, fp
 8007e6c:	6926      	ldr	r6, [r4, #16]
 8007e6e:	f104 0e14 	add.w	lr, r4, #20
 8007e72:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e76:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e86:	b281      	uxth	r1, r0
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	fa1f f38a 	uxth.w	r3, sl
 8007e8e:	1a5b      	subs	r3, r3, r1
 8007e90:	0c00      	lsrs	r0, r0, #16
 8007e92:	4463      	add	r3, ip
 8007e94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e98:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ea2:	4576      	cmp	r6, lr
 8007ea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ea8:	f849 3b04 	str.w	r3, [r9], #4
 8007eac:	d8e6      	bhi.n	8007e7c <__mdiff+0x88>
 8007eae:	1b33      	subs	r3, r6, r4
 8007eb0:	3b15      	subs	r3, #21
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	3415      	adds	r4, #21
 8007eb8:	3304      	adds	r3, #4
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	bf38      	it	cc
 8007ebe:	2304      	movcc	r3, #4
 8007ec0:	441d      	add	r5, r3
 8007ec2:	445b      	add	r3, fp
 8007ec4:	461e      	mov	r6, r3
 8007ec6:	462c      	mov	r4, r5
 8007ec8:	4544      	cmp	r4, r8
 8007eca:	d30e      	bcc.n	8007eea <__mdiff+0xf6>
 8007ecc:	f108 0103 	add.w	r1, r8, #3
 8007ed0:	1b49      	subs	r1, r1, r5
 8007ed2:	f021 0103 	bic.w	r1, r1, #3
 8007ed6:	3d03      	subs	r5, #3
 8007ed8:	45a8      	cmp	r8, r5
 8007eda:	bf38      	it	cc
 8007edc:	2100      	movcc	r1, #0
 8007ede:	440b      	add	r3, r1
 8007ee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ee4:	b199      	cbz	r1, 8007f0e <__mdiff+0x11a>
 8007ee6:	6117      	str	r7, [r2, #16]
 8007ee8:	e79e      	b.n	8007e28 <__mdiff+0x34>
 8007eea:	46e6      	mov	lr, ip
 8007eec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ef0:	fa1f fc81 	uxth.w	ip, r1
 8007ef4:	44f4      	add	ip, lr
 8007ef6:	0c08      	lsrs	r0, r1, #16
 8007ef8:	4471      	add	r1, lr
 8007efa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007efe:	b289      	uxth	r1, r1
 8007f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f08:	f846 1b04 	str.w	r1, [r6], #4
 8007f0c:	e7dc      	b.n	8007ec8 <__mdiff+0xd4>
 8007f0e:	3f01      	subs	r7, #1
 8007f10:	e7e6      	b.n	8007ee0 <__mdiff+0xec>
 8007f12:	bf00      	nop
 8007f14:	0800a127 	.word	0x0800a127
 8007f18:	0800a138 	.word	0x0800a138

08007f1c <__ulp>:
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <__ulp+0x3c>)
 8007f1e:	400b      	ands	r3, r1
 8007f20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc08      	bgt.n	8007f3a <__ulp+0x1e>
 8007f28:	425b      	negs	r3, r3
 8007f2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007f2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f32:	da04      	bge.n	8007f3e <__ulp+0x22>
 8007f34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f38:	4113      	asrs	r3, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	e008      	b.n	8007f50 <__ulp+0x34>
 8007f3e:	f1a2 0314 	sub.w	r3, r2, #20
 8007f42:	2b1e      	cmp	r3, #30
 8007f44:	bfd6      	itet	le
 8007f46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f4a:	2201      	movgt	r2, #1
 8007f4c:	40da      	lsrle	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	7ff00000 	.word	0x7ff00000

08007f5c <__b2d>:
 8007f5c:	6902      	ldr	r2, [r0, #16]
 8007f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f60:	f100 0614 	add.w	r6, r0, #20
 8007f64:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007f68:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007f6c:	4f1e      	ldr	r7, [pc, #120]	@ (8007fe8 <__b2d+0x8c>)
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff fd5a 	bl	8007a28 <__hi0bits>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f1c0 0020 	rsb	r0, r0, #32
 8007f7a:	2b0a      	cmp	r3, #10
 8007f7c:	f1a2 0504 	sub.w	r5, r2, #4
 8007f80:	6008      	str	r0, [r1, #0]
 8007f82:	dc12      	bgt.n	8007faa <__b2d+0x4e>
 8007f84:	42ae      	cmp	r6, r5
 8007f86:	bf2c      	ite	cs
 8007f88:	2200      	movcs	r2, #0
 8007f8a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007f8e:	f1c3 0c0b 	rsb	ip, r3, #11
 8007f92:	3315      	adds	r3, #21
 8007f94:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007f98:	fa04 f303 	lsl.w	r3, r4, r3
 8007f9c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007fa0:	ea4e 0107 	orr.w	r1, lr, r7
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007faa:	42ae      	cmp	r6, r5
 8007fac:	bf36      	itet	cc
 8007fae:	f1a2 0508 	subcc.w	r5, r2, #8
 8007fb2:	2200      	movcs	r2, #0
 8007fb4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007fb8:	3b0b      	subs	r3, #11
 8007fba:	d012      	beq.n	8007fe2 <__b2d+0x86>
 8007fbc:	f1c3 0720 	rsb	r7, r3, #32
 8007fc0:	fa22 f107 	lsr.w	r1, r2, r7
 8007fc4:	409c      	lsls	r4, r3
 8007fc6:	430c      	orrs	r4, r1
 8007fc8:	42b5      	cmp	r5, r6
 8007fca:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007fce:	bf94      	ite	ls
 8007fd0:	2400      	movls	r4, #0
 8007fd2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007fd6:	409a      	lsls	r2, r3
 8007fd8:	40fc      	lsrs	r4, r7
 8007fda:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007fde:	4322      	orrs	r2, r4
 8007fe0:	e7e1      	b.n	8007fa6 <__b2d+0x4a>
 8007fe2:	ea44 0107 	orr.w	r1, r4, r7
 8007fe6:	e7de      	b.n	8007fa6 <__b2d+0x4a>
 8007fe8:	3ff00000 	.word	0x3ff00000

08007fec <__d2b>:
 8007fec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	4690      	mov	r8, r2
 8007ff4:	4699      	mov	r9, r3
 8007ff6:	9e08      	ldr	r6, [sp, #32]
 8007ff8:	f7ff fc24 	bl	8007844 <_Balloc>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	b930      	cbnz	r0, 800800e <__d2b+0x22>
 8008000:	4602      	mov	r2, r0
 8008002:	f240 310f 	movw	r1, #783	@ 0x30f
 8008006:	4b23      	ldr	r3, [pc, #140]	@ (8008094 <__d2b+0xa8>)
 8008008:	4823      	ldr	r0, [pc, #140]	@ (8008098 <__d2b+0xac>)
 800800a:	f001 f987 	bl	800931c <__assert_func>
 800800e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008012:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008016:	b10d      	cbz	r5, 800801c <__d2b+0x30>
 8008018:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	f1b8 0300 	subs.w	r3, r8, #0
 8008022:	d024      	beq.n	800806e <__d2b+0x82>
 8008024:	4668      	mov	r0, sp
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	f7ff fd1d 	bl	8007a66 <__lo0bits>
 800802c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008030:	b1d8      	cbz	r0, 800806a <__d2b+0x7e>
 8008032:	f1c0 0320 	rsb	r3, r0, #32
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	430b      	orrs	r3, r1
 800803c:	40c2      	lsrs	r2, r0
 800803e:	6163      	str	r3, [r4, #20]
 8008040:	9201      	str	r2, [sp, #4]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	bf0c      	ite	eq
 8008048:	2201      	moveq	r2, #1
 800804a:	2202      	movne	r2, #2
 800804c:	61a3      	str	r3, [r4, #24]
 800804e:	6122      	str	r2, [r4, #16]
 8008050:	b1ad      	cbz	r5, 800807e <__d2b+0x92>
 8008052:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008056:	4405      	add	r5, r0
 8008058:	6035      	str	r5, [r6, #0]
 800805a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	4620      	mov	r0, r4
 8008064:	b002      	add	sp, #8
 8008066:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800806a:	6161      	str	r1, [r4, #20]
 800806c:	e7e9      	b.n	8008042 <__d2b+0x56>
 800806e:	a801      	add	r0, sp, #4
 8008070:	f7ff fcf9 	bl	8007a66 <__lo0bits>
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	6163      	str	r3, [r4, #20]
 800807a:	3020      	adds	r0, #32
 800807c:	e7e7      	b.n	800804e <__d2b+0x62>
 800807e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008082:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008086:	6030      	str	r0, [r6, #0]
 8008088:	6918      	ldr	r0, [r3, #16]
 800808a:	f7ff fccd 	bl	8007a28 <__hi0bits>
 800808e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008092:	e7e4      	b.n	800805e <__d2b+0x72>
 8008094:	0800a127 	.word	0x0800a127
 8008098:	0800a138 	.word	0x0800a138

0800809c <__ratio>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	b085      	sub	sp, #20
 80080a2:	e9cd 1000 	strd	r1, r0, [sp]
 80080a6:	a902      	add	r1, sp, #8
 80080a8:	f7ff ff58 	bl	8007f5c <__b2d>
 80080ac:	468b      	mov	fp, r1
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	9800      	ldr	r0, [sp, #0]
 80080b4:	a903      	add	r1, sp, #12
 80080b6:	f7ff ff51 	bl	8007f5c <__b2d>
 80080ba:	460d      	mov	r5, r1
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	4689      	mov	r9, r1
 80080c0:	6919      	ldr	r1, [r3, #16]
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	4604      	mov	r4, r0
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	4630      	mov	r0, r6
 80080ca:	1ac9      	subs	r1, r1, r3
 80080cc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfcd      	iteet	gt
 80080da:	463a      	movgt	r2, r7
 80080dc:	462a      	movle	r2, r5
 80080de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080e2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80080e6:	bfd8      	it	le
 80080e8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80080ec:	464b      	mov	r3, r9
 80080ee:	4622      	mov	r2, r4
 80080f0:	4659      	mov	r1, fp
 80080f2:	f7f8 fb1b 	bl	800072c <__aeabi_ddiv>
 80080f6:	b005      	add	sp, #20
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080fc <__copybits>:
 80080fc:	3901      	subs	r1, #1
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	1149      	asrs	r1, r1, #5
 8008102:	6914      	ldr	r4, [r2, #16]
 8008104:	3101      	adds	r1, #1
 8008106:	f102 0314 	add.w	r3, r2, #20
 800810a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800810e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008112:	1f05      	subs	r5, r0, #4
 8008114:	42a3      	cmp	r3, r4
 8008116:	d30c      	bcc.n	8008132 <__copybits+0x36>
 8008118:	1aa3      	subs	r3, r4, r2
 800811a:	3b11      	subs	r3, #17
 800811c:	f023 0303 	bic.w	r3, r3, #3
 8008120:	3211      	adds	r2, #17
 8008122:	42a2      	cmp	r2, r4
 8008124:	bf88      	it	hi
 8008126:	2300      	movhi	r3, #0
 8008128:	4418      	add	r0, r3
 800812a:	2300      	movs	r3, #0
 800812c:	4288      	cmp	r0, r1
 800812e:	d305      	bcc.n	800813c <__copybits+0x40>
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	f853 6b04 	ldr.w	r6, [r3], #4
 8008136:	f845 6f04 	str.w	r6, [r5, #4]!
 800813a:	e7eb      	b.n	8008114 <__copybits+0x18>
 800813c:	f840 3b04 	str.w	r3, [r0], #4
 8008140:	e7f4      	b.n	800812c <__copybits+0x30>

08008142 <__any_on>:
 8008142:	f100 0214 	add.w	r2, r0, #20
 8008146:	6900      	ldr	r0, [r0, #16]
 8008148:	114b      	asrs	r3, r1, #5
 800814a:	4298      	cmp	r0, r3
 800814c:	b510      	push	{r4, lr}
 800814e:	db11      	blt.n	8008174 <__any_on+0x32>
 8008150:	dd0a      	ble.n	8008168 <__any_on+0x26>
 8008152:	f011 011f 	ands.w	r1, r1, #31
 8008156:	d007      	beq.n	8008168 <__any_on+0x26>
 8008158:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800815c:	fa24 f001 	lsr.w	r0, r4, r1
 8008160:	fa00 f101 	lsl.w	r1, r0, r1
 8008164:	428c      	cmp	r4, r1
 8008166:	d10b      	bne.n	8008180 <__any_on+0x3e>
 8008168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800816c:	4293      	cmp	r3, r2
 800816e:	d803      	bhi.n	8008178 <__any_on+0x36>
 8008170:	2000      	movs	r0, #0
 8008172:	bd10      	pop	{r4, pc}
 8008174:	4603      	mov	r3, r0
 8008176:	e7f7      	b.n	8008168 <__any_on+0x26>
 8008178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800817c:	2900      	cmp	r1, #0
 800817e:	d0f5      	beq.n	800816c <__any_on+0x2a>
 8008180:	2001      	movs	r0, #1
 8008182:	e7f6      	b.n	8008172 <__any_on+0x30>

08008184 <sulp>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	460f      	mov	r7, r1
 800818a:	4690      	mov	r8, r2
 800818c:	f7ff fec6 	bl	8007f1c <__ulp>
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	f1b8 0f00 	cmp.w	r8, #0
 8008198:	d011      	beq.n	80081be <sulp+0x3a>
 800819a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800819e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd0b      	ble.n	80081be <sulp+0x3a>
 80081a6:	2400      	movs	r4, #0
 80081a8:	051b      	lsls	r3, r3, #20
 80081aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081b2:	4622      	mov	r2, r4
 80081b4:	462b      	mov	r3, r5
 80081b6:	f7f8 f98f 	bl	80004d8 <__aeabi_dmul>
 80081ba:	4604      	mov	r4, r0
 80081bc:	460d      	mov	r5, r1
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080081c8 <_strtod_l>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b09f      	sub	sp, #124	@ 0x7c
 80081ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081d0:	2200      	movs	r2, #0
 80081d2:	460c      	mov	r4, r1
 80081d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80081d6:	f04f 0a00 	mov.w	sl, #0
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	460a      	mov	r2, r1
 80081e0:	9005      	str	r0, [sp, #20]
 80081e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e4:	7811      	ldrb	r1, [r2, #0]
 80081e6:	292b      	cmp	r1, #43	@ 0x2b
 80081e8:	d048      	beq.n	800827c <_strtod_l+0xb4>
 80081ea:	d836      	bhi.n	800825a <_strtod_l+0x92>
 80081ec:	290d      	cmp	r1, #13
 80081ee:	d830      	bhi.n	8008252 <_strtod_l+0x8a>
 80081f0:	2908      	cmp	r1, #8
 80081f2:	d830      	bhi.n	8008256 <_strtod_l+0x8e>
 80081f4:	2900      	cmp	r1, #0
 80081f6:	d039      	beq.n	800826c <_strtod_l+0xa4>
 80081f8:	2200      	movs	r2, #0
 80081fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80081fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80081fe:	782a      	ldrb	r2, [r5, #0]
 8008200:	2a30      	cmp	r2, #48	@ 0x30
 8008202:	f040 80b0 	bne.w	8008366 <_strtod_l+0x19e>
 8008206:	786a      	ldrb	r2, [r5, #1]
 8008208:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800820c:	2a58      	cmp	r2, #88	@ 0x58
 800820e:	d16c      	bne.n	80082ea <_strtod_l+0x122>
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008214:	4a8f      	ldr	r2, [pc, #572]	@ (8008454 <_strtod_l+0x28c>)
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	ab1a      	add	r3, sp, #104	@ 0x68
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	9805      	ldr	r0, [sp, #20]
 800821e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008220:	a919      	add	r1, sp, #100	@ 0x64
 8008222:	f001 f915 	bl	8009450 <__gethex>
 8008226:	f010 060f 	ands.w	r6, r0, #15
 800822a:	4604      	mov	r4, r0
 800822c:	d005      	beq.n	800823a <_strtod_l+0x72>
 800822e:	2e06      	cmp	r6, #6
 8008230:	d126      	bne.n	8008280 <_strtod_l+0xb8>
 8008232:	2300      	movs	r3, #0
 8008234:	3501      	adds	r5, #1
 8008236:	9519      	str	r5, [sp, #100]	@ 0x64
 8008238:	930e      	str	r3, [sp, #56]	@ 0x38
 800823a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8582 	bne.w	8008d46 <_strtod_l+0xb7e>
 8008242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008244:	b1bb      	cbz	r3, 8008276 <_strtod_l+0xae>
 8008246:	4650      	mov	r0, sl
 8008248:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800824c:	b01f      	add	sp, #124	@ 0x7c
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	2920      	cmp	r1, #32
 8008254:	d1d0      	bne.n	80081f8 <_strtod_l+0x30>
 8008256:	3201      	adds	r2, #1
 8008258:	e7c3      	b.n	80081e2 <_strtod_l+0x1a>
 800825a:	292d      	cmp	r1, #45	@ 0x2d
 800825c:	d1cc      	bne.n	80081f8 <_strtod_l+0x30>
 800825e:	2101      	movs	r1, #1
 8008260:	910e      	str	r1, [sp, #56]	@ 0x38
 8008262:	1c51      	adds	r1, r2, #1
 8008264:	9119      	str	r1, [sp, #100]	@ 0x64
 8008266:	7852      	ldrb	r2, [r2, #1]
 8008268:	2a00      	cmp	r2, #0
 800826a:	d1c7      	bne.n	80081fc <_strtod_l+0x34>
 800826c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800826e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 8566 	bne.w	8008d42 <_strtod_l+0xb7a>
 8008276:	4650      	mov	r0, sl
 8008278:	4659      	mov	r1, fp
 800827a:	e7e7      	b.n	800824c <_strtod_l+0x84>
 800827c:	2100      	movs	r1, #0
 800827e:	e7ef      	b.n	8008260 <_strtod_l+0x98>
 8008280:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008282:	b13a      	cbz	r2, 8008294 <_strtod_l+0xcc>
 8008284:	2135      	movs	r1, #53	@ 0x35
 8008286:	a81c      	add	r0, sp, #112	@ 0x70
 8008288:	f7ff ff38 	bl	80080fc <__copybits>
 800828c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800828e:	9805      	ldr	r0, [sp, #20]
 8008290:	f7ff fb18 	bl	80078c4 <_Bfree>
 8008294:	3e01      	subs	r6, #1
 8008296:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008298:	2e04      	cmp	r6, #4
 800829a:	d806      	bhi.n	80082aa <_strtod_l+0xe2>
 800829c:	e8df f006 	tbb	[pc, r6]
 80082a0:	201d0314 	.word	0x201d0314
 80082a4:	14          	.byte	0x14
 80082a5:	00          	.byte	0x00
 80082a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082aa:	05e1      	lsls	r1, r4, #23
 80082ac:	bf48      	it	mi
 80082ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082b6:	0d1b      	lsrs	r3, r3, #20
 80082b8:	051b      	lsls	r3, r3, #20
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1bd      	bne.n	800823a <_strtod_l+0x72>
 80082be:	f7fe fb27 	bl	8006910 <__errno>
 80082c2:	2322      	movs	r3, #34	@ 0x22
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	e7b8      	b.n	800823a <_strtod_l+0x72>
 80082c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082d8:	e7e7      	b.n	80082aa <_strtod_l+0xe2>
 80082da:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008458 <_strtod_l+0x290>
 80082de:	e7e4      	b.n	80082aa <_strtod_l+0xe2>
 80082e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80082e4:	f04f 3aff 	mov.w	sl, #4294967295
 80082e8:	e7df      	b.n	80082aa <_strtod_l+0xe2>
 80082ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2b30      	cmp	r3, #48	@ 0x30
 80082f4:	d0f9      	beq.n	80082ea <_strtod_l+0x122>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d09f      	beq.n	800823a <_strtod_l+0x72>
 80082fa:	2301      	movs	r3, #1
 80082fc:	2700      	movs	r7, #0
 80082fe:	220a      	movs	r2, #10
 8008300:	46b9      	mov	r9, r7
 8008302:	9308      	str	r3, [sp, #32]
 8008304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008306:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008308:	930c      	str	r3, [sp, #48]	@ 0x30
 800830a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800830c:	7805      	ldrb	r5, [r0, #0]
 800830e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008312:	b2d9      	uxtb	r1, r3
 8008314:	2909      	cmp	r1, #9
 8008316:	d928      	bls.n	800836a <_strtod_l+0x1a2>
 8008318:	2201      	movs	r2, #1
 800831a:	4950      	ldr	r1, [pc, #320]	@ (800845c <_strtod_l+0x294>)
 800831c:	f000 ffc8 	bl	80092b0 <strncmp>
 8008320:	2800      	cmp	r0, #0
 8008322:	d032      	beq.n	800838a <_strtod_l+0x1c2>
 8008324:	2000      	movs	r0, #0
 8008326:	462a      	mov	r2, r5
 8008328:	4603      	mov	r3, r0
 800832a:	464d      	mov	r5, r9
 800832c:	900a      	str	r0, [sp, #40]	@ 0x28
 800832e:	2a65      	cmp	r2, #101	@ 0x65
 8008330:	d001      	beq.n	8008336 <_strtod_l+0x16e>
 8008332:	2a45      	cmp	r2, #69	@ 0x45
 8008334:	d114      	bne.n	8008360 <_strtod_l+0x198>
 8008336:	b91d      	cbnz	r5, 8008340 <_strtod_l+0x178>
 8008338:	9a08      	ldr	r2, [sp, #32]
 800833a:	4302      	orrs	r2, r0
 800833c:	d096      	beq.n	800826c <_strtod_l+0xa4>
 800833e:	2500      	movs	r5, #0
 8008340:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008342:	1c62      	adds	r2, r4, #1
 8008344:	9219      	str	r2, [sp, #100]	@ 0x64
 8008346:	7862      	ldrb	r2, [r4, #1]
 8008348:	2a2b      	cmp	r2, #43	@ 0x2b
 800834a:	d07a      	beq.n	8008442 <_strtod_l+0x27a>
 800834c:	2a2d      	cmp	r2, #45	@ 0x2d
 800834e:	d07e      	beq.n	800844e <_strtod_l+0x286>
 8008350:	f04f 0c00 	mov.w	ip, #0
 8008354:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008358:	2909      	cmp	r1, #9
 800835a:	f240 8085 	bls.w	8008468 <_strtod_l+0x2a0>
 800835e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008360:	f04f 0800 	mov.w	r8, #0
 8008364:	e0a5      	b.n	80084b2 <_strtod_l+0x2ea>
 8008366:	2300      	movs	r3, #0
 8008368:	e7c8      	b.n	80082fc <_strtod_l+0x134>
 800836a:	f1b9 0f08 	cmp.w	r9, #8
 800836e:	bfd8      	it	le
 8008370:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008372:	f100 0001 	add.w	r0, r0, #1
 8008376:	bfd6      	itet	le
 8008378:	fb02 3301 	mlale	r3, r2, r1, r3
 800837c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008380:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008382:	f109 0901 	add.w	r9, r9, #1
 8008386:	9019      	str	r0, [sp, #100]	@ 0x64
 8008388:	e7bf      	b.n	800830a <_strtod_l+0x142>
 800838a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008390:	785a      	ldrb	r2, [r3, #1]
 8008392:	f1b9 0f00 	cmp.w	r9, #0
 8008396:	d03b      	beq.n	8008410 <_strtod_l+0x248>
 8008398:	464d      	mov	r5, r9
 800839a:	900a      	str	r0, [sp, #40]	@ 0x28
 800839c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d912      	bls.n	80083ca <_strtod_l+0x202>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e7c2      	b.n	800832e <_strtod_l+0x166>
 80083a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083aa:	3001      	adds	r0, #1
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80083b0:	785a      	ldrb	r2, [r3, #1]
 80083b2:	2a30      	cmp	r2, #48	@ 0x30
 80083b4:	d0f8      	beq.n	80083a8 <_strtod_l+0x1e0>
 80083b6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	f200 84c8 	bhi.w	8008d50 <_strtod_l+0xb88>
 80083c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80083c2:	2000      	movs	r0, #0
 80083c4:	4605      	mov	r5, r0
 80083c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ca:	3a30      	subs	r2, #48	@ 0x30
 80083cc:	f100 0301 	add.w	r3, r0, #1
 80083d0:	d018      	beq.n	8008404 <_strtod_l+0x23c>
 80083d2:	462e      	mov	r6, r5
 80083d4:	f04f 0e0a 	mov.w	lr, #10
 80083d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083da:	4419      	add	r1, r3
 80083dc:	910a      	str	r1, [sp, #40]	@ 0x28
 80083de:	1c71      	adds	r1, r6, #1
 80083e0:	eba1 0c05 	sub.w	ip, r1, r5
 80083e4:	4563      	cmp	r3, ip
 80083e6:	dc15      	bgt.n	8008414 <_strtod_l+0x24c>
 80083e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80083ec:	182b      	adds	r3, r5, r0
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	f105 0501 	add.w	r5, r5, #1
 80083f4:	4405      	add	r5, r0
 80083f6:	dc1a      	bgt.n	800842e <_strtod_l+0x266>
 80083f8:	230a      	movs	r3, #10
 80083fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083fc:	fb03 2301 	mla	r3, r3, r1, r2
 8008400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008402:	2300      	movs	r3, #0
 8008404:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008406:	4618      	mov	r0, r3
 8008408:	1c51      	adds	r1, r2, #1
 800840a:	9119      	str	r1, [sp, #100]	@ 0x64
 800840c:	7852      	ldrb	r2, [r2, #1]
 800840e:	e7c5      	b.n	800839c <_strtod_l+0x1d4>
 8008410:	4648      	mov	r0, r9
 8008412:	e7ce      	b.n	80083b2 <_strtod_l+0x1ea>
 8008414:	2e08      	cmp	r6, #8
 8008416:	dc05      	bgt.n	8008424 <_strtod_l+0x25c>
 8008418:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800841a:	fb0e f606 	mul.w	r6, lr, r6
 800841e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008420:	460e      	mov	r6, r1
 8008422:	e7dc      	b.n	80083de <_strtod_l+0x216>
 8008424:	2910      	cmp	r1, #16
 8008426:	bfd8      	it	le
 8008428:	fb0e f707 	mulle.w	r7, lr, r7
 800842c:	e7f8      	b.n	8008420 <_strtod_l+0x258>
 800842e:	2b0f      	cmp	r3, #15
 8008430:	bfdc      	itt	le
 8008432:	230a      	movle	r3, #10
 8008434:	fb03 2707 	mlale	r7, r3, r7, r2
 8008438:	e7e3      	b.n	8008402 <_strtod_l+0x23a>
 800843a:	2300      	movs	r3, #0
 800843c:	930a      	str	r3, [sp, #40]	@ 0x28
 800843e:	2301      	movs	r3, #1
 8008440:	e77a      	b.n	8008338 <_strtod_l+0x170>
 8008442:	f04f 0c00 	mov.w	ip, #0
 8008446:	1ca2      	adds	r2, r4, #2
 8008448:	9219      	str	r2, [sp, #100]	@ 0x64
 800844a:	78a2      	ldrb	r2, [r4, #2]
 800844c:	e782      	b.n	8008354 <_strtod_l+0x18c>
 800844e:	f04f 0c01 	mov.w	ip, #1
 8008452:	e7f8      	b.n	8008446 <_strtod_l+0x27e>
 8008454:	0800a35c 	.word	0x0800a35c
 8008458:	7ff00000 	.word	0x7ff00000
 800845c:	0800a191 	.word	0x0800a191
 8008460:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008462:	1c51      	adds	r1, r2, #1
 8008464:	9119      	str	r1, [sp, #100]	@ 0x64
 8008466:	7852      	ldrb	r2, [r2, #1]
 8008468:	2a30      	cmp	r2, #48	@ 0x30
 800846a:	d0f9      	beq.n	8008460 <_strtod_l+0x298>
 800846c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008470:	2908      	cmp	r1, #8
 8008472:	f63f af75 	bhi.w	8008360 <_strtod_l+0x198>
 8008476:	f04f 080a 	mov.w	r8, #10
 800847a:	3a30      	subs	r2, #48	@ 0x30
 800847c:	9209      	str	r2, [sp, #36]	@ 0x24
 800847e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008480:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008482:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008484:	1c56      	adds	r6, r2, #1
 8008486:	9619      	str	r6, [sp, #100]	@ 0x64
 8008488:	7852      	ldrb	r2, [r2, #1]
 800848a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800848e:	f1be 0f09 	cmp.w	lr, #9
 8008492:	d939      	bls.n	8008508 <_strtod_l+0x340>
 8008494:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008496:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800849a:	1a76      	subs	r6, r6, r1
 800849c:	2e08      	cmp	r6, #8
 800849e:	dc03      	bgt.n	80084a8 <_strtod_l+0x2e0>
 80084a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a2:	4588      	cmp	r8, r1
 80084a4:	bfa8      	it	ge
 80084a6:	4688      	movge	r8, r1
 80084a8:	f1bc 0f00 	cmp.w	ip, #0
 80084ac:	d001      	beq.n	80084b2 <_strtod_l+0x2ea>
 80084ae:	f1c8 0800 	rsb	r8, r8, #0
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	d14e      	bne.n	8008554 <_strtod_l+0x38c>
 80084b6:	9908      	ldr	r1, [sp, #32]
 80084b8:	4308      	orrs	r0, r1
 80084ba:	f47f aebe 	bne.w	800823a <_strtod_l+0x72>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f aed4 	bne.w	800826c <_strtod_l+0xa4>
 80084c4:	2a69      	cmp	r2, #105	@ 0x69
 80084c6:	d028      	beq.n	800851a <_strtod_l+0x352>
 80084c8:	dc25      	bgt.n	8008516 <_strtod_l+0x34e>
 80084ca:	2a49      	cmp	r2, #73	@ 0x49
 80084cc:	d025      	beq.n	800851a <_strtod_l+0x352>
 80084ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80084d0:	f47f aecc 	bne.w	800826c <_strtod_l+0xa4>
 80084d4:	4999      	ldr	r1, [pc, #612]	@ (800873c <_strtod_l+0x574>)
 80084d6:	a819      	add	r0, sp, #100	@ 0x64
 80084d8:	f001 f9dc 	bl	8009894 <__match>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f43f aec5 	beq.w	800826c <_strtod_l+0xa4>
 80084e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b28      	cmp	r3, #40	@ 0x28
 80084e8:	d12e      	bne.n	8008548 <_strtod_l+0x380>
 80084ea:	4995      	ldr	r1, [pc, #596]	@ (8008740 <_strtod_l+0x578>)
 80084ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80084ee:	a819      	add	r0, sp, #100	@ 0x64
 80084f0:	f001 f9e4 	bl	80098bc <__hexnan>
 80084f4:	2805      	cmp	r0, #5
 80084f6:	d127      	bne.n	8008548 <_strtod_l+0x380>
 80084f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80084fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008502:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008506:	e698      	b.n	800823a <_strtod_l+0x72>
 8008508:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800850a:	fb08 2101 	mla	r1, r8, r1, r2
 800850e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008512:	9209      	str	r2, [sp, #36]	@ 0x24
 8008514:	e7b5      	b.n	8008482 <_strtod_l+0x2ba>
 8008516:	2a6e      	cmp	r2, #110	@ 0x6e
 8008518:	e7da      	b.n	80084d0 <_strtod_l+0x308>
 800851a:	498a      	ldr	r1, [pc, #552]	@ (8008744 <_strtod_l+0x57c>)
 800851c:	a819      	add	r0, sp, #100	@ 0x64
 800851e:	f001 f9b9 	bl	8009894 <__match>
 8008522:	2800      	cmp	r0, #0
 8008524:	f43f aea2 	beq.w	800826c <_strtod_l+0xa4>
 8008528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800852a:	4987      	ldr	r1, [pc, #540]	@ (8008748 <_strtod_l+0x580>)
 800852c:	3b01      	subs	r3, #1
 800852e:	a819      	add	r0, sp, #100	@ 0x64
 8008530:	9319      	str	r3, [sp, #100]	@ 0x64
 8008532:	f001 f9af 	bl	8009894 <__match>
 8008536:	b910      	cbnz	r0, 800853e <_strtod_l+0x376>
 8008538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800853a:	3301      	adds	r3, #1
 800853c:	9319      	str	r3, [sp, #100]	@ 0x64
 800853e:	f04f 0a00 	mov.w	sl, #0
 8008542:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800874c <_strtod_l+0x584>
 8008546:	e678      	b.n	800823a <_strtod_l+0x72>
 8008548:	4881      	ldr	r0, [pc, #516]	@ (8008750 <_strtod_l+0x588>)
 800854a:	f000 fee1 	bl	8009310 <nan>
 800854e:	4682      	mov	sl, r0
 8008550:	468b      	mov	fp, r1
 8008552:	e672      	b.n	800823a <_strtod_l+0x72>
 8008554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	bf08      	it	eq
 800855c:	46a9      	moveq	r9, r5
 800855e:	eba8 0303 	sub.w	r3, r8, r3
 8008562:	2d10      	cmp	r5, #16
 8008564:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008566:	462c      	mov	r4, r5
 8008568:	9309      	str	r3, [sp, #36]	@ 0x24
 800856a:	bfa8      	it	ge
 800856c:	2410      	movge	r4, #16
 800856e:	f7f7 ff39 	bl	80003e4 <__aeabi_ui2d>
 8008572:	2d09      	cmp	r5, #9
 8008574:	4682      	mov	sl, r0
 8008576:	468b      	mov	fp, r1
 8008578:	dc11      	bgt.n	800859e <_strtod_l+0x3d6>
 800857a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	f43f ae5c 	beq.w	800823a <_strtod_l+0x72>
 8008582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008584:	dd76      	ble.n	8008674 <_strtod_l+0x4ac>
 8008586:	2b16      	cmp	r3, #22
 8008588:	dc5d      	bgt.n	8008646 <_strtod_l+0x47e>
 800858a:	4972      	ldr	r1, [pc, #456]	@ (8008754 <_strtod_l+0x58c>)
 800858c:	4652      	mov	r2, sl
 800858e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008592:	465b      	mov	r3, fp
 8008594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008598:	f7f7 ff9e 	bl	80004d8 <__aeabi_dmul>
 800859c:	e7d7      	b.n	800854e <_strtod_l+0x386>
 800859e:	4b6d      	ldr	r3, [pc, #436]	@ (8008754 <_strtod_l+0x58c>)
 80085a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085a8:	f7f7 ff96 	bl	80004d8 <__aeabi_dmul>
 80085ac:	4682      	mov	sl, r0
 80085ae:	4638      	mov	r0, r7
 80085b0:	468b      	mov	fp, r1
 80085b2:	f7f7 ff17 	bl	80003e4 <__aeabi_ui2d>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	f7f7 fdd5 	bl	800016c <__adddf3>
 80085c2:	2d0f      	cmp	r5, #15
 80085c4:	4682      	mov	sl, r0
 80085c6:	468b      	mov	fp, r1
 80085c8:	ddd7      	ble.n	800857a <_strtod_l+0x3b2>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	1b2c      	subs	r4, r5, r4
 80085ce:	441c      	add	r4, r3
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	f340 8093 	ble.w	80086fc <_strtod_l+0x534>
 80085d6:	f014 030f 	ands.w	r3, r4, #15
 80085da:	d00a      	beq.n	80085f2 <_strtod_l+0x42a>
 80085dc:	495d      	ldr	r1, [pc, #372]	@ (8008754 <_strtod_l+0x58c>)
 80085de:	4652      	mov	r2, sl
 80085e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e8:	465b      	mov	r3, fp
 80085ea:	f7f7 ff75 	bl	80004d8 <__aeabi_dmul>
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	f034 040f 	bics.w	r4, r4, #15
 80085f6:	d073      	beq.n	80086e0 <_strtod_l+0x518>
 80085f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80085fc:	dd49      	ble.n	8008692 <_strtod_l+0x4ca>
 80085fe:	2400      	movs	r4, #0
 8008600:	46a0      	mov	r8, r4
 8008602:	46a1      	mov	r9, r4
 8008604:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008606:	2322      	movs	r3, #34	@ 0x22
 8008608:	f04f 0a00 	mov.w	sl, #0
 800860c:	9a05      	ldr	r2, [sp, #20]
 800860e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800874c <_strtod_l+0x584>
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	f43f ae0f 	beq.w	800823a <_strtod_l+0x72>
 800861c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800861e:	9805      	ldr	r0, [sp, #20]
 8008620:	f7ff f950 	bl	80078c4 <_Bfree>
 8008624:	4649      	mov	r1, r9
 8008626:	9805      	ldr	r0, [sp, #20]
 8008628:	f7ff f94c 	bl	80078c4 <_Bfree>
 800862c:	4641      	mov	r1, r8
 800862e:	9805      	ldr	r0, [sp, #20]
 8008630:	f7ff f948 	bl	80078c4 <_Bfree>
 8008634:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008636:	9805      	ldr	r0, [sp, #20]
 8008638:	f7ff f944 	bl	80078c4 <_Bfree>
 800863c:	4621      	mov	r1, r4
 800863e:	9805      	ldr	r0, [sp, #20]
 8008640:	f7ff f940 	bl	80078c4 <_Bfree>
 8008644:	e5f9      	b.n	800823a <_strtod_l+0x72>
 8008646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008648:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800864c:	4293      	cmp	r3, r2
 800864e:	dbbc      	blt.n	80085ca <_strtod_l+0x402>
 8008650:	4c40      	ldr	r4, [pc, #256]	@ (8008754 <_strtod_l+0x58c>)
 8008652:	f1c5 050f 	rsb	r5, r5, #15
 8008656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800865a:	4652      	mov	r2, sl
 800865c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008660:	465b      	mov	r3, fp
 8008662:	f7f7 ff39 	bl	80004d8 <__aeabi_dmul>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	1b5d      	subs	r5, r3, r5
 800866a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800866e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008672:	e791      	b.n	8008598 <_strtod_l+0x3d0>
 8008674:	3316      	adds	r3, #22
 8008676:	dba8      	blt.n	80085ca <_strtod_l+0x402>
 8008678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867a:	4650      	mov	r0, sl
 800867c:	eba3 0808 	sub.w	r8, r3, r8
 8008680:	4b34      	ldr	r3, [pc, #208]	@ (8008754 <_strtod_l+0x58c>)
 8008682:	4659      	mov	r1, fp
 8008684:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008688:	e9d8 2300 	ldrd	r2, r3, [r8]
 800868c:	f7f8 f84e 	bl	800072c <__aeabi_ddiv>
 8008690:	e75d      	b.n	800854e <_strtod_l+0x386>
 8008692:	2300      	movs	r3, #0
 8008694:	4650      	mov	r0, sl
 8008696:	4659      	mov	r1, fp
 8008698:	461e      	mov	r6, r3
 800869a:	4f2f      	ldr	r7, [pc, #188]	@ (8008758 <_strtod_l+0x590>)
 800869c:	1124      	asrs	r4, r4, #4
 800869e:	2c01      	cmp	r4, #1
 80086a0:	dc21      	bgt.n	80086e6 <_strtod_l+0x51e>
 80086a2:	b10b      	cbz	r3, 80086a8 <_strtod_l+0x4e0>
 80086a4:	4682      	mov	sl, r0
 80086a6:	468b      	mov	fp, r1
 80086a8:	492b      	ldr	r1, [pc, #172]	@ (8008758 <_strtod_l+0x590>)
 80086aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086b2:	4652      	mov	r2, sl
 80086b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b8:	465b      	mov	r3, fp
 80086ba:	f7f7 ff0d 	bl	80004d8 <__aeabi_dmul>
 80086be:	4b23      	ldr	r3, [pc, #140]	@ (800874c <_strtod_l+0x584>)
 80086c0:	460a      	mov	r2, r1
 80086c2:	400b      	ands	r3, r1
 80086c4:	4925      	ldr	r1, [pc, #148]	@ (800875c <_strtod_l+0x594>)
 80086c6:	4682      	mov	sl, r0
 80086c8:	428b      	cmp	r3, r1
 80086ca:	d898      	bhi.n	80085fe <_strtod_l+0x436>
 80086cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086d0:	428b      	cmp	r3, r1
 80086d2:	bf86      	itte	hi
 80086d4:	f04f 3aff 	movhi.w	sl, #4294967295
 80086d8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008760 <_strtod_l+0x598>
 80086dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80086e0:	2300      	movs	r3, #0
 80086e2:	9308      	str	r3, [sp, #32]
 80086e4:	e076      	b.n	80087d4 <_strtod_l+0x60c>
 80086e6:	07e2      	lsls	r2, r4, #31
 80086e8:	d504      	bpl.n	80086f4 <_strtod_l+0x52c>
 80086ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ee:	f7f7 fef3 	bl	80004d8 <__aeabi_dmul>
 80086f2:	2301      	movs	r3, #1
 80086f4:	3601      	adds	r6, #1
 80086f6:	1064      	asrs	r4, r4, #1
 80086f8:	3708      	adds	r7, #8
 80086fa:	e7d0      	b.n	800869e <_strtod_l+0x4d6>
 80086fc:	d0f0      	beq.n	80086e0 <_strtod_l+0x518>
 80086fe:	4264      	negs	r4, r4
 8008700:	f014 020f 	ands.w	r2, r4, #15
 8008704:	d00a      	beq.n	800871c <_strtod_l+0x554>
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <_strtod_l+0x58c>)
 8008708:	4650      	mov	r0, sl
 800870a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800870e:	4659      	mov	r1, fp
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f7f8 f80a 	bl	800072c <__aeabi_ddiv>
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	1124      	asrs	r4, r4, #4
 800871e:	d0df      	beq.n	80086e0 <_strtod_l+0x518>
 8008720:	2c1f      	cmp	r4, #31
 8008722:	dd1f      	ble.n	8008764 <_strtod_l+0x59c>
 8008724:	2400      	movs	r4, #0
 8008726:	46a0      	mov	r8, r4
 8008728:	46a1      	mov	r9, r4
 800872a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800872c:	2322      	movs	r3, #34	@ 0x22
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	f04f 0a00 	mov.w	sl, #0
 8008734:	f04f 0b00 	mov.w	fp, #0
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e76b      	b.n	8008614 <_strtod_l+0x44c>
 800873c:	0800a07f 	.word	0x0800a07f
 8008740:	0800a348 	.word	0x0800a348
 8008744:	0800a077 	.word	0x0800a077
 8008748:	0800a0ae 	.word	0x0800a0ae
 800874c:	7ff00000 	.word	0x7ff00000
 8008750:	0800a1e7 	.word	0x0800a1e7
 8008754:	0800a280 	.word	0x0800a280
 8008758:	0800a258 	.word	0x0800a258
 800875c:	7ca00000 	.word	0x7ca00000
 8008760:	7fefffff 	.word	0x7fefffff
 8008764:	f014 0310 	ands.w	r3, r4, #16
 8008768:	bf18      	it	ne
 800876a:	236a      	movne	r3, #106	@ 0x6a
 800876c:	4650      	mov	r0, sl
 800876e:	9308      	str	r3, [sp, #32]
 8008770:	4659      	mov	r1, fp
 8008772:	2300      	movs	r3, #0
 8008774:	4e77      	ldr	r6, [pc, #476]	@ (8008954 <_strtod_l+0x78c>)
 8008776:	07e7      	lsls	r7, r4, #31
 8008778:	d504      	bpl.n	8008784 <_strtod_l+0x5bc>
 800877a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800877e:	f7f7 feab 	bl	80004d8 <__aeabi_dmul>
 8008782:	2301      	movs	r3, #1
 8008784:	1064      	asrs	r4, r4, #1
 8008786:	f106 0608 	add.w	r6, r6, #8
 800878a:	d1f4      	bne.n	8008776 <_strtod_l+0x5ae>
 800878c:	b10b      	cbz	r3, 8008792 <_strtod_l+0x5ca>
 800878e:	4682      	mov	sl, r0
 8008790:	468b      	mov	fp, r1
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	b1b3      	cbz	r3, 80087c4 <_strtod_l+0x5fc>
 8008796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800879a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800879e:	2b00      	cmp	r3, #0
 80087a0:	4659      	mov	r1, fp
 80087a2:	dd0f      	ble.n	80087c4 <_strtod_l+0x5fc>
 80087a4:	2b1f      	cmp	r3, #31
 80087a6:	dd58      	ble.n	800885a <_strtod_l+0x692>
 80087a8:	2b34      	cmp	r3, #52	@ 0x34
 80087aa:	bfd8      	it	le
 80087ac:	f04f 33ff 	movle.w	r3, #4294967295
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	bfcf      	iteee	gt
 80087b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087be:	4093      	lslle	r3, r2
 80087c0:	ea03 0b01 	andle.w	fp, r3, r1
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4650      	mov	r0, sl
 80087ca:	4659      	mov	r1, fp
 80087cc:	f7f8 f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d1a7      	bne.n	8008724 <_strtod_l+0x55c>
 80087d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d6:	464a      	mov	r2, r9
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087dc:	462b      	mov	r3, r5
 80087de:	9805      	ldr	r0, [sp, #20]
 80087e0:	f7ff f8d8 	bl	8007994 <__s2b>
 80087e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f af09 	beq.w	80085fe <_strtod_l+0x436>
 80087ec:	2400      	movs	r4, #0
 80087ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	eba3 0308 	sub.w	r3, r3, r8
 80087f8:	bfa8      	it	ge
 80087fa:	2300      	movge	r3, #0
 80087fc:	46a0      	mov	r8, r4
 80087fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008800:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008804:	9316      	str	r3, [sp, #88]	@ 0x58
 8008806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008808:	9805      	ldr	r0, [sp, #20]
 800880a:	6859      	ldr	r1, [r3, #4]
 800880c:	f7ff f81a 	bl	8007844 <_Balloc>
 8008810:	4681      	mov	r9, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	f43f aef7 	beq.w	8008606 <_strtod_l+0x43e>
 8008818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800881a:	300c      	adds	r0, #12
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	f103 010c 	add.w	r1, r3, #12
 8008822:	3202      	adds	r2, #2
 8008824:	0092      	lsls	r2, r2, #2
 8008826:	f000 fd65 	bl	80092f4 <memcpy>
 800882a:	ab1c      	add	r3, sp, #112	@ 0x70
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4652      	mov	r2, sl
 8008834:	465b      	mov	r3, fp
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800883c:	f7ff fbd6 	bl	8007fec <__d2b>
 8008840:	901a      	str	r0, [sp, #104]	@ 0x68
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f aedf 	beq.w	8008606 <_strtod_l+0x43e>
 8008848:	2101      	movs	r1, #1
 800884a:	9805      	ldr	r0, [sp, #20]
 800884c:	f7ff f938 	bl	8007ac0 <__i2b>
 8008850:	4680      	mov	r8, r0
 8008852:	b948      	cbnz	r0, 8008868 <_strtod_l+0x6a0>
 8008854:	f04f 0800 	mov.w	r8, #0
 8008858:	e6d5      	b.n	8008606 <_strtod_l+0x43e>
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	ea03 0a0a 	and.w	sl, r3, sl
 8008866:	e7ad      	b.n	80087c4 <_strtod_l+0x5fc>
 8008868:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800886a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800886c:	2d00      	cmp	r5, #0
 800886e:	bfab      	itete	ge
 8008870:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008872:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008874:	18ef      	addge	r7, r5, r3
 8008876:	1b5e      	sublt	r6, r3, r5
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	bfa8      	it	ge
 800887c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800887e:	eba5 0503 	sub.w	r5, r5, r3
 8008882:	4415      	add	r5, r2
 8008884:	4b34      	ldr	r3, [pc, #208]	@ (8008958 <_strtod_l+0x790>)
 8008886:	f105 35ff 	add.w	r5, r5, #4294967295
 800888a:	bfb8      	it	lt
 800888c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800888e:	429d      	cmp	r5, r3
 8008890:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008894:	da50      	bge.n	8008938 <_strtod_l+0x770>
 8008896:	1b5b      	subs	r3, r3, r5
 8008898:	2b1f      	cmp	r3, #31
 800889a:	f04f 0101 	mov.w	r1, #1
 800889e:	eba2 0203 	sub.w	r2, r2, r3
 80088a2:	dc3d      	bgt.n	8008920 <_strtod_l+0x758>
 80088a4:	fa01 f303 	lsl.w	r3, r1, r3
 80088a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088aa:	2300      	movs	r3, #0
 80088ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80088ae:	18bd      	adds	r5, r7, r2
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	42af      	cmp	r7, r5
 80088b4:	4416      	add	r6, r2
 80088b6:	441e      	add	r6, r3
 80088b8:	463b      	mov	r3, r7
 80088ba:	bfa8      	it	ge
 80088bc:	462b      	movge	r3, r5
 80088be:	42b3      	cmp	r3, r6
 80088c0:	bfa8      	it	ge
 80088c2:	4633      	movge	r3, r6
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bfc2      	ittt	gt
 80088c8:	1aed      	subgt	r5, r5, r3
 80088ca:	1af6      	subgt	r6, r6, r3
 80088cc:	1aff      	subgt	r7, r7, r3
 80088ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dd16      	ble.n	8008902 <_strtod_l+0x73a>
 80088d4:	4641      	mov	r1, r8
 80088d6:	461a      	mov	r2, r3
 80088d8:	9805      	ldr	r0, [sp, #20]
 80088da:	f7ff f9a9 	bl	8007c30 <__pow5mult>
 80088de:	4680      	mov	r8, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0b7      	beq.n	8008854 <_strtod_l+0x68c>
 80088e4:	4601      	mov	r1, r0
 80088e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088e8:	9805      	ldr	r0, [sp, #20]
 80088ea:	f7ff f8ff 	bl	8007aec <__multiply>
 80088ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f43f ae88 	beq.w	8008606 <_strtod_l+0x43e>
 80088f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088f8:	9805      	ldr	r0, [sp, #20]
 80088fa:	f7fe ffe3 	bl	80078c4 <_Bfree>
 80088fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008900:	931a      	str	r3, [sp, #104]	@ 0x68
 8008902:	2d00      	cmp	r5, #0
 8008904:	dc1d      	bgt.n	8008942 <_strtod_l+0x77a>
 8008906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd27      	ble.n	800895c <_strtod_l+0x794>
 800890c:	4649      	mov	r1, r9
 800890e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008910:	9805      	ldr	r0, [sp, #20]
 8008912:	f7ff f98d 	bl	8007c30 <__pow5mult>
 8008916:	4681      	mov	r9, r0
 8008918:	bb00      	cbnz	r0, 800895c <_strtod_l+0x794>
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	e672      	b.n	8008606 <_strtod_l+0x43e>
 8008920:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008924:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008928:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800892c:	35e2      	adds	r5, #226	@ 0xe2
 800892e:	fa01 f305 	lsl.w	r3, r1, r5
 8008932:	9310      	str	r3, [sp, #64]	@ 0x40
 8008934:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008936:	e7ba      	b.n	80088ae <_strtod_l+0x6e6>
 8008938:	2300      	movs	r3, #0
 800893a:	9310      	str	r3, [sp, #64]	@ 0x40
 800893c:	2301      	movs	r3, #1
 800893e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008940:	e7b5      	b.n	80088ae <_strtod_l+0x6e6>
 8008942:	462a      	mov	r2, r5
 8008944:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008946:	9805      	ldr	r0, [sp, #20]
 8008948:	f7ff f9cc 	bl	8007ce4 <__lshift>
 800894c:	901a      	str	r0, [sp, #104]	@ 0x68
 800894e:	2800      	cmp	r0, #0
 8008950:	d1d9      	bne.n	8008906 <_strtod_l+0x73e>
 8008952:	e658      	b.n	8008606 <_strtod_l+0x43e>
 8008954:	0800a370 	.word	0x0800a370
 8008958:	fffffc02 	.word	0xfffffc02
 800895c:	2e00      	cmp	r6, #0
 800895e:	dd07      	ble.n	8008970 <_strtod_l+0x7a8>
 8008960:	4649      	mov	r1, r9
 8008962:	4632      	mov	r2, r6
 8008964:	9805      	ldr	r0, [sp, #20]
 8008966:	f7ff f9bd 	bl	8007ce4 <__lshift>
 800896a:	4681      	mov	r9, r0
 800896c:	2800      	cmp	r0, #0
 800896e:	d0d4      	beq.n	800891a <_strtod_l+0x752>
 8008970:	2f00      	cmp	r7, #0
 8008972:	dd08      	ble.n	8008986 <_strtod_l+0x7be>
 8008974:	4641      	mov	r1, r8
 8008976:	463a      	mov	r2, r7
 8008978:	9805      	ldr	r0, [sp, #20]
 800897a:	f7ff f9b3 	bl	8007ce4 <__lshift>
 800897e:	4680      	mov	r8, r0
 8008980:	2800      	cmp	r0, #0
 8008982:	f43f ae40 	beq.w	8008606 <_strtod_l+0x43e>
 8008986:	464a      	mov	r2, r9
 8008988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800898a:	9805      	ldr	r0, [sp, #20]
 800898c:	f7ff fa32 	bl	8007df4 <__mdiff>
 8008990:	4604      	mov	r4, r0
 8008992:	2800      	cmp	r0, #0
 8008994:	f43f ae37 	beq.w	8008606 <_strtod_l+0x43e>
 8008998:	68c3      	ldr	r3, [r0, #12]
 800899a:	4641      	mov	r1, r8
 800899c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800899e:	2300      	movs	r3, #0
 80089a0:	60c3      	str	r3, [r0, #12]
 80089a2:	f7ff fa0b 	bl	8007dbc <__mcmp>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	da3d      	bge.n	8008a26 <_strtod_l+0x85e>
 80089aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ac:	ea53 030a 	orrs.w	r3, r3, sl
 80089b0:	d163      	bne.n	8008a7a <_strtod_l+0x8b2>
 80089b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d15f      	bne.n	8008a7a <_strtod_l+0x8b2>
 80089ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089be:	0d1b      	lsrs	r3, r3, #20
 80089c0:	051b      	lsls	r3, r3, #20
 80089c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089c6:	d958      	bls.n	8008a7a <_strtod_l+0x8b2>
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	b913      	cbnz	r3, 80089d2 <_strtod_l+0x80a>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	dd53      	ble.n	8008a7a <_strtod_l+0x8b2>
 80089d2:	4621      	mov	r1, r4
 80089d4:	2201      	movs	r2, #1
 80089d6:	9805      	ldr	r0, [sp, #20]
 80089d8:	f7ff f984 	bl	8007ce4 <__lshift>
 80089dc:	4641      	mov	r1, r8
 80089de:	4604      	mov	r4, r0
 80089e0:	f7ff f9ec 	bl	8007dbc <__mcmp>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dd48      	ble.n	8008a7a <_strtod_l+0x8b2>
 80089e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089ec:	9a08      	ldr	r2, [sp, #32]
 80089ee:	0d1b      	lsrs	r3, r3, #20
 80089f0:	051b      	lsls	r3, r3, #20
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d062      	beq.n	8008abc <_strtod_l+0x8f4>
 80089f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089fa:	d85f      	bhi.n	8008abc <_strtod_l+0x8f4>
 80089fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a00:	f67f ae94 	bls.w	800872c <_strtod_l+0x564>
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	4ba3      	ldr	r3, [pc, #652]	@ (8008c98 <_strtod_l+0xad0>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f7f7 fd64 	bl	80004d8 <__aeabi_dmul>
 8008a10:	4ba2      	ldr	r3, [pc, #648]	@ (8008c9c <_strtod_l+0xad4>)
 8008a12:	4682      	mov	sl, r0
 8008a14:	400b      	ands	r3, r1
 8008a16:	468b      	mov	fp, r1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f47f adff 	bne.w	800861c <_strtod_l+0x454>
 8008a1e:	2322      	movs	r3, #34	@ 0x22
 8008a20:	9a05      	ldr	r2, [sp, #20]
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	e5fa      	b.n	800861c <_strtod_l+0x454>
 8008a26:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008a2a:	d165      	bne.n	8008af8 <_strtod_l+0x930>
 8008a2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a32:	b35a      	cbz	r2, 8008a8c <_strtod_l+0x8c4>
 8008a34:	4a9a      	ldr	r2, [pc, #616]	@ (8008ca0 <_strtod_l+0xad8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d12b      	bne.n	8008a92 <_strtod_l+0x8ca>
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	4651      	mov	r1, sl
 8008a3e:	b303      	cbz	r3, 8008a82 <_strtod_l+0x8ba>
 8008a40:	465a      	mov	r2, fp
 8008a42:	4b96      	ldr	r3, [pc, #600]	@ (8008c9c <_strtod_l+0xad4>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	d81b      	bhi.n	8008a88 <_strtod_l+0x8c0>
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d119      	bne.n	8008a92 <_strtod_l+0x8ca>
 8008a5e:	4b91      	ldr	r3, [pc, #580]	@ (8008ca4 <_strtod_l+0xadc>)
 8008a60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d102      	bne.n	8008a6c <_strtod_l+0x8a4>
 8008a66:	3101      	adds	r1, #1
 8008a68:	f43f adcd 	beq.w	8008606 <_strtod_l+0x43e>
 8008a6c:	f04f 0a00 	mov.w	sl, #0
 8008a70:	4b8a      	ldr	r3, [pc, #552]	@ (8008c9c <_strtod_l+0xad4>)
 8008a72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a74:	401a      	ands	r2, r3
 8008a76:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a7a:	9b08      	ldr	r3, [sp, #32]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1c1      	bne.n	8008a04 <_strtod_l+0x83c>
 8008a80:	e5cc      	b.n	800861c <_strtod_l+0x454>
 8008a82:	f04f 33ff 	mov.w	r3, #4294967295
 8008a86:	e7e8      	b.n	8008a5a <_strtod_l+0x892>
 8008a88:	4613      	mov	r3, r2
 8008a8a:	e7e6      	b.n	8008a5a <_strtod_l+0x892>
 8008a8c:	ea53 030a 	orrs.w	r3, r3, sl
 8008a90:	d0aa      	beq.n	80089e8 <_strtod_l+0x820>
 8008a92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a94:	b1db      	cbz	r3, 8008ace <_strtod_l+0x906>
 8008a96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a98:	4213      	tst	r3, r2
 8008a9a:	d0ee      	beq.n	8008a7a <_strtod_l+0x8b2>
 8008a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	9a08      	ldr	r2, [sp, #32]
 8008aa4:	b1bb      	cbz	r3, 8008ad6 <_strtod_l+0x90e>
 8008aa6:	f7ff fb6d 	bl	8008184 <sulp>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab2:	f7f7 fb5b 	bl	800016c <__adddf3>
 8008ab6:	4682      	mov	sl, r0
 8008ab8:	468b      	mov	fp, r1
 8008aba:	e7de      	b.n	8008a7a <_strtod_l+0x8b2>
 8008abc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ac0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008acc:	e7d5      	b.n	8008a7a <_strtod_l+0x8b2>
 8008ace:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ad0:	ea13 0f0a 	tst.w	r3, sl
 8008ad4:	e7e1      	b.n	8008a9a <_strtod_l+0x8d2>
 8008ad6:	f7ff fb55 	bl	8008184 <sulp>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae2:	f7f7 fb41 	bl	8000168 <__aeabi_dsub>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4682      	mov	sl, r0
 8008aec:	468b      	mov	fp, r1
 8008aee:	f7f7 ff5b 	bl	80009a8 <__aeabi_dcmpeq>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0c1      	beq.n	8008a7a <_strtod_l+0x8b2>
 8008af6:	e619      	b.n	800872c <_strtod_l+0x564>
 8008af8:	4641      	mov	r1, r8
 8008afa:	4620      	mov	r0, r4
 8008afc:	f7ff face 	bl	800809c <__ratio>
 8008b00:	2200      	movs	r2, #0
 8008b02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	f7f7 ff61 	bl	80009d0 <__aeabi_dcmple>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d06d      	beq.n	8008bee <_strtod_l+0xa26>
 8008b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d178      	bne.n	8008c0a <_strtod_l+0xa42>
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	d156      	bne.n	8008bcc <_strtod_l+0xa04>
 8008b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d158      	bne.n	8008bda <_strtod_l+0xa12>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ca8 <_strtod_l+0xae0>)
 8008b30:	f7f7 ff44 	bl	80009bc <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d157      	bne.n	8008be8 <_strtod_l+0xa20>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cac <_strtod_l+0xae4>)
 8008b40:	f7f7 fcca 	bl	80004d8 <__aeabi_dmul>
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b4c:	9606      	str	r6, [sp, #24]
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b54:	4d51      	ldr	r5, [pc, #324]	@ (8008c9c <_strtod_l+0xad4>)
 8008b56:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5c:	401d      	ands	r5, r3
 8008b5e:	4b54      	ldr	r3, [pc, #336]	@ (8008cb0 <_strtod_l+0xae8>)
 8008b60:	429d      	cmp	r5, r3
 8008b62:	f040 80ab 	bne.w	8008cbc <_strtod_l+0xaf4>
 8008b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b68:	4650      	mov	r0, sl
 8008b6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b6e:	4659      	mov	r1, fp
 8008b70:	f7ff f9d4 	bl	8007f1c <__ulp>
 8008b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b78:	f7f7 fcae 	bl	80004d8 <__aeabi_dmul>
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	465b      	mov	r3, fp
 8008b80:	f7f7 faf4 	bl	800016c <__adddf3>
 8008b84:	460b      	mov	r3, r1
 8008b86:	4945      	ldr	r1, [pc, #276]	@ (8008c9c <_strtod_l+0xad4>)
 8008b88:	4a4a      	ldr	r2, [pc, #296]	@ (8008cb4 <_strtod_l+0xaec>)
 8008b8a:	4019      	ands	r1, r3
 8008b8c:	4291      	cmp	r1, r2
 8008b8e:	4682      	mov	sl, r0
 8008b90:	d942      	bls.n	8008c18 <_strtod_l+0xa50>
 8008b92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b94:	4b43      	ldr	r3, [pc, #268]	@ (8008ca4 <_strtod_l+0xadc>)
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d103      	bne.n	8008ba2 <_strtod_l+0x9da>
 8008b9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f43f ad32 	beq.w	8008606 <_strtod_l+0x43e>
 8008ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ba6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008ca4 <_strtod_l+0xadc>
 8008baa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bac:	9805      	ldr	r0, [sp, #20]
 8008bae:	f7fe fe89 	bl	80078c4 <_Bfree>
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	f7fe fe85 	bl	80078c4 <_Bfree>
 8008bba:	4641      	mov	r1, r8
 8008bbc:	9805      	ldr	r0, [sp, #20]
 8008bbe:	f7fe fe81 	bl	80078c4 <_Bfree>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	9805      	ldr	r0, [sp, #20]
 8008bc6:	f7fe fe7d 	bl	80078c4 <_Bfree>
 8008bca:	e61c      	b.n	8008806 <_strtod_l+0x63e>
 8008bcc:	f1ba 0f01 	cmp.w	sl, #1
 8008bd0:	d103      	bne.n	8008bda <_strtod_l+0xa12>
 8008bd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f43f ada9 	beq.w	800872c <_strtod_l+0x564>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <_strtod_l+0xaf0>)
 8008bde:	2600      	movs	r6, #0
 8008be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008be4:	4f30      	ldr	r7, [pc, #192]	@ (8008ca8 <_strtod_l+0xae0>)
 8008be6:	e7b3      	b.n	8008b50 <_strtod_l+0x988>
 8008be8:	2600      	movs	r6, #0
 8008bea:	4f30      	ldr	r7, [pc, #192]	@ (8008cac <_strtod_l+0xae4>)
 8008bec:	e7ac      	b.n	8008b48 <_strtod_l+0x980>
 8008bee:	4630      	mov	r0, r6
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8008cac <_strtod_l+0xae4>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f7f7 fc6f 	bl	80004d8 <__aeabi_dmul>
 8008bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0a1      	beq.n	8008b48 <_strtod_l+0x980>
 8008c04:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c08:	e7a2      	b.n	8008b50 <_strtod_l+0x988>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4b26      	ldr	r3, [pc, #152]	@ (8008ca8 <_strtod_l+0xae0>)
 8008c0e:	4616      	mov	r6, r2
 8008c10:	461f      	mov	r7, r3
 8008c12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c16:	e79b      	b.n	8008b50 <_strtod_l+0x988>
 8008c18:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c1c:	9b08      	ldr	r3, [sp, #32]
 8008c1e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1c1      	bne.n	8008baa <_strtod_l+0x9e2>
 8008c26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c2a:	0d1b      	lsrs	r3, r3, #20
 8008c2c:	051b      	lsls	r3, r3, #20
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	d1bb      	bne.n	8008baa <_strtod_l+0x9e2>
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f8 f9f5 	bl	8001024 <__aeabi_d2lz>
 8008c3a:	f7f7 fc1f 	bl	800047c <__aeabi_l2d>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fa8f 	bl	8000168 <__aeabi_dsub>
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c58:	ea46 060a 	orr.w	r6, r6, sl
 8008c5c:	431e      	orrs	r6, r3
 8008c5e:	d06a      	beq.n	8008d36 <_strtod_l+0xb6e>
 8008c60:	a309      	add	r3, pc, #36	@ (adr r3, 8008c88 <_strtod_l+0xac0>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fea9 	bl	80009bc <__aeabi_dcmplt>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f47f acd6 	bne.w	800861c <_strtod_l+0x454>
 8008c70:	a307      	add	r3, pc, #28	@ (adr r3, 8008c90 <_strtod_l+0xac8>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c7a:	f7f7 febd 	bl	80009f8 <__aeabi_dcmpgt>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d093      	beq.n	8008baa <_strtod_l+0x9e2>
 8008c82:	e4cb      	b.n	800861c <_strtod_l+0x454>
 8008c84:	f3af 8000 	nop.w
 8008c88:	94a03595 	.word	0x94a03595
 8008c8c:	3fdfffff 	.word	0x3fdfffff
 8008c90:	35afe535 	.word	0x35afe535
 8008c94:	3fe00000 	.word	0x3fe00000
 8008c98:	39500000 	.word	0x39500000
 8008c9c:	7ff00000 	.word	0x7ff00000
 8008ca0:	000fffff 	.word	0x000fffff
 8008ca4:	7fefffff 	.word	0x7fefffff
 8008ca8:	3ff00000 	.word	0x3ff00000
 8008cac:	3fe00000 	.word	0x3fe00000
 8008cb0:	7fe00000 	.word	0x7fe00000
 8008cb4:	7c9fffff 	.word	0x7c9fffff
 8008cb8:	bff00000 	.word	0xbff00000
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	b323      	cbz	r3, 8008d0a <_strtod_l+0xb42>
 8008cc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008cc4:	d821      	bhi.n	8008d0a <_strtod_l+0xb42>
 8008cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8008d68 <_strtod_l+0xba0>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 fe7e 	bl	80009d0 <__aeabi_dcmple>
 8008cd4:	b1a0      	cbz	r0, 8008d00 <_strtod_l+0xb38>
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7f7 fed5 	bl	8000a88 <__aeabi_d2uiz>
 8008cde:	2801      	cmp	r0, #1
 8008ce0:	bf38      	it	cc
 8008ce2:	2001      	movcc	r0, #1
 8008ce4:	f7f7 fb7e 	bl	80003e4 <__aeabi_ui2d>
 8008ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	b9fb      	cbnz	r3, 8008d30 <_strtod_l+0xb68>
 8008cf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008cf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008cf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d06:	1b5b      	subs	r3, r3, r5
 8008d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d12:	f7ff f903 	bl	8007f1c <__ulp>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	4659      	mov	r1, fp
 8008d1e:	f7f7 fbdb 	bl	80004d8 <__aeabi_dmul>
 8008d22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d26:	f7f7 fa21 	bl	800016c <__adddf3>
 8008d2a:	4682      	mov	sl, r0
 8008d2c:	468b      	mov	fp, r1
 8008d2e:	e775      	b.n	8008c1c <_strtod_l+0xa54>
 8008d30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d34:	e7e0      	b.n	8008cf8 <_strtod_l+0xb30>
 8008d36:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d70 <_strtod_l+0xba8>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fe3e 	bl	80009bc <__aeabi_dcmplt>
 8008d40:	e79d      	b.n	8008c7e <_strtod_l+0xab6>
 8008d42:	2300      	movs	r3, #0
 8008d44:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d48:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	f7ff ba79 	b.w	8008242 <_strtod_l+0x7a>
 8008d50:	2a65      	cmp	r2, #101	@ 0x65
 8008d52:	f43f ab72 	beq.w	800843a <_strtod_l+0x272>
 8008d56:	2a45      	cmp	r2, #69	@ 0x45
 8008d58:	f43f ab6f 	beq.w	800843a <_strtod_l+0x272>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f7ff bbaa 	b.w	80084b6 <_strtod_l+0x2ee>
 8008d62:	bf00      	nop
 8008d64:	f3af 8000 	nop.w
 8008d68:	ffc00000 	.word	0xffc00000
 8008d6c:	41dfffff 	.word	0x41dfffff
 8008d70:	94a03595 	.word	0x94a03595
 8008d74:	3fcfffff 	.word	0x3fcfffff

08008d78 <_strtod_r>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	@ (8008d80 <_strtod_r+0x8>)
 8008d7a:	f7ff ba25 	b.w	80081c8 <_strtod_l>
 8008d7e:	bf00      	nop
 8008d80:	20000070 	.word	0x20000070

08008d84 <_strtol_l.isra.0>:
 8008d84:	2b24      	cmp	r3, #36	@ 0x24
 8008d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8a:	4686      	mov	lr, r0
 8008d8c:	4690      	mov	r8, r2
 8008d8e:	d801      	bhi.n	8008d94 <_strtol_l.isra.0+0x10>
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d106      	bne.n	8008da2 <_strtol_l.isra.0+0x1e>
 8008d94:	f7fd fdbc 	bl	8006910 <__errno>
 8008d98:	2316      	movs	r3, #22
 8008d9a:	6003      	str	r3, [r0, #0]
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da2:	460d      	mov	r5, r1
 8008da4:	4833      	ldr	r0, [pc, #204]	@ (8008e74 <_strtol_l.isra.0+0xf0>)
 8008da6:	462a      	mov	r2, r5
 8008da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dac:	5d06      	ldrb	r6, [r0, r4]
 8008dae:	f016 0608 	ands.w	r6, r6, #8
 8008db2:	d1f8      	bne.n	8008da6 <_strtol_l.isra.0+0x22>
 8008db4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008db6:	d110      	bne.n	8008dda <_strtol_l.isra.0+0x56>
 8008db8:	2601      	movs	r6, #1
 8008dba:	782c      	ldrb	r4, [r5, #0]
 8008dbc:	1c95      	adds	r5, r2, #2
 8008dbe:	f033 0210 	bics.w	r2, r3, #16
 8008dc2:	d115      	bne.n	8008df0 <_strtol_l.isra.0+0x6c>
 8008dc4:	2c30      	cmp	r4, #48	@ 0x30
 8008dc6:	d10d      	bne.n	8008de4 <_strtol_l.isra.0+0x60>
 8008dc8:	782a      	ldrb	r2, [r5, #0]
 8008dca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dce:	2a58      	cmp	r2, #88	@ 0x58
 8008dd0:	d108      	bne.n	8008de4 <_strtol_l.isra.0+0x60>
 8008dd2:	786c      	ldrb	r4, [r5, #1]
 8008dd4:	3502      	adds	r5, #2
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	e00a      	b.n	8008df0 <_strtol_l.isra.0+0x6c>
 8008dda:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ddc:	bf04      	itt	eq
 8008dde:	782c      	ldrbeq	r4, [r5, #0]
 8008de0:	1c95      	addeq	r5, r2, #2
 8008de2:	e7ec      	b.n	8008dbe <_strtol_l.isra.0+0x3a>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1f6      	bne.n	8008dd6 <_strtol_l.isra.0+0x52>
 8008de8:	2c30      	cmp	r4, #48	@ 0x30
 8008dea:	bf14      	ite	ne
 8008dec:	230a      	movne	r3, #10
 8008dee:	2308      	moveq	r3, #8
 8008df0:	2200      	movs	r2, #0
 8008df2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008df6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008dfa:	fbbc f9f3 	udiv	r9, ip, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e08:	2f09      	cmp	r7, #9
 8008e0a:	d80f      	bhi.n	8008e2c <_strtol_l.isra.0+0xa8>
 8008e0c:	463c      	mov	r4, r7
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	dd1b      	ble.n	8008e4a <_strtol_l.isra.0+0xc6>
 8008e12:	1c57      	adds	r7, r2, #1
 8008e14:	d007      	beq.n	8008e26 <_strtol_l.isra.0+0xa2>
 8008e16:	4581      	cmp	r9, r0
 8008e18:	d314      	bcc.n	8008e44 <_strtol_l.isra.0+0xc0>
 8008e1a:	d101      	bne.n	8008e20 <_strtol_l.isra.0+0x9c>
 8008e1c:	45a2      	cmp	sl, r4
 8008e1e:	db11      	blt.n	8008e44 <_strtol_l.isra.0+0xc0>
 8008e20:	2201      	movs	r2, #1
 8008e22:	fb00 4003 	mla	r0, r0, r3, r4
 8008e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e2a:	e7eb      	b.n	8008e04 <_strtol_l.isra.0+0x80>
 8008e2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e30:	2f19      	cmp	r7, #25
 8008e32:	d801      	bhi.n	8008e38 <_strtol_l.isra.0+0xb4>
 8008e34:	3c37      	subs	r4, #55	@ 0x37
 8008e36:	e7ea      	b.n	8008e0e <_strtol_l.isra.0+0x8a>
 8008e38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e3c:	2f19      	cmp	r7, #25
 8008e3e:	d804      	bhi.n	8008e4a <_strtol_l.isra.0+0xc6>
 8008e40:	3c57      	subs	r4, #87	@ 0x57
 8008e42:	e7e4      	b.n	8008e0e <_strtol_l.isra.0+0x8a>
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	e7ed      	b.n	8008e26 <_strtol_l.isra.0+0xa2>
 8008e4a:	1c53      	adds	r3, r2, #1
 8008e4c:	d108      	bne.n	8008e60 <_strtol_l.isra.0+0xdc>
 8008e4e:	2322      	movs	r3, #34	@ 0x22
 8008e50:	4660      	mov	r0, ip
 8008e52:	f8ce 3000 	str.w	r3, [lr]
 8008e56:	f1b8 0f00 	cmp.w	r8, #0
 8008e5a:	d0a0      	beq.n	8008d9e <_strtol_l.isra.0+0x1a>
 8008e5c:	1e69      	subs	r1, r5, #1
 8008e5e:	e006      	b.n	8008e6e <_strtol_l.isra.0+0xea>
 8008e60:	b106      	cbz	r6, 8008e64 <_strtol_l.isra.0+0xe0>
 8008e62:	4240      	negs	r0, r0
 8008e64:	f1b8 0f00 	cmp.w	r8, #0
 8008e68:	d099      	beq.n	8008d9e <_strtol_l.isra.0+0x1a>
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	d1f6      	bne.n	8008e5c <_strtol_l.isra.0+0xd8>
 8008e6e:	f8c8 1000 	str.w	r1, [r8]
 8008e72:	e794      	b.n	8008d9e <_strtol_l.isra.0+0x1a>
 8008e74:	0800a399 	.word	0x0800a399

08008e78 <_strtol_r>:
 8008e78:	f7ff bf84 	b.w	8008d84 <_strtol_l.isra.0>

08008e7c <__ssputs_r>:
 8008e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	461f      	mov	r7, r3
 8008e82:	688e      	ldr	r6, [r1, #8]
 8008e84:	4682      	mov	sl, r0
 8008e86:	42be      	cmp	r6, r7
 8008e88:	460c      	mov	r4, r1
 8008e8a:	4690      	mov	r8, r2
 8008e8c:	680b      	ldr	r3, [r1, #0]
 8008e8e:	d82d      	bhi.n	8008eec <__ssputs_r+0x70>
 8008e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e98:	d026      	beq.n	8008ee8 <__ssputs_r+0x6c>
 8008e9a:	6965      	ldr	r5, [r4, #20]
 8008e9c:	6909      	ldr	r1, [r1, #16]
 8008e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea2:	eba3 0901 	sub.w	r9, r3, r1
 8008ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eaa:	1c7b      	adds	r3, r7, #1
 8008eac:	444b      	add	r3, r9
 8008eae:	106d      	asrs	r5, r5, #1
 8008eb0:	429d      	cmp	r5, r3
 8008eb2:	bf38      	it	cc
 8008eb4:	461d      	movcc	r5, r3
 8008eb6:	0553      	lsls	r3, r2, #21
 8008eb8:	d527      	bpl.n	8008f0a <__ssputs_r+0x8e>
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7fe fc36 	bl	800772c <_malloc_r>
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b360      	cbz	r0, 8008f1e <__ssputs_r+0xa2>
 8008ec4:	464a      	mov	r2, r9
 8008ec6:	6921      	ldr	r1, [r4, #16]
 8008ec8:	f000 fa14 	bl	80092f4 <memcpy>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	6126      	str	r6, [r4, #16]
 8008eda:	444e      	add	r6, r9
 8008edc:	6026      	str	r6, [r4, #0]
 8008ede:	463e      	mov	r6, r7
 8008ee0:	6165      	str	r5, [r4, #20]
 8008ee2:	eba5 0509 	sub.w	r5, r5, r9
 8008ee6:	60a5      	str	r5, [r4, #8]
 8008ee8:	42be      	cmp	r6, r7
 8008eea:	d900      	bls.n	8008eee <__ssputs_r+0x72>
 8008eec:	463e      	mov	r6, r7
 8008eee:	4632      	mov	r2, r6
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	f000 f9c2 	bl	800927c <memmove>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	1b9b      	subs	r3, r3, r6
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	4433      	add	r3, r6
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	f000 fd83 	bl	8009a16 <_realloc_r>
 8008f10:	4606      	mov	r6, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1e0      	bne.n	8008ed8 <__ssputs_r+0x5c>
 8008f16:	4650      	mov	r0, sl
 8008f18:	6921      	ldr	r1, [r4, #16]
 8008f1a:	f7fe fb95 	bl	8007648 <_free_r>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	f8ca 3000 	str.w	r3, [sl]
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	e7e9      	b.n	8008f06 <__ssputs_r+0x8a>
	...

08008f34 <_svfiprintf_r>:
 8008f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f38:	4698      	mov	r8, r3
 8008f3a:	898b      	ldrh	r3, [r1, #12]
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	460d      	mov	r5, r1
 8008f42:	4614      	mov	r4, r2
 8008f44:	b09d      	sub	sp, #116	@ 0x74
 8008f46:	d510      	bpl.n	8008f6a <_svfiprintf_r+0x36>
 8008f48:	690b      	ldr	r3, [r1, #16]
 8008f4a:	b973      	cbnz	r3, 8008f6a <_svfiprintf_r+0x36>
 8008f4c:	2140      	movs	r1, #64	@ 0x40
 8008f4e:	f7fe fbed 	bl	800772c <_malloc_r>
 8008f52:	6028      	str	r0, [r5, #0]
 8008f54:	6128      	str	r0, [r5, #16]
 8008f56:	b930      	cbnz	r0, 8008f66 <_svfiprintf_r+0x32>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	b01d      	add	sp, #116	@ 0x74
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	2340      	movs	r3, #64	@ 0x40
 8008f68:	616b      	str	r3, [r5, #20]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6e:	2320      	movs	r3, #32
 8008f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f74:	2330      	movs	r3, #48	@ 0x30
 8008f76:	f04f 0901 	mov.w	r9, #1
 8008f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009118 <_svfiprintf_r+0x1e4>
 8008f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f86:	4623      	mov	r3, r4
 8008f88:	469a      	mov	sl, r3
 8008f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8e:	b10a      	cbz	r2, 8008f94 <_svfiprintf_r+0x60>
 8008f90:	2a25      	cmp	r2, #37	@ 0x25
 8008f92:	d1f9      	bne.n	8008f88 <_svfiprintf_r+0x54>
 8008f94:	ebba 0b04 	subs.w	fp, sl, r4
 8008f98:	d00b      	beq.n	8008fb2 <_svfiprintf_r+0x7e>
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ff6b 	bl	8008e7c <__ssputs_r>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	f000 80a7 	beq.w	80090fa <_svfiprintf_r+0x1c6>
 8008fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fae:	445a      	add	r2, fp
 8008fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 809f 	beq.w	80090fa <_svfiprintf_r+0x1c6>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc6:	f10a 0a01 	add.w	sl, sl, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	9307      	str	r3, [sp, #28]
 8008fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fd4:	4654      	mov	r4, sl
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	484e      	ldr	r0, [pc, #312]	@ (8009118 <_svfiprintf_r+0x1e4>)
 8008fde:	f7fd fcc4 	bl	800696a <memchr>
 8008fe2:	9a04      	ldr	r2, [sp, #16]
 8008fe4:	b9d8      	cbnz	r0, 800901e <_svfiprintf_r+0xea>
 8008fe6:	06d0      	lsls	r0, r2, #27
 8008fe8:	bf44      	itt	mi
 8008fea:	2320      	movmi	r3, #32
 8008fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ff0:	0711      	lsls	r1, r2, #28
 8008ff2:	bf44      	itt	mi
 8008ff4:	232b      	movmi	r3, #43	@ 0x2b
 8008ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009000:	d015      	beq.n	800902e <_svfiprintf_r+0xfa>
 8009002:	4654      	mov	r4, sl
 8009004:	2000      	movs	r0, #0
 8009006:	f04f 0c0a 	mov.w	ip, #10
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	4621      	mov	r1, r4
 800900e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009012:	3b30      	subs	r3, #48	@ 0x30
 8009014:	2b09      	cmp	r3, #9
 8009016:	d94b      	bls.n	80090b0 <_svfiprintf_r+0x17c>
 8009018:	b1b0      	cbz	r0, 8009048 <_svfiprintf_r+0x114>
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	e014      	b.n	8009048 <_svfiprintf_r+0x114>
 800901e:	eba0 0308 	sub.w	r3, r0, r8
 8009022:	fa09 f303 	lsl.w	r3, r9, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	46a2      	mov	sl, r4
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	e7d2      	b.n	8008fd4 <_svfiprintf_r+0xa0>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d19      	adds	r1, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9103      	str	r1, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbb      	ittet	lt
 800903a:	425b      	neglt	r3, r3
 800903c:	f042 0202 	orrlt.w	r2, r2, #2
 8009040:	9307      	strge	r3, [sp, #28]
 8009042:	9307      	strlt	r3, [sp, #28]
 8009044:	bfb8      	it	lt
 8009046:	9204      	strlt	r2, [sp, #16]
 8009048:	7823      	ldrb	r3, [r4, #0]
 800904a:	2b2e      	cmp	r3, #46	@ 0x2e
 800904c:	d10a      	bne.n	8009064 <_svfiprintf_r+0x130>
 800904e:	7863      	ldrb	r3, [r4, #1]
 8009050:	2b2a      	cmp	r3, #42	@ 0x2a
 8009052:	d132      	bne.n	80090ba <_svfiprintf_r+0x186>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	3402      	adds	r4, #2
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	9203      	str	r2, [sp, #12]
 800905e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009062:	9305      	str	r3, [sp, #20]
 8009064:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800911c <_svfiprintf_r+0x1e8>
 8009068:	2203      	movs	r2, #3
 800906a:	4650      	mov	r0, sl
 800906c:	7821      	ldrb	r1, [r4, #0]
 800906e:	f7fd fc7c 	bl	800696a <memchr>
 8009072:	b138      	cbz	r0, 8009084 <_svfiprintf_r+0x150>
 8009074:	2240      	movs	r2, #64	@ 0x40
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	eba0 000a 	sub.w	r0, r0, sl
 800907c:	4082      	lsls	r2, r0
 800907e:	4313      	orrs	r3, r2
 8009080:	3401      	adds	r4, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	2206      	movs	r2, #6
 800908a:	4825      	ldr	r0, [pc, #148]	@ (8009120 <_svfiprintf_r+0x1ec>)
 800908c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009090:	f7fd fc6b 	bl	800696a <memchr>
 8009094:	2800      	cmp	r0, #0
 8009096:	d036      	beq.n	8009106 <_svfiprintf_r+0x1d2>
 8009098:	4b22      	ldr	r3, [pc, #136]	@ (8009124 <_svfiprintf_r+0x1f0>)
 800909a:	bb1b      	cbnz	r3, 80090e4 <_svfiprintf_r+0x1b0>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	3307      	adds	r3, #7
 80090a0:	f023 0307 	bic.w	r3, r3, #7
 80090a4:	3308      	adds	r3, #8
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090aa:	4433      	add	r3, r6
 80090ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ae:	e76a      	b.n	8008f86 <_svfiprintf_r+0x52>
 80090b0:	460c      	mov	r4, r1
 80090b2:	2001      	movs	r0, #1
 80090b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b8:	e7a8      	b.n	800900c <_svfiprintf_r+0xd8>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f04f 0c0a 	mov.w	ip, #10
 80090c0:	4619      	mov	r1, r3
 80090c2:	3401      	adds	r4, #1
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090cc:	3a30      	subs	r2, #48	@ 0x30
 80090ce:	2a09      	cmp	r2, #9
 80090d0:	d903      	bls.n	80090da <_svfiprintf_r+0x1a6>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0c6      	beq.n	8009064 <_svfiprintf_r+0x130>
 80090d6:	9105      	str	r1, [sp, #20]
 80090d8:	e7c4      	b.n	8009064 <_svfiprintf_r+0x130>
 80090da:	4604      	mov	r4, r0
 80090dc:	2301      	movs	r3, #1
 80090de:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e2:	e7f0      	b.n	80090c6 <_svfiprintf_r+0x192>
 80090e4:	ab03      	add	r3, sp, #12
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	462a      	mov	r2, r5
 80090ea:	4638      	mov	r0, r7
 80090ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009128 <_svfiprintf_r+0x1f4>)
 80090ee:	a904      	add	r1, sp, #16
 80090f0:	f7fc fcce 	bl	8005a90 <_printf_float>
 80090f4:	1c42      	adds	r2, r0, #1
 80090f6:	4606      	mov	r6, r0
 80090f8:	d1d6      	bne.n	80090a8 <_svfiprintf_r+0x174>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	065b      	lsls	r3, r3, #25
 80090fe:	f53f af2d 	bmi.w	8008f5c <_svfiprintf_r+0x28>
 8009102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009104:	e72c      	b.n	8008f60 <_svfiprintf_r+0x2c>
 8009106:	ab03      	add	r3, sp, #12
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	462a      	mov	r2, r5
 800910c:	4638      	mov	r0, r7
 800910e:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <_svfiprintf_r+0x1f4>)
 8009110:	a904      	add	r1, sp, #16
 8009112:	f7fc ff5b 	bl	8005fcc <_printf_i>
 8009116:	e7ed      	b.n	80090f4 <_svfiprintf_r+0x1c0>
 8009118:	0800a193 	.word	0x0800a193
 800911c:	0800a199 	.word	0x0800a199
 8009120:	0800a19d 	.word	0x0800a19d
 8009124:	08005a91 	.word	0x08005a91
 8009128:	08008e7d 	.word	0x08008e7d

0800912c <__sflush_r>:
 800912c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	0716      	lsls	r6, r2, #28
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	d454      	bmi.n	80091e4 <__sflush_r+0xb8>
 800913a:	684b      	ldr	r3, [r1, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc02      	bgt.n	8009146 <__sflush_r+0x1a>
 8009140:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd48      	ble.n	80091d8 <__sflush_r+0xac>
 8009146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009148:	2e00      	cmp	r6, #0
 800914a:	d045      	beq.n	80091d8 <__sflush_r+0xac>
 800914c:	2300      	movs	r3, #0
 800914e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009152:	682f      	ldr	r7, [r5, #0]
 8009154:	6a21      	ldr	r1, [r4, #32]
 8009156:	602b      	str	r3, [r5, #0]
 8009158:	d030      	beq.n	80091bc <__sflush_r+0x90>
 800915a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	0759      	lsls	r1, r3, #29
 8009160:	d505      	bpl.n	800916e <__sflush_r+0x42>
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	1ad2      	subs	r2, r2, r3
 8009166:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009168:	b10b      	cbz	r3, 800916e <__sflush_r+0x42>
 800916a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	2300      	movs	r3, #0
 8009170:	4628      	mov	r0, r5
 8009172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009174:	6a21      	ldr	r1, [r4, #32]
 8009176:	47b0      	blx	r6
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	d106      	bne.n	800918c <__sflush_r+0x60>
 800917e:	6829      	ldr	r1, [r5, #0]
 8009180:	291d      	cmp	r1, #29
 8009182:	d82b      	bhi.n	80091dc <__sflush_r+0xb0>
 8009184:	4a28      	ldr	r2, [pc, #160]	@ (8009228 <__sflush_r+0xfc>)
 8009186:	40ca      	lsrs	r2, r1
 8009188:	07d6      	lsls	r6, r2, #31
 800918a:	d527      	bpl.n	80091dc <__sflush_r+0xb0>
 800918c:	2200      	movs	r2, #0
 800918e:	6062      	str	r2, [r4, #4]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	04d9      	lsls	r1, r3, #19
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	d504      	bpl.n	80091a2 <__sflush_r+0x76>
 8009198:	1c42      	adds	r2, r0, #1
 800919a:	d101      	bne.n	80091a0 <__sflush_r+0x74>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b903      	cbnz	r3, 80091a2 <__sflush_r+0x76>
 80091a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80091a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a4:	602f      	str	r7, [r5, #0]
 80091a6:	b1b9      	cbz	r1, 80091d8 <__sflush_r+0xac>
 80091a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091ac:	4299      	cmp	r1, r3
 80091ae:	d002      	beq.n	80091b6 <__sflush_r+0x8a>
 80091b0:	4628      	mov	r0, r5
 80091b2:	f7fe fa49 	bl	8007648 <_free_r>
 80091b6:	2300      	movs	r3, #0
 80091b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ba:	e00d      	b.n	80091d8 <__sflush_r+0xac>
 80091bc:	2301      	movs	r3, #1
 80091be:	4628      	mov	r0, r5
 80091c0:	47b0      	blx	r6
 80091c2:	4602      	mov	r2, r0
 80091c4:	1c50      	adds	r0, r2, #1
 80091c6:	d1c9      	bne.n	800915c <__sflush_r+0x30>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0c6      	beq.n	800915c <__sflush_r+0x30>
 80091ce:	2b1d      	cmp	r3, #29
 80091d0:	d001      	beq.n	80091d6 <__sflush_r+0xaa>
 80091d2:	2b16      	cmp	r3, #22
 80091d4:	d11d      	bne.n	8009212 <__sflush_r+0xe6>
 80091d6:	602f      	str	r7, [r5, #0]
 80091d8:	2000      	movs	r0, #0
 80091da:	e021      	b.n	8009220 <__sflush_r+0xf4>
 80091dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e0:	b21b      	sxth	r3, r3
 80091e2:	e01a      	b.n	800921a <__sflush_r+0xee>
 80091e4:	690f      	ldr	r7, [r1, #16]
 80091e6:	2f00      	cmp	r7, #0
 80091e8:	d0f6      	beq.n	80091d8 <__sflush_r+0xac>
 80091ea:	0793      	lsls	r3, r2, #30
 80091ec:	bf18      	it	ne
 80091ee:	2300      	movne	r3, #0
 80091f0:	680e      	ldr	r6, [r1, #0]
 80091f2:	bf08      	it	eq
 80091f4:	694b      	ldreq	r3, [r1, #20]
 80091f6:	1bf6      	subs	r6, r6, r7
 80091f8:	600f      	str	r7, [r1, #0]
 80091fa:	608b      	str	r3, [r1, #8]
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	ddeb      	ble.n	80091d8 <__sflush_r+0xac>
 8009200:	4633      	mov	r3, r6
 8009202:	463a      	mov	r2, r7
 8009204:	4628      	mov	r0, r5
 8009206:	6a21      	ldr	r1, [r4, #32]
 8009208:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800920c:	47e0      	blx	ip
 800920e:	2800      	cmp	r0, #0
 8009210:	dc07      	bgt.n	8009222 <__sflush_r+0xf6>
 8009212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921a:	f04f 30ff 	mov.w	r0, #4294967295
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009222:	4407      	add	r7, r0
 8009224:	1a36      	subs	r6, r6, r0
 8009226:	e7e9      	b.n	80091fc <__sflush_r+0xd0>
 8009228:	20400001 	.word	0x20400001

0800922c <_fflush_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	690b      	ldr	r3, [r1, #16]
 8009230:	4605      	mov	r5, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b913      	cbnz	r3, 800923c <_fflush_r+0x10>
 8009236:	2500      	movs	r5, #0
 8009238:	4628      	mov	r0, r5
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	b118      	cbz	r0, 8009246 <_fflush_r+0x1a>
 800923e:	6a03      	ldr	r3, [r0, #32]
 8009240:	b90b      	cbnz	r3, 8009246 <_fflush_r+0x1a>
 8009242:	f7fd fa77 	bl	8006734 <__sinit>
 8009246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0f3      	beq.n	8009236 <_fflush_r+0xa>
 800924e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009250:	07d0      	lsls	r0, r2, #31
 8009252:	d404      	bmi.n	800925e <_fflush_r+0x32>
 8009254:	0599      	lsls	r1, r3, #22
 8009256:	d402      	bmi.n	800925e <_fflush_r+0x32>
 8009258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800925a:	f7fd fb84 	bl	8006966 <__retarget_lock_acquire_recursive>
 800925e:	4628      	mov	r0, r5
 8009260:	4621      	mov	r1, r4
 8009262:	f7ff ff63 	bl	800912c <__sflush_r>
 8009266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009268:	4605      	mov	r5, r0
 800926a:	07da      	lsls	r2, r3, #31
 800926c:	d4e4      	bmi.n	8009238 <_fflush_r+0xc>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	059b      	lsls	r3, r3, #22
 8009272:	d4e1      	bmi.n	8009238 <_fflush_r+0xc>
 8009274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009276:	f7fd fb77 	bl	8006968 <__retarget_lock_release_recursive>
 800927a:	e7dd      	b.n	8009238 <_fflush_r+0xc>

0800927c <memmove>:
 800927c:	4288      	cmp	r0, r1
 800927e:	b510      	push	{r4, lr}
 8009280:	eb01 0402 	add.w	r4, r1, r2
 8009284:	d902      	bls.n	800928c <memmove+0x10>
 8009286:	4284      	cmp	r4, r0
 8009288:	4623      	mov	r3, r4
 800928a:	d807      	bhi.n	800929c <memmove+0x20>
 800928c:	1e43      	subs	r3, r0, #1
 800928e:	42a1      	cmp	r1, r4
 8009290:	d008      	beq.n	80092a4 <memmove+0x28>
 8009292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800929a:	e7f8      	b.n	800928e <memmove+0x12>
 800929c:	4601      	mov	r1, r0
 800929e:	4402      	add	r2, r0
 80092a0:	428a      	cmp	r2, r1
 80092a2:	d100      	bne.n	80092a6 <memmove+0x2a>
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ae:	e7f7      	b.n	80092a0 <memmove+0x24>

080092b0 <strncmp>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	b16a      	cbz	r2, 80092d0 <strncmp+0x20>
 80092b4:	3901      	subs	r1, #1
 80092b6:	1884      	adds	r4, r0, r2
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d103      	bne.n	80092cc <strncmp+0x1c>
 80092c4:	42a0      	cmp	r0, r4
 80092c6:	d001      	beq.n	80092cc <strncmp+0x1c>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d1f5      	bne.n	80092b8 <strncmp+0x8>
 80092cc:	1ad0      	subs	r0, r2, r3
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	4610      	mov	r0, r2
 80092d2:	e7fc      	b.n	80092ce <strncmp+0x1e>

080092d4 <_sbrk_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	2300      	movs	r3, #0
 80092d8:	4d05      	ldr	r5, [pc, #20]	@ (80092f0 <_sbrk_r+0x1c>)
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7f8 fa00 	bl	80016e4 <_sbrk>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_sbrk_r+0x1a>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_sbrk_r+0x1a>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200003e0 	.word	0x200003e0

080092f4 <memcpy>:
 80092f4:	440a      	add	r2, r1
 80092f6:	4291      	cmp	r1, r2
 80092f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fc:	d100      	bne.n	8009300 <memcpy+0xc>
 80092fe:	4770      	bx	lr
 8009300:	b510      	push	{r4, lr}
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	4291      	cmp	r1, r2
 8009308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930c:	d1f9      	bne.n	8009302 <memcpy+0xe>
 800930e:	bd10      	pop	{r4, pc}

08009310 <nan>:
 8009310:	2000      	movs	r0, #0
 8009312:	4901      	ldr	r1, [pc, #4]	@ (8009318 <nan+0x8>)
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	7ff80000 	.word	0x7ff80000

0800931c <__assert_func>:
 800931c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931e:	4614      	mov	r4, r2
 8009320:	461a      	mov	r2, r3
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <__assert_func+0x2c>)
 8009324:	4605      	mov	r5, r0
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68d8      	ldr	r0, [r3, #12]
 800932a:	b14c      	cbz	r4, 8009340 <__assert_func+0x24>
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <__assert_func+0x30>)
 800932e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009332:	9100      	str	r1, [sp, #0]
 8009334:	462b      	mov	r3, r5
 8009336:	4906      	ldr	r1, [pc, #24]	@ (8009350 <__assert_func+0x34>)
 8009338:	f000 fba8 	bl	8009a8c <fiprintf>
 800933c:	f000 fbb8 	bl	8009ab0 <abort>
 8009340:	4b04      	ldr	r3, [pc, #16]	@ (8009354 <__assert_func+0x38>)
 8009342:	461c      	mov	r4, r3
 8009344:	e7f3      	b.n	800932e <__assert_func+0x12>
 8009346:	bf00      	nop
 8009348:	20000020 	.word	0x20000020
 800934c:	0800a1ac 	.word	0x0800a1ac
 8009350:	0800a1b9 	.word	0x0800a1b9
 8009354:	0800a1e7 	.word	0x0800a1e7

08009358 <_calloc_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	fba1 5402 	umull	r5, r4, r1, r2
 800935e:	b934      	cbnz	r4, 800936e <_calloc_r+0x16>
 8009360:	4629      	mov	r1, r5
 8009362:	f7fe f9e3 	bl	800772c <_malloc_r>
 8009366:	4606      	mov	r6, r0
 8009368:	b928      	cbnz	r0, 8009376 <_calloc_r+0x1e>
 800936a:	4630      	mov	r0, r6
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	220c      	movs	r2, #12
 8009370:	2600      	movs	r6, #0
 8009372:	6002      	str	r2, [r0, #0]
 8009374:	e7f9      	b.n	800936a <_calloc_r+0x12>
 8009376:	462a      	mov	r2, r5
 8009378:	4621      	mov	r1, r4
 800937a:	f7fd fa76 	bl	800686a <memset>
 800937e:	e7f4      	b.n	800936a <_calloc_r+0x12>

08009380 <rshift>:
 8009380:	6903      	ldr	r3, [r0, #16]
 8009382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009386:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800938a:	f100 0414 	add.w	r4, r0, #20
 800938e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009392:	dd46      	ble.n	8009422 <rshift+0xa2>
 8009394:	f011 011f 	ands.w	r1, r1, #31
 8009398:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800939c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093a0:	d10c      	bne.n	80093bc <rshift+0x3c>
 80093a2:	4629      	mov	r1, r5
 80093a4:	f100 0710 	add.w	r7, r0, #16
 80093a8:	42b1      	cmp	r1, r6
 80093aa:	d335      	bcc.n	8009418 <rshift+0x98>
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	1eea      	subs	r2, r5, #3
 80093b2:	4296      	cmp	r6, r2
 80093b4:	bf38      	it	cc
 80093b6:	2300      	movcc	r3, #0
 80093b8:	4423      	add	r3, r4
 80093ba:	e015      	b.n	80093e8 <rshift+0x68>
 80093bc:	46a1      	mov	r9, r4
 80093be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093c2:	f1c1 0820 	rsb	r8, r1, #32
 80093c6:	40cf      	lsrs	r7, r1
 80093c8:	f105 0e04 	add.w	lr, r5, #4
 80093cc:	4576      	cmp	r6, lr
 80093ce:	46f4      	mov	ip, lr
 80093d0:	d816      	bhi.n	8009400 <rshift+0x80>
 80093d2:	1a9a      	subs	r2, r3, r2
 80093d4:	0092      	lsls	r2, r2, #2
 80093d6:	3a04      	subs	r2, #4
 80093d8:	3501      	adds	r5, #1
 80093da:	42ae      	cmp	r6, r5
 80093dc:	bf38      	it	cc
 80093de:	2200      	movcc	r2, #0
 80093e0:	18a3      	adds	r3, r4, r2
 80093e2:	50a7      	str	r7, [r4, r2]
 80093e4:	b107      	cbz	r7, 80093e8 <rshift+0x68>
 80093e6:	3304      	adds	r3, #4
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	eba3 0204 	sub.w	r2, r3, r4
 80093ee:	bf08      	it	eq
 80093f0:	2300      	moveq	r3, #0
 80093f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093f6:	6102      	str	r2, [r0, #16]
 80093f8:	bf08      	it	eq
 80093fa:	6143      	streq	r3, [r0, #20]
 80093fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009400:	f8dc c000 	ldr.w	ip, [ip]
 8009404:	fa0c fc08 	lsl.w	ip, ip, r8
 8009408:	ea4c 0707 	orr.w	r7, ip, r7
 800940c:	f849 7b04 	str.w	r7, [r9], #4
 8009410:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009414:	40cf      	lsrs	r7, r1
 8009416:	e7d9      	b.n	80093cc <rshift+0x4c>
 8009418:	f851 cb04 	ldr.w	ip, [r1], #4
 800941c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009420:	e7c2      	b.n	80093a8 <rshift+0x28>
 8009422:	4623      	mov	r3, r4
 8009424:	e7e0      	b.n	80093e8 <rshift+0x68>

08009426 <__hexdig_fun>:
 8009426:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800942a:	2b09      	cmp	r3, #9
 800942c:	d802      	bhi.n	8009434 <__hexdig_fun+0xe>
 800942e:	3820      	subs	r0, #32
 8009430:	b2c0      	uxtb	r0, r0
 8009432:	4770      	bx	lr
 8009434:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009438:	2b05      	cmp	r3, #5
 800943a:	d801      	bhi.n	8009440 <__hexdig_fun+0x1a>
 800943c:	3847      	subs	r0, #71	@ 0x47
 800943e:	e7f7      	b.n	8009430 <__hexdig_fun+0xa>
 8009440:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009444:	2b05      	cmp	r3, #5
 8009446:	d801      	bhi.n	800944c <__hexdig_fun+0x26>
 8009448:	3827      	subs	r0, #39	@ 0x27
 800944a:	e7f1      	b.n	8009430 <__hexdig_fun+0xa>
 800944c:	2000      	movs	r0, #0
 800944e:	4770      	bx	lr

08009450 <__gethex>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	468a      	mov	sl, r1
 8009456:	4690      	mov	r8, r2
 8009458:	b085      	sub	sp, #20
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	9001      	str	r0, [sp, #4]
 8009460:	1c9c      	adds	r4, r3, #2
 8009462:	46a1      	mov	r9, r4
 8009464:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009468:	2830      	cmp	r0, #48	@ 0x30
 800946a:	d0fa      	beq.n	8009462 <__gethex+0x12>
 800946c:	eba9 0303 	sub.w	r3, r9, r3
 8009470:	f1a3 0b02 	sub.w	fp, r3, #2
 8009474:	f7ff ffd7 	bl	8009426 <__hexdig_fun>
 8009478:	4605      	mov	r5, r0
 800947a:	2800      	cmp	r0, #0
 800947c:	d168      	bne.n	8009550 <__gethex+0x100>
 800947e:	2201      	movs	r2, #1
 8009480:	4648      	mov	r0, r9
 8009482:	499f      	ldr	r1, [pc, #636]	@ (8009700 <__gethex+0x2b0>)
 8009484:	f7ff ff14 	bl	80092b0 <strncmp>
 8009488:	4607      	mov	r7, r0
 800948a:	2800      	cmp	r0, #0
 800948c:	d167      	bne.n	800955e <__gethex+0x10e>
 800948e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009492:	4626      	mov	r6, r4
 8009494:	f7ff ffc7 	bl	8009426 <__hexdig_fun>
 8009498:	2800      	cmp	r0, #0
 800949a:	d062      	beq.n	8009562 <__gethex+0x112>
 800949c:	4623      	mov	r3, r4
 800949e:	7818      	ldrb	r0, [r3, #0]
 80094a0:	4699      	mov	r9, r3
 80094a2:	2830      	cmp	r0, #48	@ 0x30
 80094a4:	f103 0301 	add.w	r3, r3, #1
 80094a8:	d0f9      	beq.n	800949e <__gethex+0x4e>
 80094aa:	f7ff ffbc 	bl	8009426 <__hexdig_fun>
 80094ae:	fab0 f580 	clz	r5, r0
 80094b2:	f04f 0b01 	mov.w	fp, #1
 80094b6:	096d      	lsrs	r5, r5, #5
 80094b8:	464a      	mov	r2, r9
 80094ba:	4616      	mov	r6, r2
 80094bc:	7830      	ldrb	r0, [r6, #0]
 80094be:	3201      	adds	r2, #1
 80094c0:	f7ff ffb1 	bl	8009426 <__hexdig_fun>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d1f8      	bne.n	80094ba <__gethex+0x6a>
 80094c8:	2201      	movs	r2, #1
 80094ca:	4630      	mov	r0, r6
 80094cc:	498c      	ldr	r1, [pc, #560]	@ (8009700 <__gethex+0x2b0>)
 80094ce:	f7ff feef 	bl	80092b0 <strncmp>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d13f      	bne.n	8009556 <__gethex+0x106>
 80094d6:	b944      	cbnz	r4, 80094ea <__gethex+0x9a>
 80094d8:	1c74      	adds	r4, r6, #1
 80094da:	4622      	mov	r2, r4
 80094dc:	4616      	mov	r6, r2
 80094de:	7830      	ldrb	r0, [r6, #0]
 80094e0:	3201      	adds	r2, #1
 80094e2:	f7ff ffa0 	bl	8009426 <__hexdig_fun>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d1f8      	bne.n	80094dc <__gethex+0x8c>
 80094ea:	1ba4      	subs	r4, r4, r6
 80094ec:	00a7      	lsls	r7, r4, #2
 80094ee:	7833      	ldrb	r3, [r6, #0]
 80094f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80094f4:	2b50      	cmp	r3, #80	@ 0x50
 80094f6:	d13e      	bne.n	8009576 <__gethex+0x126>
 80094f8:	7873      	ldrb	r3, [r6, #1]
 80094fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80094fc:	d033      	beq.n	8009566 <__gethex+0x116>
 80094fe:	2b2d      	cmp	r3, #45	@ 0x2d
 8009500:	d034      	beq.n	800956c <__gethex+0x11c>
 8009502:	2400      	movs	r4, #0
 8009504:	1c71      	adds	r1, r6, #1
 8009506:	7808      	ldrb	r0, [r1, #0]
 8009508:	f7ff ff8d 	bl	8009426 <__hexdig_fun>
 800950c:	1e43      	subs	r3, r0, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b18      	cmp	r3, #24
 8009512:	d830      	bhi.n	8009576 <__gethex+0x126>
 8009514:	f1a0 0210 	sub.w	r2, r0, #16
 8009518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800951c:	f7ff ff83 	bl	8009426 <__hexdig_fun>
 8009520:	f100 3cff 	add.w	ip, r0, #4294967295
 8009524:	fa5f fc8c 	uxtb.w	ip, ip
 8009528:	f1bc 0f18 	cmp.w	ip, #24
 800952c:	f04f 030a 	mov.w	r3, #10
 8009530:	d91e      	bls.n	8009570 <__gethex+0x120>
 8009532:	b104      	cbz	r4, 8009536 <__gethex+0xe6>
 8009534:	4252      	negs	r2, r2
 8009536:	4417      	add	r7, r2
 8009538:	f8ca 1000 	str.w	r1, [sl]
 800953c:	b1ed      	cbz	r5, 800957a <__gethex+0x12a>
 800953e:	f1bb 0f00 	cmp.w	fp, #0
 8009542:	bf0c      	ite	eq
 8009544:	2506      	moveq	r5, #6
 8009546:	2500      	movne	r5, #0
 8009548:	4628      	mov	r0, r5
 800954a:	b005      	add	sp, #20
 800954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009550:	2500      	movs	r5, #0
 8009552:	462c      	mov	r4, r5
 8009554:	e7b0      	b.n	80094b8 <__gethex+0x68>
 8009556:	2c00      	cmp	r4, #0
 8009558:	d1c7      	bne.n	80094ea <__gethex+0x9a>
 800955a:	4627      	mov	r7, r4
 800955c:	e7c7      	b.n	80094ee <__gethex+0x9e>
 800955e:	464e      	mov	r6, r9
 8009560:	462f      	mov	r7, r5
 8009562:	2501      	movs	r5, #1
 8009564:	e7c3      	b.n	80094ee <__gethex+0x9e>
 8009566:	2400      	movs	r4, #0
 8009568:	1cb1      	adds	r1, r6, #2
 800956a:	e7cc      	b.n	8009506 <__gethex+0xb6>
 800956c:	2401      	movs	r4, #1
 800956e:	e7fb      	b.n	8009568 <__gethex+0x118>
 8009570:	fb03 0002 	mla	r0, r3, r2, r0
 8009574:	e7ce      	b.n	8009514 <__gethex+0xc4>
 8009576:	4631      	mov	r1, r6
 8009578:	e7de      	b.n	8009538 <__gethex+0xe8>
 800957a:	4629      	mov	r1, r5
 800957c:	eba6 0309 	sub.w	r3, r6, r9
 8009580:	3b01      	subs	r3, #1
 8009582:	2b07      	cmp	r3, #7
 8009584:	dc0a      	bgt.n	800959c <__gethex+0x14c>
 8009586:	9801      	ldr	r0, [sp, #4]
 8009588:	f7fe f95c 	bl	8007844 <_Balloc>
 800958c:	4604      	mov	r4, r0
 800958e:	b940      	cbnz	r0, 80095a2 <__gethex+0x152>
 8009590:	4602      	mov	r2, r0
 8009592:	21e4      	movs	r1, #228	@ 0xe4
 8009594:	4b5b      	ldr	r3, [pc, #364]	@ (8009704 <__gethex+0x2b4>)
 8009596:	485c      	ldr	r0, [pc, #368]	@ (8009708 <__gethex+0x2b8>)
 8009598:	f7ff fec0 	bl	800931c <__assert_func>
 800959c:	3101      	adds	r1, #1
 800959e:	105b      	asrs	r3, r3, #1
 80095a0:	e7ef      	b.n	8009582 <__gethex+0x132>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f100 0a14 	add.w	sl, r0, #20
 80095a8:	4655      	mov	r5, sl
 80095aa:	469b      	mov	fp, r3
 80095ac:	45b1      	cmp	r9, r6
 80095ae:	d337      	bcc.n	8009620 <__gethex+0x1d0>
 80095b0:	f845 bb04 	str.w	fp, [r5], #4
 80095b4:	eba5 050a 	sub.w	r5, r5, sl
 80095b8:	10ad      	asrs	r5, r5, #2
 80095ba:	6125      	str	r5, [r4, #16]
 80095bc:	4658      	mov	r0, fp
 80095be:	f7fe fa33 	bl	8007a28 <__hi0bits>
 80095c2:	016d      	lsls	r5, r5, #5
 80095c4:	f8d8 6000 	ldr.w	r6, [r8]
 80095c8:	1a2d      	subs	r5, r5, r0
 80095ca:	42b5      	cmp	r5, r6
 80095cc:	dd54      	ble.n	8009678 <__gethex+0x228>
 80095ce:	1bad      	subs	r5, r5, r6
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7fe fdb5 	bl	8008142 <__any_on>
 80095d8:	4681      	mov	r9, r0
 80095da:	b178      	cbz	r0, 80095fc <__gethex+0x1ac>
 80095dc:	f04f 0901 	mov.w	r9, #1
 80095e0:	1e6b      	subs	r3, r5, #1
 80095e2:	1159      	asrs	r1, r3, #5
 80095e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095e8:	f003 021f 	and.w	r2, r3, #31
 80095ec:	fa09 f202 	lsl.w	r2, r9, r2
 80095f0:	420a      	tst	r2, r1
 80095f2:	d003      	beq.n	80095fc <__gethex+0x1ac>
 80095f4:	454b      	cmp	r3, r9
 80095f6:	dc36      	bgt.n	8009666 <__gethex+0x216>
 80095f8:	f04f 0902 	mov.w	r9, #2
 80095fc:	4629      	mov	r1, r5
 80095fe:	4620      	mov	r0, r4
 8009600:	f7ff febe 	bl	8009380 <rshift>
 8009604:	442f      	add	r7, r5
 8009606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800960a:	42bb      	cmp	r3, r7
 800960c:	da42      	bge.n	8009694 <__gethex+0x244>
 800960e:	4621      	mov	r1, r4
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	f7fe f957 	bl	80078c4 <_Bfree>
 8009616:	2300      	movs	r3, #0
 8009618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800961a:	25a3      	movs	r5, #163	@ 0xa3
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e793      	b.n	8009548 <__gethex+0xf8>
 8009620:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009624:	2a2e      	cmp	r2, #46	@ 0x2e
 8009626:	d012      	beq.n	800964e <__gethex+0x1fe>
 8009628:	2b20      	cmp	r3, #32
 800962a:	d104      	bne.n	8009636 <__gethex+0x1e6>
 800962c:	f845 bb04 	str.w	fp, [r5], #4
 8009630:	f04f 0b00 	mov.w	fp, #0
 8009634:	465b      	mov	r3, fp
 8009636:	7830      	ldrb	r0, [r6, #0]
 8009638:	9303      	str	r3, [sp, #12]
 800963a:	f7ff fef4 	bl	8009426 <__hexdig_fun>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	f000 000f 	and.w	r0, r0, #15
 8009644:	4098      	lsls	r0, r3
 8009646:	ea4b 0b00 	orr.w	fp, fp, r0
 800964a:	3304      	adds	r3, #4
 800964c:	e7ae      	b.n	80095ac <__gethex+0x15c>
 800964e:	45b1      	cmp	r9, r6
 8009650:	d8ea      	bhi.n	8009628 <__gethex+0x1d8>
 8009652:	2201      	movs	r2, #1
 8009654:	4630      	mov	r0, r6
 8009656:	492a      	ldr	r1, [pc, #168]	@ (8009700 <__gethex+0x2b0>)
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	f7ff fe29 	bl	80092b0 <strncmp>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	2800      	cmp	r0, #0
 8009662:	d1e1      	bne.n	8009628 <__gethex+0x1d8>
 8009664:	e7a2      	b.n	80095ac <__gethex+0x15c>
 8009666:	4620      	mov	r0, r4
 8009668:	1ea9      	subs	r1, r5, #2
 800966a:	f7fe fd6a 	bl	8008142 <__any_on>
 800966e:	2800      	cmp	r0, #0
 8009670:	d0c2      	beq.n	80095f8 <__gethex+0x1a8>
 8009672:	f04f 0903 	mov.w	r9, #3
 8009676:	e7c1      	b.n	80095fc <__gethex+0x1ac>
 8009678:	da09      	bge.n	800968e <__gethex+0x23e>
 800967a:	1b75      	subs	r5, r6, r5
 800967c:	4621      	mov	r1, r4
 800967e:	462a      	mov	r2, r5
 8009680:	9801      	ldr	r0, [sp, #4]
 8009682:	f7fe fb2f 	bl	8007ce4 <__lshift>
 8009686:	4604      	mov	r4, r0
 8009688:	1b7f      	subs	r7, r7, r5
 800968a:	f100 0a14 	add.w	sl, r0, #20
 800968e:	f04f 0900 	mov.w	r9, #0
 8009692:	e7b8      	b.n	8009606 <__gethex+0x1b6>
 8009694:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009698:	42bd      	cmp	r5, r7
 800969a:	dd6f      	ble.n	800977c <__gethex+0x32c>
 800969c:	1bed      	subs	r5, r5, r7
 800969e:	42ae      	cmp	r6, r5
 80096a0:	dc34      	bgt.n	800970c <__gethex+0x2bc>
 80096a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d022      	beq.n	80096f0 <__gethex+0x2a0>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d024      	beq.n	80096f8 <__gethex+0x2a8>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d115      	bne.n	80096de <__gethex+0x28e>
 80096b2:	42ae      	cmp	r6, r5
 80096b4:	d113      	bne.n	80096de <__gethex+0x28e>
 80096b6:	2e01      	cmp	r6, #1
 80096b8:	d10b      	bne.n	80096d2 <__gethex+0x282>
 80096ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096be:	9a02      	ldr	r2, [sp, #8]
 80096c0:	2562      	movs	r5, #98	@ 0x62
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	2301      	movs	r3, #1
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	f8ca 3000 	str.w	r3, [sl]
 80096cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ce:	601c      	str	r4, [r3, #0]
 80096d0:	e73a      	b.n	8009548 <__gethex+0xf8>
 80096d2:	4620      	mov	r0, r4
 80096d4:	1e71      	subs	r1, r6, #1
 80096d6:	f7fe fd34 	bl	8008142 <__any_on>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d1ed      	bne.n	80096ba <__gethex+0x26a>
 80096de:	4621      	mov	r1, r4
 80096e0:	9801      	ldr	r0, [sp, #4]
 80096e2:	f7fe f8ef 	bl	80078c4 <_Bfree>
 80096e6:	2300      	movs	r3, #0
 80096e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096ea:	2550      	movs	r5, #80	@ 0x50
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	e72b      	b.n	8009548 <__gethex+0xf8>
 80096f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1f3      	bne.n	80096de <__gethex+0x28e>
 80096f6:	e7e0      	b.n	80096ba <__gethex+0x26a>
 80096f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1dd      	bne.n	80096ba <__gethex+0x26a>
 80096fe:	e7ee      	b.n	80096de <__gethex+0x28e>
 8009700:	0800a191 	.word	0x0800a191
 8009704:	0800a127 	.word	0x0800a127
 8009708:	0800a1e8 	.word	0x0800a1e8
 800970c:	1e6f      	subs	r7, r5, #1
 800970e:	f1b9 0f00 	cmp.w	r9, #0
 8009712:	d130      	bne.n	8009776 <__gethex+0x326>
 8009714:	b127      	cbz	r7, 8009720 <__gethex+0x2d0>
 8009716:	4639      	mov	r1, r7
 8009718:	4620      	mov	r0, r4
 800971a:	f7fe fd12 	bl	8008142 <__any_on>
 800971e:	4681      	mov	r9, r0
 8009720:	2301      	movs	r3, #1
 8009722:	4629      	mov	r1, r5
 8009724:	1b76      	subs	r6, r6, r5
 8009726:	2502      	movs	r5, #2
 8009728:	117a      	asrs	r2, r7, #5
 800972a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800972e:	f007 071f 	and.w	r7, r7, #31
 8009732:	40bb      	lsls	r3, r7
 8009734:	4213      	tst	r3, r2
 8009736:	4620      	mov	r0, r4
 8009738:	bf18      	it	ne
 800973a:	f049 0902 	orrne.w	r9, r9, #2
 800973e:	f7ff fe1f 	bl	8009380 <rshift>
 8009742:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009746:	f1b9 0f00 	cmp.w	r9, #0
 800974a:	d047      	beq.n	80097dc <__gethex+0x38c>
 800974c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d015      	beq.n	8009780 <__gethex+0x330>
 8009754:	2b03      	cmp	r3, #3
 8009756:	d017      	beq.n	8009788 <__gethex+0x338>
 8009758:	2b01      	cmp	r3, #1
 800975a:	d109      	bne.n	8009770 <__gethex+0x320>
 800975c:	f019 0f02 	tst.w	r9, #2
 8009760:	d006      	beq.n	8009770 <__gethex+0x320>
 8009762:	f8da 3000 	ldr.w	r3, [sl]
 8009766:	ea49 0903 	orr.w	r9, r9, r3
 800976a:	f019 0f01 	tst.w	r9, #1
 800976e:	d10e      	bne.n	800978e <__gethex+0x33e>
 8009770:	f045 0510 	orr.w	r5, r5, #16
 8009774:	e032      	b.n	80097dc <__gethex+0x38c>
 8009776:	f04f 0901 	mov.w	r9, #1
 800977a:	e7d1      	b.n	8009720 <__gethex+0x2d0>
 800977c:	2501      	movs	r5, #1
 800977e:	e7e2      	b.n	8009746 <__gethex+0x2f6>
 8009780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009782:	f1c3 0301 	rsb	r3, r3, #1
 8009786:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <__gethex+0x320>
 800978e:	f04f 0c00 	mov.w	ip, #0
 8009792:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009796:	f104 0314 	add.w	r3, r4, #20
 800979a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800979e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097ac:	d01b      	beq.n	80097e6 <__gethex+0x396>
 80097ae:	3201      	adds	r2, #1
 80097b0:	6002      	str	r2, [r0, #0]
 80097b2:	2d02      	cmp	r5, #2
 80097b4:	f104 0314 	add.w	r3, r4, #20
 80097b8:	d13c      	bne.n	8009834 <__gethex+0x3e4>
 80097ba:	f8d8 2000 	ldr.w	r2, [r8]
 80097be:	3a01      	subs	r2, #1
 80097c0:	42b2      	cmp	r2, r6
 80097c2:	d109      	bne.n	80097d8 <__gethex+0x388>
 80097c4:	2201      	movs	r2, #1
 80097c6:	1171      	asrs	r1, r6, #5
 80097c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097cc:	f006 061f 	and.w	r6, r6, #31
 80097d0:	fa02 f606 	lsl.w	r6, r2, r6
 80097d4:	421e      	tst	r6, r3
 80097d6:	d13a      	bne.n	800984e <__gethex+0x3fe>
 80097d8:	f045 0520 	orr.w	r5, r5, #32
 80097dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097de:	601c      	str	r4, [r3, #0]
 80097e0:	9b02      	ldr	r3, [sp, #8]
 80097e2:	601f      	str	r7, [r3, #0]
 80097e4:	e6b0      	b.n	8009548 <__gethex+0xf8>
 80097e6:	4299      	cmp	r1, r3
 80097e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80097ec:	d8d9      	bhi.n	80097a2 <__gethex+0x352>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	459b      	cmp	fp, r3
 80097f2:	db17      	blt.n	8009824 <__gethex+0x3d4>
 80097f4:	6861      	ldr	r1, [r4, #4]
 80097f6:	9801      	ldr	r0, [sp, #4]
 80097f8:	3101      	adds	r1, #1
 80097fa:	f7fe f823 	bl	8007844 <_Balloc>
 80097fe:	4681      	mov	r9, r0
 8009800:	b918      	cbnz	r0, 800980a <__gethex+0x3ba>
 8009802:	4602      	mov	r2, r0
 8009804:	2184      	movs	r1, #132	@ 0x84
 8009806:	4b19      	ldr	r3, [pc, #100]	@ (800986c <__gethex+0x41c>)
 8009808:	e6c5      	b.n	8009596 <__gethex+0x146>
 800980a:	6922      	ldr	r2, [r4, #16]
 800980c:	f104 010c 	add.w	r1, r4, #12
 8009810:	3202      	adds	r2, #2
 8009812:	0092      	lsls	r2, r2, #2
 8009814:	300c      	adds	r0, #12
 8009816:	f7ff fd6d 	bl	80092f4 <memcpy>
 800981a:	4621      	mov	r1, r4
 800981c:	9801      	ldr	r0, [sp, #4]
 800981e:	f7fe f851 	bl	80078c4 <_Bfree>
 8009822:	464c      	mov	r4, r9
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	6122      	str	r2, [r4, #16]
 800982a:	2201      	movs	r2, #1
 800982c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009830:	615a      	str	r2, [r3, #20]
 8009832:	e7be      	b.n	80097b2 <__gethex+0x362>
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	455a      	cmp	r2, fp
 8009838:	dd0b      	ble.n	8009852 <__gethex+0x402>
 800983a:	2101      	movs	r1, #1
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff fd9f 	bl	8009380 <rshift>
 8009842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009846:	3701      	adds	r7, #1
 8009848:	42bb      	cmp	r3, r7
 800984a:	f6ff aee0 	blt.w	800960e <__gethex+0x1be>
 800984e:	2501      	movs	r5, #1
 8009850:	e7c2      	b.n	80097d8 <__gethex+0x388>
 8009852:	f016 061f 	ands.w	r6, r6, #31
 8009856:	d0fa      	beq.n	800984e <__gethex+0x3fe>
 8009858:	4453      	add	r3, sl
 800985a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800985e:	f7fe f8e3 	bl	8007a28 <__hi0bits>
 8009862:	f1c6 0620 	rsb	r6, r6, #32
 8009866:	42b0      	cmp	r0, r6
 8009868:	dbe7      	blt.n	800983a <__gethex+0x3ea>
 800986a:	e7f0      	b.n	800984e <__gethex+0x3fe>
 800986c:	0800a127 	.word	0x0800a127

08009870 <L_shift>:
 8009870:	f1c2 0208 	rsb	r2, r2, #8
 8009874:	0092      	lsls	r2, r2, #2
 8009876:	b570      	push	{r4, r5, r6, lr}
 8009878:	f1c2 0620 	rsb	r6, r2, #32
 800987c:	6843      	ldr	r3, [r0, #4]
 800987e:	6804      	ldr	r4, [r0, #0]
 8009880:	fa03 f506 	lsl.w	r5, r3, r6
 8009884:	432c      	orrs	r4, r5
 8009886:	40d3      	lsrs	r3, r2
 8009888:	6004      	str	r4, [r0, #0]
 800988a:	f840 3f04 	str.w	r3, [r0, #4]!
 800988e:	4288      	cmp	r0, r1
 8009890:	d3f4      	bcc.n	800987c <L_shift+0xc>
 8009892:	bd70      	pop	{r4, r5, r6, pc}

08009894 <__match>:
 8009894:	b530      	push	{r4, r5, lr}
 8009896:	6803      	ldr	r3, [r0, #0]
 8009898:	3301      	adds	r3, #1
 800989a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989e:	b914      	cbnz	r4, 80098a6 <__match+0x12>
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	2001      	movs	r0, #1
 80098a4:	bd30      	pop	{r4, r5, pc}
 80098a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80098ae:	2d19      	cmp	r5, #25
 80098b0:	bf98      	it	ls
 80098b2:	3220      	addls	r2, #32
 80098b4:	42a2      	cmp	r2, r4
 80098b6:	d0f0      	beq.n	800989a <__match+0x6>
 80098b8:	2000      	movs	r0, #0
 80098ba:	e7f3      	b.n	80098a4 <__match+0x10>

080098bc <__hexnan>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	2500      	movs	r5, #0
 80098c2:	680b      	ldr	r3, [r1, #0]
 80098c4:	4682      	mov	sl, r0
 80098c6:	115e      	asrs	r6, r3, #5
 80098c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098cc:	f013 031f 	ands.w	r3, r3, #31
 80098d0:	bf18      	it	ne
 80098d2:	3604      	addne	r6, #4
 80098d4:	1f37      	subs	r7, r6, #4
 80098d6:	4690      	mov	r8, r2
 80098d8:	46b9      	mov	r9, r7
 80098da:	463c      	mov	r4, r7
 80098dc:	46ab      	mov	fp, r5
 80098de:	b087      	sub	sp, #28
 80098e0:	6801      	ldr	r1, [r0, #0]
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	f846 5c04 	str.w	r5, [r6, #-4]
 80098e8:	9502      	str	r5, [sp, #8]
 80098ea:	784a      	ldrb	r2, [r1, #1]
 80098ec:	1c4b      	adds	r3, r1, #1
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	b342      	cbz	r2, 8009944 <__hexnan+0x88>
 80098f2:	4610      	mov	r0, r2
 80098f4:	9105      	str	r1, [sp, #20]
 80098f6:	9204      	str	r2, [sp, #16]
 80098f8:	f7ff fd95 	bl	8009426 <__hexdig_fun>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d151      	bne.n	80099a4 <__hexnan+0xe8>
 8009900:	9a04      	ldr	r2, [sp, #16]
 8009902:	9905      	ldr	r1, [sp, #20]
 8009904:	2a20      	cmp	r2, #32
 8009906:	d818      	bhi.n	800993a <__hexnan+0x7e>
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	459b      	cmp	fp, r3
 800990c:	dd13      	ble.n	8009936 <__hexnan+0x7a>
 800990e:	454c      	cmp	r4, r9
 8009910:	d206      	bcs.n	8009920 <__hexnan+0x64>
 8009912:	2d07      	cmp	r5, #7
 8009914:	dc04      	bgt.n	8009920 <__hexnan+0x64>
 8009916:	462a      	mov	r2, r5
 8009918:	4649      	mov	r1, r9
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff ffa8 	bl	8009870 <L_shift>
 8009920:	4544      	cmp	r4, r8
 8009922:	d952      	bls.n	80099ca <__hexnan+0x10e>
 8009924:	2300      	movs	r3, #0
 8009926:	f1a4 0904 	sub.w	r9, r4, #4
 800992a:	f844 3c04 	str.w	r3, [r4, #-4]
 800992e:	461d      	mov	r5, r3
 8009930:	464c      	mov	r4, r9
 8009932:	f8cd b008 	str.w	fp, [sp, #8]
 8009936:	9903      	ldr	r1, [sp, #12]
 8009938:	e7d7      	b.n	80098ea <__hexnan+0x2e>
 800993a:	2a29      	cmp	r2, #41	@ 0x29
 800993c:	d157      	bne.n	80099ee <__hexnan+0x132>
 800993e:	3102      	adds	r1, #2
 8009940:	f8ca 1000 	str.w	r1, [sl]
 8009944:	f1bb 0f00 	cmp.w	fp, #0
 8009948:	d051      	beq.n	80099ee <__hexnan+0x132>
 800994a:	454c      	cmp	r4, r9
 800994c:	d206      	bcs.n	800995c <__hexnan+0xa0>
 800994e:	2d07      	cmp	r5, #7
 8009950:	dc04      	bgt.n	800995c <__hexnan+0xa0>
 8009952:	462a      	mov	r2, r5
 8009954:	4649      	mov	r1, r9
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff ff8a 	bl	8009870 <L_shift>
 800995c:	4544      	cmp	r4, r8
 800995e:	d936      	bls.n	80099ce <__hexnan+0x112>
 8009960:	4623      	mov	r3, r4
 8009962:	f1a8 0204 	sub.w	r2, r8, #4
 8009966:	f853 1b04 	ldr.w	r1, [r3], #4
 800996a:	429f      	cmp	r7, r3
 800996c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009970:	d2f9      	bcs.n	8009966 <__hexnan+0xaa>
 8009972:	1b3b      	subs	r3, r7, r4
 8009974:	f023 0303 	bic.w	r3, r3, #3
 8009978:	3304      	adds	r3, #4
 800997a:	3401      	adds	r4, #1
 800997c:	3e03      	subs	r6, #3
 800997e:	42b4      	cmp	r4, r6
 8009980:	bf88      	it	hi
 8009982:	2304      	movhi	r3, #4
 8009984:	2200      	movs	r2, #0
 8009986:	4443      	add	r3, r8
 8009988:	f843 2b04 	str.w	r2, [r3], #4
 800998c:	429f      	cmp	r7, r3
 800998e:	d2fb      	bcs.n	8009988 <__hexnan+0xcc>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	b91b      	cbnz	r3, 800999c <__hexnan+0xe0>
 8009994:	4547      	cmp	r7, r8
 8009996:	d128      	bne.n	80099ea <__hexnan+0x12e>
 8009998:	2301      	movs	r3, #1
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	2005      	movs	r0, #5
 800999e:	b007      	add	sp, #28
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	3501      	adds	r5, #1
 80099a6:	2d08      	cmp	r5, #8
 80099a8:	f10b 0b01 	add.w	fp, fp, #1
 80099ac:	dd06      	ble.n	80099bc <__hexnan+0x100>
 80099ae:	4544      	cmp	r4, r8
 80099b0:	d9c1      	bls.n	8009936 <__hexnan+0x7a>
 80099b2:	2300      	movs	r3, #0
 80099b4:	2501      	movs	r5, #1
 80099b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ba:	3c04      	subs	r4, #4
 80099bc:	6822      	ldr	r2, [r4, #0]
 80099be:	f000 000f 	and.w	r0, r0, #15
 80099c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	e7b5      	b.n	8009936 <__hexnan+0x7a>
 80099ca:	2508      	movs	r5, #8
 80099cc:	e7b3      	b.n	8009936 <__hexnan+0x7a>
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0dd      	beq.n	8009990 <__hexnan+0xd4>
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	f1c3 0320 	rsb	r3, r3, #32
 80099dc:	40da      	lsrs	r2, r3
 80099de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80099e2:	4013      	ands	r3, r2
 80099e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80099e8:	e7d2      	b.n	8009990 <__hexnan+0xd4>
 80099ea:	3f04      	subs	r7, #4
 80099ec:	e7d0      	b.n	8009990 <__hexnan+0xd4>
 80099ee:	2004      	movs	r0, #4
 80099f0:	e7d5      	b.n	800999e <__hexnan+0xe2>

080099f2 <__ascii_mbtowc>:
 80099f2:	b082      	sub	sp, #8
 80099f4:	b901      	cbnz	r1, 80099f8 <__ascii_mbtowc+0x6>
 80099f6:	a901      	add	r1, sp, #4
 80099f8:	b142      	cbz	r2, 8009a0c <__ascii_mbtowc+0x1a>
 80099fa:	b14b      	cbz	r3, 8009a10 <__ascii_mbtowc+0x1e>
 80099fc:	7813      	ldrb	r3, [r2, #0]
 80099fe:	600b      	str	r3, [r1, #0]
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	1e10      	subs	r0, r2, #0
 8009a04:	bf18      	it	ne
 8009a06:	2001      	movne	r0, #1
 8009a08:	b002      	add	sp, #8
 8009a0a:	4770      	bx	lr
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	e7fb      	b.n	8009a08 <__ascii_mbtowc+0x16>
 8009a10:	f06f 0001 	mvn.w	r0, #1
 8009a14:	e7f8      	b.n	8009a08 <__ascii_mbtowc+0x16>

08009a16 <_realloc_r>:
 8009a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	460d      	mov	r5, r1
 8009a20:	b921      	cbnz	r1, 8009a2c <_realloc_r+0x16>
 8009a22:	4611      	mov	r1, r2
 8009a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a28:	f7fd be80 	b.w	800772c <_malloc_r>
 8009a2c:	b92a      	cbnz	r2, 8009a3a <_realloc_r+0x24>
 8009a2e:	f7fd fe0b 	bl	8007648 <_free_r>
 8009a32:	4625      	mov	r5, r4
 8009a34:	4628      	mov	r0, r5
 8009a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a3a:	f000 f840 	bl	8009abe <_malloc_usable_size_r>
 8009a3e:	4284      	cmp	r4, r0
 8009a40:	4606      	mov	r6, r0
 8009a42:	d802      	bhi.n	8009a4a <_realloc_r+0x34>
 8009a44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a48:	d8f4      	bhi.n	8009a34 <_realloc_r+0x1e>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7fd fe6d 	bl	800772c <_malloc_r>
 8009a52:	4680      	mov	r8, r0
 8009a54:	b908      	cbnz	r0, 8009a5a <_realloc_r+0x44>
 8009a56:	4645      	mov	r5, r8
 8009a58:	e7ec      	b.n	8009a34 <_realloc_r+0x1e>
 8009a5a:	42b4      	cmp	r4, r6
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	bf28      	it	cs
 8009a62:	4632      	movcs	r2, r6
 8009a64:	f7ff fc46 	bl	80092f4 <memcpy>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f7fd fdec 	bl	8007648 <_free_r>
 8009a70:	e7f1      	b.n	8009a56 <_realloc_r+0x40>

08009a72 <__ascii_wctomb>:
 8009a72:	4603      	mov	r3, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	b141      	cbz	r1, 8009a8a <__ascii_wctomb+0x18>
 8009a78:	2aff      	cmp	r2, #255	@ 0xff
 8009a7a:	d904      	bls.n	8009a86 <__ascii_wctomb+0x14>
 8009a7c:	228a      	movs	r2, #138	@ 0x8a
 8009a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	4770      	bx	lr
 8009a86:	2001      	movs	r0, #1
 8009a88:	700a      	strb	r2, [r1, #0]
 8009a8a:	4770      	bx	lr

08009a8c <fiprintf>:
 8009a8c:	b40e      	push	{r1, r2, r3}
 8009a8e:	b503      	push	{r0, r1, lr}
 8009a90:	4601      	mov	r1, r0
 8009a92:	ab03      	add	r3, sp, #12
 8009a94:	4805      	ldr	r0, [pc, #20]	@ (8009aac <fiprintf+0x20>)
 8009a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	f000 f83d 	bl	8009b1c <_vfiprintf_r>
 8009aa2:	b002      	add	sp, #8
 8009aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa8:	b003      	add	sp, #12
 8009aaa:	4770      	bx	lr
 8009aac:	20000020 	.word	0x20000020

08009ab0 <abort>:
 8009ab0:	2006      	movs	r0, #6
 8009ab2:	b508      	push	{r3, lr}
 8009ab4:	f000 fa06 	bl	8009ec4 <raise>
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f7f7 fd9e 	bl	80015fa <_exit>

08009abe <_malloc_usable_size_r>:
 8009abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac2:	1f18      	subs	r0, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bfbc      	itt	lt
 8009ac8:	580b      	ldrlt	r3, [r1, r0]
 8009aca:	18c0      	addlt	r0, r0, r3
 8009acc:	4770      	bx	lr

08009ace <__sfputc_r>:
 8009ace:	6893      	ldr	r3, [r2, #8]
 8009ad0:	b410      	push	{r4}
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	6093      	str	r3, [r2, #8]
 8009ad8:	da07      	bge.n	8009aea <__sfputc_r+0x1c>
 8009ada:	6994      	ldr	r4, [r2, #24]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	db01      	blt.n	8009ae4 <__sfputc_r+0x16>
 8009ae0:	290a      	cmp	r1, #10
 8009ae2:	d102      	bne.n	8009aea <__sfputc_r+0x1c>
 8009ae4:	bc10      	pop	{r4}
 8009ae6:	f000 b931 	b.w	8009d4c <__swbuf_r>
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	1c58      	adds	r0, r3, #1
 8009aee:	6010      	str	r0, [r2, #0]
 8009af0:	7019      	strb	r1, [r3, #0]
 8009af2:	4608      	mov	r0, r1
 8009af4:	bc10      	pop	{r4}
 8009af6:	4770      	bx	lr

08009af8 <__sfputs_r>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	4614      	mov	r4, r2
 8009b00:	18d5      	adds	r5, r2, r3
 8009b02:	42ac      	cmp	r4, r5
 8009b04:	d101      	bne.n	8009b0a <__sfputs_r+0x12>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e007      	b.n	8009b1a <__sfputs_r+0x22>
 8009b0a:	463a      	mov	r2, r7
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	f7ff ffdc 	bl	8009ace <__sfputc_r>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d1f3      	bne.n	8009b02 <__sfputs_r+0xa>
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b1c <_vfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460d      	mov	r5, r1
 8009b22:	4614      	mov	r4, r2
 8009b24:	4698      	mov	r8, r3
 8009b26:	4606      	mov	r6, r0
 8009b28:	b09d      	sub	sp, #116	@ 0x74
 8009b2a:	b118      	cbz	r0, 8009b34 <_vfiprintf_r+0x18>
 8009b2c:	6a03      	ldr	r3, [r0, #32]
 8009b2e:	b90b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x18>
 8009b30:	f7fc fe00 	bl	8006734 <__sinit>
 8009b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_vfiprintf_r+0x2a>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	059a      	lsls	r2, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_vfiprintf_r+0x2a>
 8009b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b42:	f7fc ff10 	bl	8006966 <__retarget_lock_acquire_recursive>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	071b      	lsls	r3, r3, #28
 8009b4a:	d501      	bpl.n	8009b50 <_vfiprintf_r+0x34>
 8009b4c:	692b      	ldr	r3, [r5, #16]
 8009b4e:	b99b      	cbnz	r3, 8009b78 <_vfiprintf_r+0x5c>
 8009b50:	4629      	mov	r1, r5
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f938 	bl	8009dc8 <__swsetup_r>
 8009b58:	b170      	cbz	r0, 8009b78 <_vfiprintf_r+0x5c>
 8009b5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b5c:	07dc      	lsls	r4, r3, #31
 8009b5e:	d504      	bpl.n	8009b6a <_vfiprintf_r+0x4e>
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295
 8009b64:	b01d      	add	sp, #116	@ 0x74
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	89ab      	ldrh	r3, [r5, #12]
 8009b6c:	0598      	lsls	r0, r3, #22
 8009b6e:	d4f7      	bmi.n	8009b60 <_vfiprintf_r+0x44>
 8009b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b72:	f7fc fef9 	bl	8006968 <__retarget_lock_release_recursive>
 8009b76:	e7f3      	b.n	8009b60 <_vfiprintf_r+0x44>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b82:	2330      	movs	r3, #48	@ 0x30
 8009b84:	f04f 0901 	mov.w	r9, #1
 8009b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d38 <_vfiprintf_r+0x21c>
 8009b90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b94:	4623      	mov	r3, r4
 8009b96:	469a      	mov	sl, r3
 8009b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b9c:	b10a      	cbz	r2, 8009ba2 <_vfiprintf_r+0x86>
 8009b9e:	2a25      	cmp	r2, #37	@ 0x25
 8009ba0:	d1f9      	bne.n	8009b96 <_vfiprintf_r+0x7a>
 8009ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ba6:	d00b      	beq.n	8009bc0 <_vfiprintf_r+0xa4>
 8009ba8:	465b      	mov	r3, fp
 8009baa:	4622      	mov	r2, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff ffa2 	bl	8009af8 <__sfputs_r>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f000 80a7 	beq.w	8009d08 <_vfiprintf_r+0x1ec>
 8009bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bbc:	445a      	add	r2, fp
 8009bbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 809f 	beq.w	8009d08 <_vfiprintf_r+0x1ec>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bd4:	f10a 0a01 	add.w	sl, sl, #1
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009be0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009be2:	4654      	mov	r4, sl
 8009be4:	2205      	movs	r2, #5
 8009be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bea:	4853      	ldr	r0, [pc, #332]	@ (8009d38 <_vfiprintf_r+0x21c>)
 8009bec:	f7fc febd 	bl	800696a <memchr>
 8009bf0:	9a04      	ldr	r2, [sp, #16]
 8009bf2:	b9d8      	cbnz	r0, 8009c2c <_vfiprintf_r+0x110>
 8009bf4:	06d1      	lsls	r1, r2, #27
 8009bf6:	bf44      	itt	mi
 8009bf8:	2320      	movmi	r3, #32
 8009bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfe:	0713      	lsls	r3, r2, #28
 8009c00:	bf44      	itt	mi
 8009c02:	232b      	movmi	r3, #43	@ 0x2b
 8009c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c08:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c0e:	d015      	beq.n	8009c3c <_vfiprintf_r+0x120>
 8009c10:	4654      	mov	r4, sl
 8009c12:	2000      	movs	r0, #0
 8009c14:	f04f 0c0a 	mov.w	ip, #10
 8009c18:	9a07      	ldr	r2, [sp, #28]
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c20:	3b30      	subs	r3, #48	@ 0x30
 8009c22:	2b09      	cmp	r3, #9
 8009c24:	d94b      	bls.n	8009cbe <_vfiprintf_r+0x1a2>
 8009c26:	b1b0      	cbz	r0, 8009c56 <_vfiprintf_r+0x13a>
 8009c28:	9207      	str	r2, [sp, #28]
 8009c2a:	e014      	b.n	8009c56 <_vfiprintf_r+0x13a>
 8009c2c:	eba0 0308 	sub.w	r3, r0, r8
 8009c30:	fa09 f303 	lsl.w	r3, r9, r3
 8009c34:	4313      	orrs	r3, r2
 8009c36:	46a2      	mov	sl, r4
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	e7d2      	b.n	8009be2 <_vfiprintf_r+0xc6>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	1d19      	adds	r1, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	9103      	str	r1, [sp, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bfbb      	ittet	lt
 8009c48:	425b      	neglt	r3, r3
 8009c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c4e:	9307      	strge	r3, [sp, #28]
 8009c50:	9307      	strlt	r3, [sp, #28]
 8009c52:	bfb8      	it	lt
 8009c54:	9204      	strlt	r2, [sp, #16]
 8009c56:	7823      	ldrb	r3, [r4, #0]
 8009c58:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c5a:	d10a      	bne.n	8009c72 <_vfiprintf_r+0x156>
 8009c5c:	7863      	ldrb	r3, [r4, #1]
 8009c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c60:	d132      	bne.n	8009cc8 <_vfiprintf_r+0x1ac>
 8009c62:	9b03      	ldr	r3, [sp, #12]
 8009c64:	3402      	adds	r4, #2
 8009c66:	1d1a      	adds	r2, r3, #4
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	9203      	str	r2, [sp, #12]
 8009c6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d3c <_vfiprintf_r+0x220>
 8009c76:	2203      	movs	r2, #3
 8009c78:	4650      	mov	r0, sl
 8009c7a:	7821      	ldrb	r1, [r4, #0]
 8009c7c:	f7fc fe75 	bl	800696a <memchr>
 8009c80:	b138      	cbz	r0, 8009c92 <_vfiprintf_r+0x176>
 8009c82:	2240      	movs	r2, #64	@ 0x40
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	eba0 000a 	sub.w	r0, r0, sl
 8009c8a:	4082      	lsls	r2, r0
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	3401      	adds	r4, #1
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	2206      	movs	r2, #6
 8009c98:	4829      	ldr	r0, [pc, #164]	@ (8009d40 <_vfiprintf_r+0x224>)
 8009c9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c9e:	f7fc fe64 	bl	800696a <memchr>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d03f      	beq.n	8009d26 <_vfiprintf_r+0x20a>
 8009ca6:	4b27      	ldr	r3, [pc, #156]	@ (8009d44 <_vfiprintf_r+0x228>)
 8009ca8:	bb1b      	cbnz	r3, 8009cf2 <_vfiprintf_r+0x1d6>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	3307      	adds	r3, #7
 8009cae:	f023 0307 	bic.w	r3, r3, #7
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	9303      	str	r3, [sp, #12]
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	443b      	add	r3, r7
 8009cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbc:	e76a      	b.n	8009b94 <_vfiprintf_r+0x78>
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc6:	e7a8      	b.n	8009c1a <_vfiprintf_r+0xfe>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f04f 0c0a 	mov.w	ip, #10
 8009cce:	4619      	mov	r1, r3
 8009cd0:	3401      	adds	r4, #1
 8009cd2:	9305      	str	r3, [sp, #20]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cda:	3a30      	subs	r2, #48	@ 0x30
 8009cdc:	2a09      	cmp	r2, #9
 8009cde:	d903      	bls.n	8009ce8 <_vfiprintf_r+0x1cc>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0c6      	beq.n	8009c72 <_vfiprintf_r+0x156>
 8009ce4:	9105      	str	r1, [sp, #20]
 8009ce6:	e7c4      	b.n	8009c72 <_vfiprintf_r+0x156>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	2301      	movs	r3, #1
 8009cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf0:	e7f0      	b.n	8009cd4 <_vfiprintf_r+0x1b8>
 8009cf2:	ab03      	add	r3, sp, #12
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	462a      	mov	r2, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4b13      	ldr	r3, [pc, #76]	@ (8009d48 <_vfiprintf_r+0x22c>)
 8009cfc:	a904      	add	r1, sp, #16
 8009cfe:	f7fb fec7 	bl	8005a90 <_printf_float>
 8009d02:	4607      	mov	r7, r0
 8009d04:	1c78      	adds	r0, r7, #1
 8009d06:	d1d6      	bne.n	8009cb6 <_vfiprintf_r+0x19a>
 8009d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d0a:	07d9      	lsls	r1, r3, #31
 8009d0c:	d405      	bmi.n	8009d1a <_vfiprintf_r+0x1fe>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	059a      	lsls	r2, r3, #22
 8009d12:	d402      	bmi.n	8009d1a <_vfiprintf_r+0x1fe>
 8009d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d16:	f7fc fe27 	bl	8006968 <__retarget_lock_release_recursive>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	065b      	lsls	r3, r3, #25
 8009d1e:	f53f af1f 	bmi.w	8009b60 <_vfiprintf_r+0x44>
 8009d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d24:	e71e      	b.n	8009b64 <_vfiprintf_r+0x48>
 8009d26:	ab03      	add	r3, sp, #12
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <_vfiprintf_r+0x22c>)
 8009d30:	a904      	add	r1, sp, #16
 8009d32:	f7fc f94b 	bl	8005fcc <_printf_i>
 8009d36:	e7e4      	b.n	8009d02 <_vfiprintf_r+0x1e6>
 8009d38:	0800a193 	.word	0x0800a193
 8009d3c:	0800a199 	.word	0x0800a199
 8009d40:	0800a19d 	.word	0x0800a19d
 8009d44:	08005a91 	.word	0x08005a91
 8009d48:	08009af9 	.word	0x08009af9

08009d4c <__swbuf_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	4614      	mov	r4, r2
 8009d52:	4605      	mov	r5, r0
 8009d54:	b118      	cbz	r0, 8009d5e <__swbuf_r+0x12>
 8009d56:	6a03      	ldr	r3, [r0, #32]
 8009d58:	b90b      	cbnz	r3, 8009d5e <__swbuf_r+0x12>
 8009d5a:	f7fc fceb 	bl	8006734 <__sinit>
 8009d5e:	69a3      	ldr	r3, [r4, #24]
 8009d60:	60a3      	str	r3, [r4, #8]
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	071a      	lsls	r2, r3, #28
 8009d66:	d501      	bpl.n	8009d6c <__swbuf_r+0x20>
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	b943      	cbnz	r3, 8009d7e <__swbuf_r+0x32>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 f82a 	bl	8009dc8 <__swsetup_r>
 8009d74:	b118      	cbz	r0, 8009d7e <__swbuf_r+0x32>
 8009d76:	f04f 37ff 	mov.w	r7, #4294967295
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	b2f6      	uxtb	r6, r6
 8009d84:	1a98      	subs	r0, r3, r2
 8009d86:	6963      	ldr	r3, [r4, #20]
 8009d88:	4637      	mov	r7, r6
 8009d8a:	4283      	cmp	r3, r0
 8009d8c:	dc05      	bgt.n	8009d9a <__swbuf_r+0x4e>
 8009d8e:	4621      	mov	r1, r4
 8009d90:	4628      	mov	r0, r5
 8009d92:	f7ff fa4b 	bl	800922c <_fflush_r>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d1ed      	bne.n	8009d76 <__swbuf_r+0x2a>
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	701e      	strb	r6, [r3, #0]
 8009da8:	6962      	ldr	r2, [r4, #20]
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d004      	beq.n	8009dba <__swbuf_r+0x6e>
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	07db      	lsls	r3, r3, #31
 8009db4:	d5e1      	bpl.n	8009d7a <__swbuf_r+0x2e>
 8009db6:	2e0a      	cmp	r6, #10
 8009db8:	d1df      	bne.n	8009d7a <__swbuf_r+0x2e>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f7ff fa35 	bl	800922c <_fflush_r>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d0d9      	beq.n	8009d7a <__swbuf_r+0x2e>
 8009dc6:	e7d6      	b.n	8009d76 <__swbuf_r+0x2a>

08009dc8 <__swsetup_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4b29      	ldr	r3, [pc, #164]	@ (8009e70 <__swsetup_r+0xa8>)
 8009dcc:	4605      	mov	r5, r0
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	b118      	cbz	r0, 8009ddc <__swsetup_r+0x14>
 8009dd4:	6a03      	ldr	r3, [r0, #32]
 8009dd6:	b90b      	cbnz	r3, 8009ddc <__swsetup_r+0x14>
 8009dd8:	f7fc fcac 	bl	8006734 <__sinit>
 8009ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de0:	0719      	lsls	r1, r3, #28
 8009de2:	d422      	bmi.n	8009e2a <__swsetup_r+0x62>
 8009de4:	06da      	lsls	r2, r3, #27
 8009de6:	d407      	bmi.n	8009df8 <__swsetup_r+0x30>
 8009de8:	2209      	movs	r2, #9
 8009dea:	602a      	str	r2, [r5, #0]
 8009dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	e033      	b.n	8009e60 <__swsetup_r+0x98>
 8009df8:	0758      	lsls	r0, r3, #29
 8009dfa:	d512      	bpl.n	8009e22 <__swsetup_r+0x5a>
 8009dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dfe:	b141      	cbz	r1, 8009e12 <__swsetup_r+0x4a>
 8009e00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e04:	4299      	cmp	r1, r3
 8009e06:	d002      	beq.n	8009e0e <__swsetup_r+0x46>
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f7fd fc1d 	bl	8007648 <_free_r>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f043 0308 	orr.w	r3, r3, #8
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	b94b      	cbnz	r3, 8009e42 <__swsetup_r+0x7a>
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e38:	d003      	beq.n	8009e42 <__swsetup_r+0x7a>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 f882 	bl	8009f46 <__smakebuf_r>
 8009e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e46:	f013 0201 	ands.w	r2, r3, #1
 8009e4a:	d00a      	beq.n	8009e62 <__swsetup_r+0x9a>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60a2      	str	r2, [r4, #8]
 8009e50:	6962      	ldr	r2, [r4, #20]
 8009e52:	4252      	negs	r2, r2
 8009e54:	61a2      	str	r2, [r4, #24]
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	b942      	cbnz	r2, 8009e6c <__swsetup_r+0xa4>
 8009e5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e5e:	d1c5      	bne.n	8009dec <__swsetup_r+0x24>
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	0799      	lsls	r1, r3, #30
 8009e64:	bf58      	it	pl
 8009e66:	6962      	ldrpl	r2, [r4, #20]
 8009e68:	60a2      	str	r2, [r4, #8]
 8009e6a:	e7f4      	b.n	8009e56 <__swsetup_r+0x8e>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e7f7      	b.n	8009e60 <__swsetup_r+0x98>
 8009e70:	20000020 	.word	0x20000020

08009e74 <_raise_r>:
 8009e74:	291f      	cmp	r1, #31
 8009e76:	b538      	push	{r3, r4, r5, lr}
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	d904      	bls.n	8009e88 <_raise_r+0x14>
 8009e7e:	2316      	movs	r3, #22
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e8a:	b112      	cbz	r2, 8009e92 <_raise_r+0x1e>
 8009e8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e90:	b94b      	cbnz	r3, 8009ea6 <_raise_r+0x32>
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f830 	bl	8009ef8 <_getpid_r>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea2:	f000 b817 	b.w	8009ed4 <_kill_r>
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d00a      	beq.n	8009ec0 <_raise_r+0x4c>
 8009eaa:	1c59      	adds	r1, r3, #1
 8009eac:	d103      	bne.n	8009eb6 <_raise_r+0x42>
 8009eae:	2316      	movs	r3, #22
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	e7e7      	b.n	8009e86 <_raise_r+0x12>
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ebe:	4798      	blx	r3
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7e0      	b.n	8009e86 <_raise_r+0x12>

08009ec4 <raise>:
 8009ec4:	4b02      	ldr	r3, [pc, #8]	@ (8009ed0 <raise+0xc>)
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	f7ff bfd3 	b.w	8009e74 <_raise_r>
 8009ece:	bf00      	nop
 8009ed0:	20000020 	.word	0x20000020

08009ed4 <_kill_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4d06      	ldr	r5, [pc, #24]	@ (8009ef4 <_kill_r+0x20>)
 8009eda:	4604      	mov	r4, r0
 8009edc:	4608      	mov	r0, r1
 8009ede:	4611      	mov	r1, r2
 8009ee0:	602b      	str	r3, [r5, #0]
 8009ee2:	f7f7 fb7a 	bl	80015da <_kill>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	d102      	bne.n	8009ef0 <_kill_r+0x1c>
 8009eea:	682b      	ldr	r3, [r5, #0]
 8009eec:	b103      	cbz	r3, 8009ef0 <_kill_r+0x1c>
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200003e0 	.word	0x200003e0

08009ef8 <_getpid_r>:
 8009ef8:	f7f7 bb68 	b.w	80015cc <_getpid>

08009efc <__swhatbuf_r>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	460c      	mov	r4, r1
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	4615      	mov	r5, r2
 8009f06:	2900      	cmp	r1, #0
 8009f08:	461e      	mov	r6, r3
 8009f0a:	b096      	sub	sp, #88	@ 0x58
 8009f0c:	da0c      	bge.n	8009f28 <__swhatbuf_r+0x2c>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	2100      	movs	r1, #0
 8009f12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f16:	bf14      	ite	ne
 8009f18:	2340      	movne	r3, #64	@ 0x40
 8009f1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f1e:	2000      	movs	r0, #0
 8009f20:	6031      	str	r1, [r6, #0]
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	b016      	add	sp, #88	@ 0x58
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	466a      	mov	r2, sp
 8009f2a:	f000 f849 	bl	8009fc0 <_fstat_r>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	dbed      	blt.n	8009f0e <__swhatbuf_r+0x12>
 8009f32:	9901      	ldr	r1, [sp, #4]
 8009f34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f3c:	4259      	negs	r1, r3
 8009f3e:	4159      	adcs	r1, r3
 8009f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f44:	e7eb      	b.n	8009f1e <__swhatbuf_r+0x22>

08009f46 <__smakebuf_r>:
 8009f46:	898b      	ldrh	r3, [r1, #12]
 8009f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f4a:	079d      	lsls	r5, r3, #30
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	d507      	bpl.n	8009f62 <__smakebuf_r+0x1c>
 8009f52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	6163      	str	r3, [r4, #20]
 8009f5e:	b003      	add	sp, #12
 8009f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f62:	466a      	mov	r2, sp
 8009f64:	ab01      	add	r3, sp, #4
 8009f66:	f7ff ffc9 	bl	8009efc <__swhatbuf_r>
 8009f6a:	9f00      	ldr	r7, [sp, #0]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	4639      	mov	r1, r7
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fd fbdb 	bl	800772c <_malloc_r>
 8009f76:	b948      	cbnz	r0, 8009f8c <__smakebuf_r+0x46>
 8009f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7c:	059a      	lsls	r2, r3, #22
 8009f7e:	d4ee      	bmi.n	8009f5e <__smakebuf_r+0x18>
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	f043 0302 	orr.w	r3, r3, #2
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	e7e2      	b.n	8009f52 <__smakebuf_r+0xc>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	6020      	str	r0, [r4, #0]
 8009f9c:	b15b      	cbz	r3, 8009fb6 <__smakebuf_r+0x70>
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa4:	f000 f81e 	bl	8009fe4 <_isatty_r>
 8009fa8:	b128      	cbz	r0, 8009fb6 <__smakebuf_r+0x70>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	f043 0301 	orr.w	r3, r3, #1
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	431d      	orrs	r5, r3
 8009fba:	81a5      	strh	r5, [r4, #12]
 8009fbc:	e7cf      	b.n	8009f5e <__smakebuf_r+0x18>
	...

08009fc0 <_fstat_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4d06      	ldr	r5, [pc, #24]	@ (8009fe0 <_fstat_r+0x20>)
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	4611      	mov	r1, r2
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	f7f7 fb63 	bl	8001698 <_fstat>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d102      	bne.n	8009fdc <_fstat_r+0x1c>
 8009fd6:	682b      	ldr	r3, [r5, #0]
 8009fd8:	b103      	cbz	r3, 8009fdc <_fstat_r+0x1c>
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	bd38      	pop	{r3, r4, r5, pc}
 8009fde:	bf00      	nop
 8009fe0:	200003e0 	.word	0x200003e0

08009fe4 <_isatty_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4d05      	ldr	r5, [pc, #20]	@ (800a000 <_isatty_r+0x1c>)
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f7 fb61 	bl	80016b6 <_isatty>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_isatty_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_isatty_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200003e0 	.word	0x200003e0

0800a004 <_init>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr

0800a010 <_fini>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr
